; ModuleID = 'temp.bc'
source_filename = "llvm-link"
target datalayout = "e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64"
target triple = "armv7--linux-eabi"

%struct.SHA1_CTX = type { [5 x i32], [2 x i32], [64 x i8] }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i32, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i32, i32, [40 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }
%union.pthread_attr_t = type { i32, [32 x i8] }

@totalLoops = global i32 0, align 4
@thread_cond_cpu = local_unnamed_addr global i32 1, align 4
@thread_cond_cgra = local_unnamed_addr global i32 0, align 4
@thread_exit = local_unnamed_addr global i32 0, align 4
@dynamicTCVal = local_unnamed_addr global i32 0, align 4
@initCGRA = common local_unnamed_addr global i32* null, align 4
@epilog = common local_unnamed_addr global i32* null, align 4
@prolog = common local_unnamed_addr global i32* null, align 4
@kernel = common local_unnamed_addr global i32* null, align 4
@prologPtr = common local_unnamed_addr global i32* null, align 4
@epilogPtr = common local_unnamed_addr global i32* null, align 4
@kernelPtr = common local_unnamed_addr global i32* null, align 4
@pth = common global i32 0, align 4
@ArrPtr = common local_unnamed_addr global i32* null, align 4
@main.string = internal constant [4 x i8] c"abc\00", align 1
@.str = private unnamed_addr constant [5 x i8] c"%02x\00", align 1
@main.expect = internal constant [41 x i8] c"a9993e364706816aba3e25717850c26c9cd0d89d\00", align 1
@str = private unnamed_addr constant [26 x i8] c"Error with hash function!\00"
@.str.3 = private unnamed_addr constant [29 x i8] c"Completed %d hash funcitons\0A\00", align 1
@configureCGRA.directoryPath = private unnamed_addr constant [20 x i8] c"./CGRAExec/L\00\00\00\00\00\00\00\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.1.2 = private unnamed_addr constant [16 x i8] c"/epilog_ins.bin\00", align 1
@.str.2 = private unnamed_addr constant [16 x i8] c"/prolog_ins.bin\00", align 1
@.str.3.3 = private unnamed_addr constant [16 x i8] c"/kernel_ins.bin\00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c"rb\00", align 1
@.str.5 = private unnamed_addr constant [32 x i8] c"\0A**********EPISIZE %d*********\0A\00", align 1
@.str.6 = private unnamed_addr constant [32 x i8] c"\0A**********PROSIZE %d*********\0A\00", align 1
@.str.7 = private unnamed_addr constant [33 x i8] c"\0A**********KERNSIZE %d*********\0A\00", align 1
@.str.8 = private unnamed_addr constant [37 x i8] c"\0A******SIZE OF UNISGNED INT %d*****\0A\00", align 1
@.str.9 = private unnamed_addr constant [26 x i8] c"/livevar_st_ins_count.txt\00", align 1
@.str.10 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@.str.11 = private unnamed_addr constant [18 x i8] c"/kernel_count.txt\00", align 1
@.str.12 = private unnamed_addr constant [16 x i8] c"Loop Count: %d\0A\00", align 1
@.str.13 = private unnamed_addr constant [52 x i8] c"From FILE: PROLOGPC= %x, EPILOGPC=%x,  KernelPC=%x\0A\00", align 1
@configureCGRA.initCGRAfile = private unnamed_addr constant [40 x i8] c"./CGRAExec/L1\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", align 1
@.str.14 = private unnamed_addr constant [14 x i8] c"/initCGRA.txt\00", align 1
@.str.15 = private unnamed_addr constant [3 x i8] c"wb\00", align 1
@.str.16 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@.str.17 = private unnamed_addr constant [5 x i8] c"%ld\0A\00", align 1
@checkTotalLoops.myfile = private unnamed_addr constant [40 x i8] c"./CGRAExec/total_loops.txt\00\00\00\00\00\00\00\00\00\00\00\00\00\00", align 1
@.str.18 = private unnamed_addr constant [3 x i8] c"%u\00", align 1
@.str.20 = private unnamed_addr constant [35 x i8] c"Core will execute loop %u on CGRA\0A\00", align 1
@str.4 = private unnamed_addr constant [14 x i8] c"deleting cgra\00"
@str.24 = private unnamed_addr constant [40 x i8] c"Main thread calling join w/ CGRA thread\00"
@str.25 = private unnamed_addr constant [35 x i8] c"Main thread calling CGRA thread...\00"

; Function Attrs: nounwind
define void @SHA1Transform(i32* nocapture, i8* nocapture readonly) local_unnamed_addr #0 {
  %3 = bitcast i8* %1 to i32*
  %4 = load i32, i32* %3, align 1
  %5 = getelementptr inbounds i8, i8* %1, i32 4
  %6 = bitcast i8* %5 to i32*
  %7 = load i32, i32* %6, align 1
  %8 = getelementptr inbounds i8, i8* %1, i32 8
  %9 = bitcast i8* %8 to i32*
  %10 = load i32, i32* %9, align 1
  %11 = getelementptr inbounds i8, i8* %1, i32 12
  %12 = bitcast i8* %11 to i32*
  %13 = load i32, i32* %12, align 1
  %14 = getelementptr inbounds i8, i8* %1, i32 16
  %15 = bitcast i8* %14 to i32*
  %16 = load i32, i32* %15, align 1
  %17 = getelementptr inbounds i8, i8* %1, i32 20
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 1
  %20 = getelementptr inbounds i8, i8* %1, i32 24
  %21 = bitcast i8* %20 to i32*
  %22 = load i32, i32* %21, align 1
  %23 = getelementptr inbounds i8, i8* %1, i32 28
  %24 = bitcast i8* %23 to i32*
  %25 = load i32, i32* %24, align 1
  %26 = getelementptr inbounds i8, i8* %1, i32 32
  %27 = bitcast i8* %26 to i32*
  %28 = load i32, i32* %27, align 1
  %29 = getelementptr inbounds i8, i8* %1, i32 36
  %30 = bitcast i8* %29 to i32*
  %31 = load i32, i32* %30, align 1
  %32 = getelementptr inbounds i8, i8* %1, i32 40
  %33 = bitcast i8* %32 to i32*
  %34 = load i32, i32* %33, align 1
  %35 = getelementptr inbounds i8, i8* %1, i32 44
  %36 = bitcast i8* %35 to i32*
  %37 = load i32, i32* %36, align 1
  %38 = getelementptr inbounds i8, i8* %1, i32 48
  %39 = bitcast i8* %38 to i32*
  %40 = load i32, i32* %39, align 1
  %41 = getelementptr inbounds i8, i8* %1, i32 52
  %42 = bitcast i8* %41 to i32*
  %43 = load i32, i32* %42, align 1
  %44 = getelementptr inbounds i8, i8* %1, i32 56
  %45 = bitcast i8* %44 to i32*
  %46 = load i32, i32* %45, align 1
  %47 = getelementptr inbounds i8, i8* %1, i32 60
  %48 = bitcast i8* %47 to i32*
  %49 = load i32, i32* %48, align 1
  %50 = load i32, i32* %0, align 4, !tbaa !5
  %51 = getelementptr inbounds i32, i32* %0, i32 1
  %52 = load i32, i32* %51, align 4, !tbaa !5
  %53 = getelementptr inbounds i32, i32* %0, i32 2
  %54 = load i32, i32* %53, align 4, !tbaa !5
  %55 = getelementptr inbounds i32, i32* %0, i32 3
  %56 = load i32, i32* %55, align 4, !tbaa !5
  %57 = getelementptr inbounds i32, i32* %0, i32 4
  %58 = load i32, i32* %57, align 4, !tbaa !5
  %59 = xor i32 %56, %54
  %60 = and i32 %59, %52
  %61 = xor i32 %60, %56
  %62 = tail call i32 @llvm.bswap.i32(i32 %4)
  %63 = shl i32 %50, 5
  %64 = lshr i32 %50, 27
  %65 = or i32 %63, %64
  %66 = add i32 %62, 1518500249
  %67 = add i32 %66, %65
  %68 = add i32 %67, %58
  %69 = add i32 %68, %61
  %70 = shl i32 %52, 30
  %71 = lshr i32 %52, 2
  %72 = or i32 %70, %71
  %73 = xor i32 %72, %54
  %74 = and i32 %73, %50
  %75 = xor i32 %74, %54
  %76 = tail call i32 @llvm.bswap.i32(i32 %7)
  %77 = shl i32 %69, 5
  %78 = lshr i32 %69, 27
  %79 = or i32 %77, %78
  %80 = add i32 %76, 1518500249
  %81 = add i32 %80, %56
  %82 = add i32 %81, %75
  %83 = add i32 %82, %79
  %84 = shl i32 %50, 30
  %85 = lshr i32 %50, 2
  %86 = or i32 %84, %85
  %87 = xor i32 %72, %86
  %88 = and i32 %69, %87
  %89 = xor i32 %88, %72
  %90 = tail call i32 @llvm.bswap.i32(i32 %10)
  %91 = shl i32 %83, 5
  %92 = lshr i32 %83, 27
  %93 = or i32 %91, %92
  %94 = add i32 %90, 1518500249
  %95 = add i32 %94, %54
  %96 = add i32 %95, %89
  %97 = add i32 %96, %93
  %98 = shl i32 %69, 30
  %99 = lshr i32 %69, 2
  %100 = or i32 %98, %99
  %101 = xor i32 %100, %86
  %102 = and i32 %83, %101
  %103 = xor i32 %102, %86
  %104 = tail call i32 @llvm.bswap.i32(i32 %13)
  %105 = shl i32 %97, 5
  %106 = lshr i32 %97, 27
  %107 = or i32 %105, %106
  %108 = add i32 %104, 1518500249
  %109 = add i32 %108, %72
  %110 = add i32 %109, %103
  %111 = add i32 %110, %107
  %112 = shl i32 %83, 30
  %113 = lshr i32 %83, 2
  %114 = or i32 %112, %113
  %115 = xor i32 %114, %100
  %116 = and i32 %97, %115
  %117 = xor i32 %116, %100
  %118 = tail call i32 @llvm.bswap.i32(i32 %16)
  %119 = shl i32 %111, 5
  %120 = lshr i32 %111, 27
  %121 = or i32 %119, %120
  %122 = add i32 %118, 1518500249
  %123 = add i32 %122, %86
  %124 = add i32 %123, %117
  %125 = add i32 %124, %121
  %126 = shl i32 %97, 30
  %127 = lshr i32 %97, 2
  %128 = or i32 %126, %127
  %129 = xor i32 %128, %114
  %130 = and i32 %111, %129
  %131 = xor i32 %130, %114
  %132 = tail call i32 @llvm.bswap.i32(i32 %19)
  %133 = shl i32 %125, 5
  %134 = lshr i32 %125, 27
  %135 = or i32 %133, %134
  %136 = add i32 %132, 1518500249
  %137 = add i32 %136, %100
  %138 = add i32 %137, %131
  %139 = add i32 %138, %135
  %140 = shl i32 %111, 30
  %141 = lshr i32 %111, 2
  %142 = or i32 %140, %141
  %143 = xor i32 %142, %128
  %144 = and i32 %125, %143
  %145 = xor i32 %144, %128
  %146 = tail call i32 @llvm.bswap.i32(i32 %22)
  %147 = shl i32 %139, 5
  %148 = lshr i32 %139, 27
  %149 = or i32 %147, %148
  %150 = add i32 %146, 1518500249
  %151 = add i32 %150, %114
  %152 = add i32 %151, %145
  %153 = add i32 %152, %149
  %154 = shl i32 %125, 30
  %155 = lshr i32 %125, 2
  %156 = or i32 %154, %155
  %157 = xor i32 %156, %142
  %158 = and i32 %139, %157
  %159 = xor i32 %158, %142
  %160 = tail call i32 @llvm.bswap.i32(i32 %25)
  %161 = shl i32 %153, 5
  %162 = lshr i32 %153, 27
  %163 = or i32 %161, %162
  %164 = add i32 %160, 1518500249
  %165 = add i32 %164, %128
  %166 = add i32 %165, %159
  %167 = add i32 %166, %163
  %168 = shl i32 %139, 30
  %169 = lshr i32 %139, 2
  %170 = or i32 %168, %169
  %171 = xor i32 %170, %156
  %172 = and i32 %153, %171
  %173 = xor i32 %172, %156
  %174 = tail call i32 @llvm.bswap.i32(i32 %28)
  %175 = shl i32 %167, 5
  %176 = lshr i32 %167, 27
  %177 = or i32 %175, %176
  %178 = add i32 %174, 1518500249
  %179 = add i32 %178, %142
  %180 = add i32 %179, %173
  %181 = add i32 %180, %177
  %182 = shl i32 %153, 30
  %183 = lshr i32 %153, 2
  %184 = or i32 %182, %183
  %185 = xor i32 %184, %170
  %186 = and i32 %167, %185
  %187 = xor i32 %186, %170
  %188 = tail call i32 @llvm.bswap.i32(i32 %31)
  %189 = shl i32 %181, 5
  %190 = lshr i32 %181, 27
  %191 = or i32 %189, %190
  %192 = add i32 %188, 1518500249
  %193 = add i32 %192, %156
  %194 = add i32 %193, %187
  %195 = add i32 %194, %191
  %196 = shl i32 %167, 30
  %197 = lshr i32 %167, 2
  %198 = or i32 %196, %197
  %199 = xor i32 %198, %184
  %200 = and i32 %181, %199
  %201 = xor i32 %200, %184
  %202 = tail call i32 @llvm.bswap.i32(i32 %34)
  %203 = shl i32 %195, 5
  %204 = lshr i32 %195, 27
  %205 = or i32 %203, %204
  %206 = add i32 %202, 1518500249
  %207 = add i32 %206, %170
  %208 = add i32 %207, %201
  %209 = add i32 %208, %205
  %210 = shl i32 %181, 30
  %211 = lshr i32 %181, 2
  %212 = or i32 %210, %211
  %213 = xor i32 %212, %198
  %214 = and i32 %195, %213
  %215 = xor i32 %214, %198
  %216 = tail call i32 @llvm.bswap.i32(i32 %37)
  %217 = shl i32 %209, 5
  %218 = lshr i32 %209, 27
  %219 = or i32 %217, %218
  %220 = add i32 %216, 1518500249
  %221 = add i32 %220, %184
  %222 = add i32 %221, %215
  %223 = add i32 %222, %219
  %224 = shl i32 %195, 30
  %225 = lshr i32 %195, 2
  %226 = or i32 %224, %225
  %227 = xor i32 %226, %212
  %228 = and i32 %209, %227
  %229 = xor i32 %228, %212
  %230 = tail call i32 @llvm.bswap.i32(i32 %40)
  %231 = shl i32 %223, 5
  %232 = lshr i32 %223, 27
  %233 = or i32 %231, %232
  %234 = add i32 %230, 1518500249
  %235 = add i32 %234, %198
  %236 = add i32 %235, %229
  %237 = add i32 %236, %233
  %238 = shl i32 %209, 30
  %239 = lshr i32 %209, 2
  %240 = or i32 %238, %239
  %241 = xor i32 %240, %226
  %242 = and i32 %223, %241
  %243 = xor i32 %242, %226
  %244 = tail call i32 @llvm.bswap.i32(i32 %43)
  %245 = shl i32 %237, 5
  %246 = lshr i32 %237, 27
  %247 = or i32 %245, %246
  %248 = add i32 %244, 1518500249
  %249 = add i32 %248, %212
  %250 = add i32 %249, %243
  %251 = add i32 %250, %247
  %252 = shl i32 %223, 30
  %253 = lshr i32 %223, 2
  %254 = or i32 %252, %253
  %255 = xor i32 %254, %240
  %256 = and i32 %237, %255
  %257 = xor i32 %256, %240
  %258 = tail call i32 @llvm.bswap.i32(i32 %46)
  %259 = shl i32 %251, 5
  %260 = lshr i32 %251, 27
  %261 = or i32 %259, %260
  %262 = add i32 %258, 1518500249
  %263 = add i32 %262, %226
  %264 = add i32 %263, %257
  %265 = add i32 %264, %261
  %266 = shl i32 %237, 30
  %267 = lshr i32 %237, 2
  %268 = or i32 %266, %267
  %269 = xor i32 %268, %254
  %270 = and i32 %251, %269
  %271 = xor i32 %270, %254
  %272 = tail call i32 @llvm.bswap.i32(i32 %49)
  %273 = shl i32 %265, 5
  %274 = lshr i32 %265, 27
  %275 = or i32 %273, %274
  %276 = add i32 %272, 1518500249
  %277 = add i32 %276, %240
  %278 = add i32 %277, %271
  %279 = add i32 %278, %275
  %280 = shl i32 %251, 30
  %281 = lshr i32 %251, 2
  %282 = or i32 %280, %281
  %283 = xor i32 %282, %268
  %284 = and i32 %265, %283
  %285 = xor i32 %284, %268
  %286 = xor i32 %10, %4
  %287 = xor i32 %286, %28
  %288 = xor i32 %287, %43
  %289 = tail call i32 @llvm.bswap.i32(i32 %288)
  %290 = shl i32 %289, 1
  %291 = lshr i32 %289, 31
  %292 = or i32 %290, %291
  %293 = shl i32 %279, 5
  %294 = lshr i32 %279, 27
  %295 = or i32 %293, %294
  %296 = add i32 %292, 1518500249
  %297 = add i32 %296, %254
  %298 = add i32 %297, %285
  %299 = add i32 %298, %295
  %300 = shl i32 %265, 30
  %301 = lshr i32 %265, 2
  %302 = or i32 %300, %301
  %303 = xor i32 %302, %282
  %304 = and i32 %279, %303
  %305 = xor i32 %304, %282
  %306 = xor i32 %13, %7
  %307 = xor i32 %306, %31
  %308 = xor i32 %307, %46
  %309 = tail call i32 @llvm.bswap.i32(i32 %308)
  %310 = shl i32 %309, 1
  %311 = lshr i32 %309, 31
  %312 = or i32 %310, %311
  %313 = shl i32 %299, 5
  %314 = lshr i32 %299, 27
  %315 = or i32 %313, %314
  %316 = add i32 %312, 1518500249
  %317 = add i32 %316, %268
  %318 = add i32 %317, %305
  %319 = add i32 %318, %315
  %320 = shl i32 %279, 30
  %321 = lshr i32 %279, 2
  %322 = or i32 %320, %321
  %323 = xor i32 %322, %302
  %324 = and i32 %299, %323
  %325 = xor i32 %324, %302
  %326 = xor i32 %16, %10
  %327 = xor i32 %326, %34
  %328 = xor i32 %327, %49
  %329 = tail call i32 @llvm.bswap.i32(i32 %328)
  %330 = shl i32 %329, 1
  %331 = lshr i32 %329, 31
  %332 = or i32 %330, %331
  %333 = shl i32 %319, 5
  %334 = lshr i32 %319, 27
  %335 = or i32 %333, %334
  %336 = add i32 %332, 1518500249
  %337 = add i32 %336, %282
  %338 = add i32 %337, %325
  %339 = add i32 %338, %335
  %340 = shl i32 %299, 30
  %341 = lshr i32 %299, 2
  %342 = or i32 %340, %341
  %343 = xor i32 %342, %322
  %344 = and i32 %319, %343
  %345 = xor i32 %344, %322
  %346 = xor i32 %19, %13
  %347 = xor i32 %346, %37
  %348 = tail call i32 @llvm.bswap.i32(i32 %347)
  %349 = xor i32 %292, %348
  %350 = shl i32 %349, 1
  %351 = lshr i32 %349, 31
  %352 = or i32 %350, %351
  %353 = shl i32 %339, 5
  %354 = lshr i32 %339, 27
  %355 = or i32 %353, %354
  %356 = add i32 %352, 1518500249
  %357 = add i32 %356, %302
  %358 = add i32 %357, %345
  %359 = add i32 %358, %355
  %360 = shl i32 %319, 30
  %361 = lshr i32 %319, 2
  %362 = or i32 %360, %361
  %363 = xor i32 %362, %342
  %364 = xor i32 %363, %339
  %365 = xor i32 %22, %16
  %366 = xor i32 %365, %40
  %367 = tail call i32 @llvm.bswap.i32(i32 %366)
  %368 = xor i32 %312, %367
  %369 = shl i32 %368, 1
  %370 = lshr i32 %368, 31
  %371 = or i32 %369, %370
  %372 = shl i32 %359, 5
  %373 = lshr i32 %359, 27
  %374 = or i32 %372, %373
  %375 = add i32 %371, 1859775393
  %376 = add i32 %375, %322
  %377 = add i32 %376, %364
  %378 = add i32 %377, %374
  %379 = shl i32 %339, 30
  %380 = lshr i32 %339, 2
  %381 = or i32 %379, %380
  %382 = xor i32 %381, %362
  %383 = xor i32 %382, %359
  %384 = xor i32 %25, %19
  %385 = xor i32 %384, %43
  %386 = tail call i32 @llvm.bswap.i32(i32 %385)
  %387 = xor i32 %332, %386
  %388 = shl i32 %387, 1
  %389 = lshr i32 %387, 31
  %390 = or i32 %388, %389
  %391 = shl i32 %378, 5
  %392 = lshr i32 %378, 27
  %393 = or i32 %391, %392
  %394 = add i32 %390, 1859775393
  %395 = add i32 %394, %342
  %396 = add i32 %395, %383
  %397 = add i32 %396, %393
  %398 = shl i32 %359, 30
  %399 = lshr i32 %359, 2
  %400 = or i32 %398, %399
  %401 = xor i32 %400, %381
  %402 = xor i32 %401, %378
  %403 = xor i32 %28, %22
  %404 = xor i32 %403, %46
  %405 = tail call i32 @llvm.bswap.i32(i32 %404)
  %406 = xor i32 %352, %405
  %407 = shl i32 %406, 1
  %408 = lshr i32 %406, 31
  %409 = or i32 %407, %408
  %410 = shl i32 %397, 5
  %411 = lshr i32 %397, 27
  %412 = or i32 %410, %411
  %413 = add i32 %409, 1859775393
  %414 = add i32 %413, %362
  %415 = add i32 %414, %402
  %416 = add i32 %415, %412
  %417 = shl i32 %378, 30
  %418 = lshr i32 %378, 2
  %419 = or i32 %417, %418
  %420 = xor i32 %419, %400
  %421 = xor i32 %420, %397
  %422 = xor i32 %31, %25
  %423 = xor i32 %422, %49
  %424 = tail call i32 @llvm.bswap.i32(i32 %423)
  %425 = xor i32 %371, %424
  %426 = shl i32 %425, 1
  %427 = lshr i32 %425, 31
  %428 = or i32 %426, %427
  %429 = shl i32 %416, 5
  %430 = lshr i32 %416, 27
  %431 = or i32 %429, %430
  %432 = add i32 %428, 1859775393
  %433 = add i32 %432, %381
  %434 = add i32 %433, %421
  %435 = add i32 %434, %431
  %436 = shl i32 %397, 30
  %437 = lshr i32 %397, 2
  %438 = or i32 %436, %437
  %439 = xor i32 %438, %419
  %440 = xor i32 %439, %416
  %441 = xor i32 %34, %28
  %442 = tail call i32 @llvm.bswap.i32(i32 %441)
  %443 = xor i32 %292, %442
  %444 = xor i32 %443, %390
  %445 = shl i32 %444, 1
  %446 = lshr i32 %444, 31
  %447 = or i32 %445, %446
  %448 = shl i32 %435, 5
  %449 = lshr i32 %435, 27
  %450 = or i32 %448, %449
  %451 = add i32 %447, 1859775393
  %452 = add i32 %451, %400
  %453 = add i32 %452, %440
  %454 = add i32 %453, %450
  %455 = shl i32 %416, 30
  %456 = lshr i32 %416, 2
  %457 = or i32 %455, %456
  %458 = xor i32 %457, %438
  %459 = xor i32 %458, %435
  %460 = xor i32 %37, %31
  %461 = tail call i32 @llvm.bswap.i32(i32 %460)
  %462 = xor i32 %312, %461
  %463 = xor i32 %462, %409
  %464 = shl i32 %463, 1
  %465 = lshr i32 %463, 31
  %466 = or i32 %464, %465
  %467 = shl i32 %454, 5
  %468 = lshr i32 %454, 27
  %469 = or i32 %467, %468
  %470 = add i32 %466, 1859775393
  %471 = add i32 %470, %419
  %472 = add i32 %471, %459
  %473 = add i32 %472, %469
  %474 = shl i32 %435, 30
  %475 = lshr i32 %435, 2
  %476 = or i32 %474, %475
  %477 = xor i32 %476, %457
  %478 = xor i32 %477, %454
  %479 = xor i32 %40, %34
  %480 = tail call i32 @llvm.bswap.i32(i32 %479)
  %481 = xor i32 %332, %480
  %482 = xor i32 %481, %428
  %483 = shl i32 %482, 1
  %484 = lshr i32 %482, 31
  %485 = or i32 %483, %484
  %486 = shl i32 %473, 5
  %487 = lshr i32 %473, 27
  %488 = or i32 %486, %487
  %489 = add i32 %485, 1859775393
  %490 = add i32 %489, %438
  %491 = add i32 %490, %478
  %492 = add i32 %491, %488
  %493 = shl i32 %454, 30
  %494 = lshr i32 %454, 2
  %495 = or i32 %493, %494
  %496 = xor i32 %495, %476
  %497 = xor i32 %496, %473
  %498 = xor i32 %43, %37
  %499 = tail call i32 @llvm.bswap.i32(i32 %498)
  %500 = xor i32 %352, %499
  %501 = xor i32 %500, %447
  %502 = shl i32 %501, 1
  %503 = lshr i32 %501, 31
  %504 = or i32 %502, %503
  %505 = shl i32 %492, 5
  %506 = lshr i32 %492, 27
  %507 = or i32 %505, %506
  %508 = add i32 %504, 1859775393
  %509 = add i32 %508, %457
  %510 = add i32 %509, %497
  %511 = add i32 %510, %507
  %512 = shl i32 %473, 30
  %513 = lshr i32 %473, 2
  %514 = or i32 %512, %513
  %515 = xor i32 %514, %495
  %516 = xor i32 %515, %492
  %517 = xor i32 %46, %40
  %518 = tail call i32 @llvm.bswap.i32(i32 %517)
  %519 = xor i32 %371, %518
  %520 = xor i32 %519, %466
  %521 = shl i32 %520, 1
  %522 = lshr i32 %520, 31
  %523 = or i32 %521, %522
  %524 = shl i32 %511, 5
  %525 = lshr i32 %511, 27
  %526 = or i32 %524, %525
  %527 = add i32 %523, 1859775393
  %528 = add i32 %527, %476
  %529 = add i32 %528, %516
  %530 = add i32 %529, %526
  %531 = shl i32 %492, 30
  %532 = lshr i32 %492, 2
  %533 = or i32 %531, %532
  %534 = xor i32 %533, %514
  %535 = xor i32 %534, %511
  %536 = xor i32 %49, %43
  %537 = tail call i32 @llvm.bswap.i32(i32 %536)
  %538 = xor i32 %390, %537
  %539 = xor i32 %538, %485
  %540 = shl i32 %539, 1
  %541 = lshr i32 %539, 31
  %542 = or i32 %540, %541
  %543 = shl i32 %530, 5
  %544 = lshr i32 %530, 27
  %545 = or i32 %543, %544
  %546 = add i32 %542, 1859775393
  %547 = add i32 %546, %495
  %548 = add i32 %547, %535
  %549 = add i32 %548, %545
  %550 = shl i32 %511, 30
  %551 = lshr i32 %511, 2
  %552 = or i32 %550, %551
  %553 = xor i32 %552, %533
  %554 = xor i32 %553, %530
  %555 = xor i32 %292, %258
  %556 = xor i32 %555, %409
  %557 = xor i32 %556, %504
  %558 = shl i32 %557, 1
  %559 = lshr i32 %557, 31
  %560 = or i32 %558, %559
  %561 = shl i32 %549, 5
  %562 = lshr i32 %549, 27
  %563 = or i32 %561, %562
  %564 = add i32 %560, 1859775393
  %565 = add i32 %564, %514
  %566 = add i32 %565, %554
  %567 = add i32 %566, %563
  %568 = shl i32 %530, 30
  %569 = lshr i32 %530, 2
  %570 = or i32 %568, %569
  %571 = xor i32 %570, %552
  %572 = xor i32 %571, %549
  %573 = xor i32 %312, %272
  %574 = xor i32 %573, %428
  %575 = xor i32 %574, %523
  %576 = shl i32 %575, 1
  %577 = lshr i32 %575, 31
  %578 = or i32 %576, %577
  %579 = shl i32 %567, 5
  %580 = lshr i32 %567, 27
  %581 = or i32 %579, %580
  %582 = add i32 %578, 1859775393
  %583 = add i32 %582, %533
  %584 = add i32 %583, %572
  %585 = add i32 %584, %581
  %586 = shl i32 %549, 30
  %587 = lshr i32 %549, 2
  %588 = or i32 %586, %587
  %589 = xor i32 %588, %570
  %590 = xor i32 %589, %567
  %591 = xor i32 %332, %292
  %592 = xor i32 %591, %447
  %593 = xor i32 %592, %542
  %594 = shl i32 %593, 1
  %595 = lshr i32 %593, 31
  %596 = or i32 %594, %595
  %597 = shl i32 %585, 5
  %598 = lshr i32 %585, 27
  %599 = or i32 %597, %598
  %600 = add i32 %596, 1859775393
  %601 = add i32 %600, %552
  %602 = add i32 %601, %590
  %603 = add i32 %602, %599
  %604 = shl i32 %567, 30
  %605 = lshr i32 %567, 2
  %606 = or i32 %604, %605
  %607 = xor i32 %606, %588
  %608 = xor i32 %607, %585
  %609 = xor i32 %352, %312
  %610 = xor i32 %609, %466
  %611 = xor i32 %610, %560
  %612 = shl i32 %611, 1
  %613 = lshr i32 %611, 31
  %614 = or i32 %612, %613
  %615 = shl i32 %603, 5
  %616 = lshr i32 %603, 27
  %617 = or i32 %615, %616
  %618 = add i32 %614, 1859775393
  %619 = add i32 %618, %570
  %620 = add i32 %619, %608
  %621 = add i32 %620, %617
  %622 = shl i32 %585, 30
  %623 = lshr i32 %585, 2
  %624 = or i32 %622, %623
  %625 = xor i32 %624, %606
  %626 = xor i32 %625, %603
  %627 = xor i32 %371, %332
  %628 = xor i32 %627, %485
  %629 = xor i32 %628, %578
  %630 = shl i32 %629, 1
  %631 = lshr i32 %629, 31
  %632 = or i32 %630, %631
  %633 = shl i32 %621, 5
  %634 = lshr i32 %621, 27
  %635 = or i32 %633, %634
  %636 = add i32 %632, 1859775393
  %637 = add i32 %636, %588
  %638 = add i32 %637, %626
  %639 = add i32 %638, %635
  %640 = shl i32 %603, 30
  %641 = lshr i32 %603, 2
  %642 = or i32 %640, %641
  %643 = xor i32 %642, %624
  %644 = xor i32 %643, %621
  %645 = xor i32 %390, %352
  %646 = xor i32 %645, %504
  %647 = xor i32 %646, %596
  %648 = shl i32 %647, 1
  %649 = lshr i32 %647, 31
  %650 = or i32 %648, %649
  %651 = shl i32 %639, 5
  %652 = lshr i32 %639, 27
  %653 = or i32 %651, %652
  %654 = add i32 %650, 1859775393
  %655 = add i32 %654, %606
  %656 = add i32 %655, %644
  %657 = add i32 %656, %653
  %658 = shl i32 %621, 30
  %659 = lshr i32 %621, 2
  %660 = or i32 %658, %659
  %661 = xor i32 %660, %642
  %662 = xor i32 %661, %639
  %663 = xor i32 %409, %371
  %664 = xor i32 %663, %523
  %665 = xor i32 %664, %614
  %666 = shl i32 %665, 1
  %667 = lshr i32 %665, 31
  %668 = or i32 %666, %667
  %669 = shl i32 %657, 5
  %670 = lshr i32 %657, 27
  %671 = or i32 %669, %670
  %672 = add i32 %668, 1859775393
  %673 = add i32 %672, %624
  %674 = add i32 %673, %662
  %675 = add i32 %674, %671
  %676 = shl i32 %639, 30
  %677 = lshr i32 %639, 2
  %678 = or i32 %676, %677
  %679 = xor i32 %678, %660
  %680 = xor i32 %679, %657
  %681 = xor i32 %428, %390
  %682 = xor i32 %681, %542
  %683 = xor i32 %682, %632
  %684 = shl i32 %683, 1
  %685 = lshr i32 %683, 31
  %686 = or i32 %684, %685
  %687 = shl i32 %675, 5
  %688 = lshr i32 %675, 27
  %689 = or i32 %687, %688
  %690 = add i32 %686, 1859775393
  %691 = add i32 %690, %642
  %692 = add i32 %691, %680
  %693 = add i32 %692, %689
  %694 = shl i32 %657, 30
  %695 = lshr i32 %657, 2
  %696 = or i32 %694, %695
  %697 = xor i32 %696, %678
  %698 = xor i32 %697, %675
  %699 = xor i32 %447, %409
  %700 = xor i32 %699, %560
  %701 = xor i32 %700, %650
  %702 = shl i32 %701, 1
  %703 = lshr i32 %701, 31
  %704 = or i32 %702, %703
  %705 = shl i32 %693, 5
  %706 = lshr i32 %693, 27
  %707 = or i32 %705, %706
  %708 = add i32 %704, 1859775393
  %709 = add i32 %708, %660
  %710 = add i32 %709, %698
  %711 = add i32 %710, %707
  %712 = shl i32 %675, 30
  %713 = lshr i32 %675, 2
  %714 = or i32 %712, %713
  %715 = xor i32 %714, %696
  %716 = xor i32 %715, %693
  %717 = xor i32 %466, %428
  %718 = xor i32 %717, %578
  %719 = xor i32 %718, %668
  %720 = shl i32 %719, 1
  %721 = lshr i32 %719, 31
  %722 = or i32 %720, %721
  %723 = shl i32 %711, 5
  %724 = lshr i32 %711, 27
  %725 = or i32 %723, %724
  %726 = add i32 %722, 1859775393
  %727 = add i32 %726, %678
  %728 = add i32 %727, %716
  %729 = add i32 %728, %725
  %730 = shl i32 %693, 30
  %731 = lshr i32 %693, 2
  %732 = or i32 %730, %731
  %733 = or i32 %711, %732
  %734 = and i32 %733, %714
  %735 = and i32 %711, %732
  %736 = or i32 %734, %735
  %737 = xor i32 %485, %447
  %738 = xor i32 %737, %596
  %739 = xor i32 %738, %686
  %740 = shl i32 %739, 1
  %741 = lshr i32 %739, 31
  %742 = or i32 %740, %741
  %743 = shl i32 %729, 5
  %744 = lshr i32 %729, 27
  %745 = or i32 %743, %744
  %746 = add i32 %742, -1894007588
  %747 = add i32 %746, %696
  %748 = add i32 %747, %736
  %749 = add i32 %748, %745
  %750 = shl i32 %711, 30
  %751 = lshr i32 %711, 2
  %752 = or i32 %750, %751
  %753 = or i32 %729, %752
  %754 = and i32 %753, %732
  %755 = and i32 %729, %752
  %756 = or i32 %754, %755
  %757 = xor i32 %504, %466
  %758 = xor i32 %757, %614
  %759 = xor i32 %758, %704
  %760 = shl i32 %759, 1
  %761 = lshr i32 %759, 31
  %762 = or i32 %760, %761
  %763 = shl i32 %749, 5
  %764 = lshr i32 %749, 27
  %765 = or i32 %763, %764
  %766 = add i32 %762, -1894007588
  %767 = add i32 %766, %714
  %768 = add i32 %767, %756
  %769 = add i32 %768, %765
  %770 = shl i32 %729, 30
  %771 = lshr i32 %729, 2
  %772 = or i32 %770, %771
  %773 = or i32 %749, %772
  %774 = and i32 %773, %752
  %775 = and i32 %749, %772
  %776 = or i32 %774, %775
  %777 = xor i32 %523, %485
  %778 = xor i32 %777, %632
  %779 = xor i32 %778, %722
  %780 = shl i32 %779, 1
  %781 = lshr i32 %779, 31
  %782 = or i32 %780, %781
  %783 = shl i32 %769, 5
  %784 = lshr i32 %769, 27
  %785 = or i32 %783, %784
  %786 = add i32 %782, -1894007588
  %787 = add i32 %786, %732
  %788 = add i32 %787, %776
  %789 = add i32 %788, %785
  %790 = shl i32 %749, 30
  %791 = lshr i32 %749, 2
  %792 = or i32 %790, %791
  %793 = or i32 %769, %792
  %794 = and i32 %793, %772
  %795 = and i32 %769, %792
  %796 = or i32 %794, %795
  %797 = xor i32 %542, %504
  %798 = xor i32 %797, %650
  %799 = xor i32 %798, %742
  %800 = shl i32 %799, 1
  %801 = lshr i32 %799, 31
  %802 = or i32 %800, %801
  %803 = shl i32 %789, 5
  %804 = lshr i32 %789, 27
  %805 = or i32 %803, %804
  %806 = add i32 %802, -1894007588
  %807 = add i32 %806, %752
  %808 = add i32 %807, %796
  %809 = add i32 %808, %805
  %810 = shl i32 %769, 30
  %811 = lshr i32 %769, 2
  %812 = or i32 %810, %811
  %813 = or i32 %789, %812
  %814 = and i32 %813, %792
  %815 = and i32 %789, %812
  %816 = or i32 %814, %815
  %817 = xor i32 %560, %523
  %818 = xor i32 %817, %668
  %819 = xor i32 %818, %762
  %820 = shl i32 %819, 1
  %821 = lshr i32 %819, 31
  %822 = or i32 %820, %821
  %823 = shl i32 %809, 5
  %824 = lshr i32 %809, 27
  %825 = or i32 %823, %824
  %826 = add i32 %822, -1894007588
  %827 = add i32 %826, %772
  %828 = add i32 %827, %816
  %829 = add i32 %828, %825
  %830 = shl i32 %789, 30
  %831 = lshr i32 %789, 2
  %832 = or i32 %830, %831
  %833 = or i32 %809, %832
  %834 = and i32 %833, %812
  %835 = and i32 %809, %832
  %836 = or i32 %834, %835
  %837 = xor i32 %578, %542
  %838 = xor i32 %837, %686
  %839 = xor i32 %838, %782
  %840 = shl i32 %839, 1
  %841 = lshr i32 %839, 31
  %842 = or i32 %840, %841
  %843 = shl i32 %829, 5
  %844 = lshr i32 %829, 27
  %845 = or i32 %843, %844
  %846 = add i32 %842, -1894007588
  %847 = add i32 %846, %792
  %848 = add i32 %847, %836
  %849 = add i32 %848, %845
  %850 = shl i32 %809, 30
  %851 = lshr i32 %809, 2
  %852 = or i32 %850, %851
  %853 = or i32 %829, %852
  %854 = and i32 %853, %832
  %855 = and i32 %829, %852
  %856 = or i32 %854, %855
  %857 = xor i32 %596, %560
  %858 = xor i32 %857, %704
  %859 = xor i32 %858, %802
  %860 = shl i32 %859, 1
  %861 = lshr i32 %859, 31
  %862 = or i32 %860, %861
  %863 = shl i32 %849, 5
  %864 = lshr i32 %849, 27
  %865 = or i32 %863, %864
  %866 = add i32 %862, -1894007588
  %867 = add i32 %866, %812
  %868 = add i32 %867, %856
  %869 = add i32 %868, %865
  %870 = shl i32 %829, 30
  %871 = lshr i32 %829, 2
  %872 = or i32 %870, %871
  %873 = or i32 %849, %872
  %874 = and i32 %873, %852
  %875 = and i32 %849, %872
  %876 = or i32 %874, %875
  %877 = xor i32 %614, %578
  %878 = xor i32 %877, %722
  %879 = xor i32 %878, %822
  %880 = shl i32 %879, 1
  %881 = lshr i32 %879, 31
  %882 = or i32 %880, %881
  %883 = shl i32 %869, 5
  %884 = lshr i32 %869, 27
  %885 = or i32 %883, %884
  %886 = add i32 %882, -1894007588
  %887 = add i32 %886, %832
  %888 = add i32 %887, %876
  %889 = add i32 %888, %885
  %890 = shl i32 %849, 30
  %891 = lshr i32 %849, 2
  %892 = or i32 %890, %891
  %893 = or i32 %869, %892
  %894 = and i32 %893, %872
  %895 = and i32 %869, %892
  %896 = or i32 %894, %895
  %897 = xor i32 %632, %596
  %898 = xor i32 %897, %742
  %899 = xor i32 %898, %842
  %900 = shl i32 %899, 1
  %901 = lshr i32 %899, 31
  %902 = or i32 %900, %901
  %903 = shl i32 %889, 5
  %904 = lshr i32 %889, 27
  %905 = or i32 %903, %904
  %906 = add i32 %902, -1894007588
  %907 = add i32 %906, %852
  %908 = add i32 %907, %896
  %909 = add i32 %908, %905
  %910 = shl i32 %869, 30
  %911 = lshr i32 %869, 2
  %912 = or i32 %910, %911
  %913 = or i32 %889, %912
  %914 = and i32 %913, %892
  %915 = and i32 %889, %912
  %916 = or i32 %914, %915
  %917 = xor i32 %650, %614
  %918 = xor i32 %917, %762
  %919 = xor i32 %918, %862
  %920 = shl i32 %919, 1
  %921 = lshr i32 %919, 31
  %922 = or i32 %920, %921
  %923 = shl i32 %909, 5
  %924 = lshr i32 %909, 27
  %925 = or i32 %923, %924
  %926 = add i32 %922, -1894007588
  %927 = add i32 %926, %872
  %928 = add i32 %927, %916
  %929 = add i32 %928, %925
  %930 = shl i32 %889, 30
  %931 = lshr i32 %889, 2
  %932 = or i32 %930, %931
  %933 = or i32 %909, %932
  %934 = and i32 %933, %912
  %935 = and i32 %909, %932
  %936 = or i32 %934, %935
  %937 = xor i32 %668, %632
  %938 = xor i32 %937, %782
  %939 = xor i32 %938, %882
  %940 = shl i32 %939, 1
  %941 = lshr i32 %939, 31
  %942 = or i32 %940, %941
  %943 = shl i32 %929, 5
  %944 = lshr i32 %929, 27
  %945 = or i32 %943, %944
  %946 = add i32 %942, -1894007588
  %947 = add i32 %946, %892
  %948 = add i32 %947, %936
  %949 = add i32 %948, %945
  %950 = shl i32 %909, 30
  %951 = lshr i32 %909, 2
  %952 = or i32 %950, %951
  %953 = or i32 %929, %952
  %954 = and i32 %953, %932
  %955 = and i32 %929, %952
  %956 = or i32 %954, %955
  %957 = xor i32 %686, %650
  %958 = xor i32 %957, %802
  %959 = xor i32 %958, %902
  %960 = shl i32 %959, 1
  %961 = lshr i32 %959, 31
  %962 = or i32 %960, %961
  %963 = shl i32 %949, 5
  %964 = lshr i32 %949, 27
  %965 = or i32 %963, %964
  %966 = add i32 %962, -1894007588
  %967 = add i32 %966, %912
  %968 = add i32 %967, %956
  %969 = add i32 %968, %965
  %970 = shl i32 %929, 30
  %971 = lshr i32 %929, 2
  %972 = or i32 %970, %971
  %973 = or i32 %949, %972
  %974 = and i32 %973, %952
  %975 = and i32 %949, %972
  %976 = or i32 %974, %975
  %977 = xor i32 %704, %668
  %978 = xor i32 %977, %822
  %979 = xor i32 %978, %922
  %980 = shl i32 %979, 1
  %981 = lshr i32 %979, 31
  %982 = or i32 %980, %981
  %983 = shl i32 %969, 5
  %984 = lshr i32 %969, 27
  %985 = or i32 %983, %984
  %986 = add i32 %982, -1894007588
  %987 = add i32 %986, %932
  %988 = add i32 %987, %976
  %989 = add i32 %988, %985
  %990 = shl i32 %949, 30
  %991 = lshr i32 %949, 2
  %992 = or i32 %990, %991
  %993 = or i32 %969, %992
  %994 = and i32 %993, %972
  %995 = and i32 %969, %992
  %996 = or i32 %994, %995
  %997 = xor i32 %722, %686
  %998 = xor i32 %997, %842
  %999 = xor i32 %998, %942
  %1000 = shl i32 %999, 1
  %1001 = lshr i32 %999, 31
  %1002 = or i32 %1000, %1001
  %1003 = shl i32 %989, 5
  %1004 = lshr i32 %989, 27
  %1005 = or i32 %1003, %1004
  %1006 = add i32 %1002, -1894007588
  %1007 = add i32 %1006, %952
  %1008 = add i32 %1007, %996
  %1009 = add i32 %1008, %1005
  %1010 = shl i32 %969, 30
  %1011 = lshr i32 %969, 2
  %1012 = or i32 %1010, %1011
  %1013 = or i32 %989, %1012
  %1014 = and i32 %1013, %992
  %1015 = and i32 %989, %1012
  %1016 = or i32 %1014, %1015
  %1017 = xor i32 %742, %704
  %1018 = xor i32 %1017, %862
  %1019 = xor i32 %1018, %962
  %1020 = shl i32 %1019, 1
  %1021 = lshr i32 %1019, 31
  %1022 = or i32 %1020, %1021
  %1023 = shl i32 %1009, 5
  %1024 = lshr i32 %1009, 27
  %1025 = or i32 %1023, %1024
  %1026 = add i32 %1022, -1894007588
  %1027 = add i32 %1026, %972
  %1028 = add i32 %1027, %1016
  %1029 = add i32 %1028, %1025
  %1030 = shl i32 %989, 30
  %1031 = lshr i32 %989, 2
  %1032 = or i32 %1030, %1031
  %1033 = or i32 %1009, %1032
  %1034 = and i32 %1033, %1012
  %1035 = and i32 %1009, %1032
  %1036 = or i32 %1034, %1035
  %1037 = xor i32 %762, %722
  %1038 = xor i32 %1037, %882
  %1039 = xor i32 %1038, %982
  %1040 = shl i32 %1039, 1
  %1041 = lshr i32 %1039, 31
  %1042 = or i32 %1040, %1041
  %1043 = shl i32 %1029, 5
  %1044 = lshr i32 %1029, 27
  %1045 = or i32 %1043, %1044
  %1046 = add i32 %1042, -1894007588
  %1047 = add i32 %1046, %992
  %1048 = add i32 %1047, %1036
  %1049 = add i32 %1048, %1045
  %1050 = shl i32 %1009, 30
  %1051 = lshr i32 %1009, 2
  %1052 = or i32 %1050, %1051
  %1053 = or i32 %1029, %1052
  %1054 = and i32 %1053, %1032
  %1055 = and i32 %1029, %1052
  %1056 = or i32 %1054, %1055
  %1057 = xor i32 %782, %742
  %1058 = xor i32 %1057, %902
  %1059 = xor i32 %1058, %1002
  %1060 = shl i32 %1059, 1
  %1061 = lshr i32 %1059, 31
  %1062 = or i32 %1060, %1061
  %1063 = shl i32 %1049, 5
  %1064 = lshr i32 %1049, 27
  %1065 = or i32 %1063, %1064
  %1066 = add i32 %1062, -1894007588
  %1067 = add i32 %1066, %1012
  %1068 = add i32 %1067, %1056
  %1069 = add i32 %1068, %1065
  %1070 = shl i32 %1029, 30
  %1071 = lshr i32 %1029, 2
  %1072 = or i32 %1070, %1071
  %1073 = or i32 %1049, %1072
  %1074 = and i32 %1073, %1052
  %1075 = and i32 %1049, %1072
  %1076 = or i32 %1074, %1075
  %1077 = xor i32 %802, %762
  %1078 = xor i32 %1077, %922
  %1079 = xor i32 %1078, %1022
  %1080 = shl i32 %1079, 1
  %1081 = lshr i32 %1079, 31
  %1082 = or i32 %1080, %1081
  %1083 = shl i32 %1069, 5
  %1084 = lshr i32 %1069, 27
  %1085 = or i32 %1083, %1084
  %1086 = add i32 %1082, -1894007588
  %1087 = add i32 %1086, %1032
  %1088 = add i32 %1087, %1076
  %1089 = add i32 %1088, %1085
  %1090 = shl i32 %1049, 30
  %1091 = lshr i32 %1049, 2
  %1092 = or i32 %1090, %1091
  %1093 = or i32 %1069, %1092
  %1094 = and i32 %1093, %1072
  %1095 = and i32 %1069, %1092
  %1096 = or i32 %1094, %1095
  %1097 = xor i32 %822, %782
  %1098 = xor i32 %1097, %942
  %1099 = xor i32 %1098, %1042
  %1100 = shl i32 %1099, 1
  %1101 = lshr i32 %1099, 31
  %1102 = or i32 %1100, %1101
  %1103 = shl i32 %1089, 5
  %1104 = lshr i32 %1089, 27
  %1105 = or i32 %1103, %1104
  %1106 = add i32 %1102, -1894007588
  %1107 = add i32 %1106, %1052
  %1108 = add i32 %1107, %1096
  %1109 = add i32 %1108, %1105
  %1110 = shl i32 %1069, 30
  %1111 = lshr i32 %1069, 2
  %1112 = or i32 %1110, %1111
  %1113 = or i32 %1089, %1112
  %1114 = and i32 %1113, %1092
  %1115 = and i32 %1089, %1112
  %1116 = or i32 %1114, %1115
  %1117 = xor i32 %842, %802
  %1118 = xor i32 %1117, %962
  %1119 = xor i32 %1118, %1062
  %1120 = shl i32 %1119, 1
  %1121 = lshr i32 %1119, 31
  %1122 = or i32 %1120, %1121
  %1123 = shl i32 %1109, 5
  %1124 = lshr i32 %1109, 27
  %1125 = or i32 %1123, %1124
  %1126 = add i32 %1122, -1894007588
  %1127 = add i32 %1126, %1072
  %1128 = add i32 %1127, %1116
  %1129 = add i32 %1128, %1125
  %1130 = shl i32 %1089, 30
  %1131 = lshr i32 %1089, 2
  %1132 = or i32 %1130, %1131
  %1133 = xor i32 %1132, %1112
  %1134 = xor i32 %1133, %1109
  %1135 = xor i32 %862, %822
  %1136 = xor i32 %1135, %982
  %1137 = xor i32 %1136, %1082
  %1138 = shl i32 %1137, 1
  %1139 = lshr i32 %1137, 31
  %1140 = or i32 %1138, %1139
  %1141 = shl i32 %1129, 5
  %1142 = lshr i32 %1129, 27
  %1143 = or i32 %1141, %1142
  %1144 = add i32 %1140, -899497514
  %1145 = add i32 %1144, %1092
  %1146 = add i32 %1145, %1134
  %1147 = add i32 %1146, %1143
  %1148 = shl i32 %1109, 30
  %1149 = lshr i32 %1109, 2
  %1150 = or i32 %1148, %1149
  %1151 = xor i32 %1150, %1132
  %1152 = xor i32 %1151, %1129
  %1153 = xor i32 %882, %842
  %1154 = xor i32 %1153, %1002
  %1155 = xor i32 %1154, %1102
  %1156 = shl i32 %1155, 1
  %1157 = lshr i32 %1155, 31
  %1158 = or i32 %1156, %1157
  %1159 = shl i32 %1147, 5
  %1160 = lshr i32 %1147, 27
  %1161 = or i32 %1159, %1160
  %1162 = add i32 %1158, -899497514
  %1163 = add i32 %1162, %1112
  %1164 = add i32 %1163, %1152
  %1165 = add i32 %1164, %1161
  %1166 = shl i32 %1129, 30
  %1167 = lshr i32 %1129, 2
  %1168 = or i32 %1166, %1167
  %1169 = xor i32 %1168, %1150
  %1170 = xor i32 %1169, %1147
  %1171 = xor i32 %902, %862
  %1172 = xor i32 %1171, %1022
  %1173 = xor i32 %1172, %1122
  %1174 = shl i32 %1173, 1
  %1175 = lshr i32 %1173, 31
  %1176 = or i32 %1174, %1175
  %1177 = shl i32 %1165, 5
  %1178 = lshr i32 %1165, 27
  %1179 = or i32 %1177, %1178
  %1180 = add i32 %1176, -899497514
  %1181 = add i32 %1180, %1132
  %1182 = add i32 %1181, %1170
  %1183 = add i32 %1182, %1179
  %1184 = shl i32 %1147, 30
  %1185 = lshr i32 %1147, 2
  %1186 = or i32 %1184, %1185
  %1187 = xor i32 %1186, %1168
  %1188 = xor i32 %1187, %1165
  %1189 = xor i32 %922, %882
  %1190 = xor i32 %1189, %1042
  %1191 = xor i32 %1190, %1140
  %1192 = shl i32 %1191, 1
  %1193 = lshr i32 %1191, 31
  %1194 = or i32 %1192, %1193
  %1195 = shl i32 %1183, 5
  %1196 = lshr i32 %1183, 27
  %1197 = or i32 %1195, %1196
  %1198 = add i32 %1194, -899497514
  %1199 = add i32 %1198, %1150
  %1200 = add i32 %1199, %1188
  %1201 = add i32 %1200, %1197
  %1202 = shl i32 %1165, 30
  %1203 = lshr i32 %1165, 2
  %1204 = or i32 %1202, %1203
  %1205 = xor i32 %1204, %1186
  %1206 = xor i32 %1205, %1183
  %1207 = xor i32 %942, %902
  %1208 = xor i32 %1207, %1062
  %1209 = xor i32 %1208, %1158
  %1210 = shl i32 %1209, 1
  %1211 = lshr i32 %1209, 31
  %1212 = or i32 %1210, %1211
  %1213 = shl i32 %1201, 5
  %1214 = lshr i32 %1201, 27
  %1215 = or i32 %1213, %1214
  %1216 = add i32 %1212, -899497514
  %1217 = add i32 %1216, %1168
  %1218 = add i32 %1217, %1206
  %1219 = add i32 %1218, %1215
  %1220 = shl i32 %1183, 30
  %1221 = lshr i32 %1183, 2
  %1222 = or i32 %1220, %1221
  %1223 = xor i32 %1222, %1204
  %1224 = xor i32 %1223, %1201
  %1225 = xor i32 %962, %922
  %1226 = xor i32 %1225, %1082
  %1227 = xor i32 %1226, %1176
  %1228 = shl i32 %1227, 1
  %1229 = lshr i32 %1227, 31
  %1230 = or i32 %1228, %1229
  %1231 = shl i32 %1219, 5
  %1232 = lshr i32 %1219, 27
  %1233 = or i32 %1231, %1232
  %1234 = add i32 %1230, -899497514
  %1235 = add i32 %1234, %1186
  %1236 = add i32 %1235, %1224
  %1237 = add i32 %1236, %1233
  %1238 = shl i32 %1201, 30
  %1239 = lshr i32 %1201, 2
  %1240 = or i32 %1238, %1239
  %1241 = xor i32 %1240, %1222
  %1242 = xor i32 %1241, %1219
  %1243 = xor i32 %982, %942
  %1244 = xor i32 %1243, %1102
  %1245 = xor i32 %1244, %1194
  %1246 = shl i32 %1245, 1
  %1247 = lshr i32 %1245, 31
  %1248 = or i32 %1246, %1247
  %1249 = shl i32 %1237, 5
  %1250 = lshr i32 %1237, 27
  %1251 = or i32 %1249, %1250
  %1252 = add i32 %1248, -899497514
  %1253 = add i32 %1252, %1204
  %1254 = add i32 %1253, %1242
  %1255 = add i32 %1254, %1251
  %1256 = shl i32 %1219, 30
  %1257 = lshr i32 %1219, 2
  %1258 = or i32 %1256, %1257
  %1259 = xor i32 %1258, %1240
  %1260 = xor i32 %1259, %1237
  %1261 = xor i32 %1002, %962
  %1262 = xor i32 %1261, %1122
  %1263 = xor i32 %1262, %1212
  %1264 = shl i32 %1263, 1
  %1265 = lshr i32 %1263, 31
  %1266 = or i32 %1264, %1265
  %1267 = shl i32 %1255, 5
  %1268 = lshr i32 %1255, 27
  %1269 = or i32 %1267, %1268
  %1270 = add i32 %1266, -899497514
  %1271 = add i32 %1270, %1222
  %1272 = add i32 %1271, %1260
  %1273 = add i32 %1272, %1269
  %1274 = shl i32 %1237, 30
  %1275 = lshr i32 %1237, 2
  %1276 = or i32 %1274, %1275
  %1277 = xor i32 %1276, %1258
  %1278 = xor i32 %1277, %1255
  %1279 = xor i32 %1022, %982
  %1280 = xor i32 %1279, %1140
  %1281 = xor i32 %1280, %1230
  %1282 = shl i32 %1281, 1
  %1283 = lshr i32 %1281, 31
  %1284 = or i32 %1282, %1283
  %1285 = shl i32 %1273, 5
  %1286 = lshr i32 %1273, 27
  %1287 = or i32 %1285, %1286
  %1288 = add i32 %1284, -899497514
  %1289 = add i32 %1288, %1240
  %1290 = add i32 %1289, %1278
  %1291 = add i32 %1290, %1287
  %1292 = shl i32 %1255, 30
  %1293 = lshr i32 %1255, 2
  %1294 = or i32 %1292, %1293
  %1295 = xor i32 %1294, %1276
  %1296 = xor i32 %1295, %1273
  %1297 = xor i32 %1042, %1002
  %1298 = xor i32 %1297, %1158
  %1299 = xor i32 %1298, %1248
  %1300 = shl i32 %1299, 1
  %1301 = lshr i32 %1299, 31
  %1302 = or i32 %1300, %1301
  %1303 = shl i32 %1291, 5
  %1304 = lshr i32 %1291, 27
  %1305 = or i32 %1303, %1304
  %1306 = add i32 %1302, -899497514
  %1307 = add i32 %1306, %1258
  %1308 = add i32 %1307, %1296
  %1309 = add i32 %1308, %1305
  %1310 = shl i32 %1273, 30
  %1311 = lshr i32 %1273, 2
  %1312 = or i32 %1310, %1311
  %1313 = xor i32 %1312, %1294
  %1314 = xor i32 %1313, %1291
  %1315 = xor i32 %1062, %1022
  %1316 = xor i32 %1315, %1176
  %1317 = xor i32 %1316, %1266
  %1318 = shl i32 %1317, 1
  %1319 = lshr i32 %1317, 31
  %1320 = or i32 %1318, %1319
  %1321 = shl i32 %1309, 5
  %1322 = lshr i32 %1309, 27
  %1323 = or i32 %1321, %1322
  %1324 = add i32 %1320, -899497514
  %1325 = add i32 %1324, %1276
  %1326 = add i32 %1325, %1314
  %1327 = add i32 %1326, %1323
  %1328 = shl i32 %1291, 30
  %1329 = lshr i32 %1291, 2
  %1330 = or i32 %1328, %1329
  %1331 = xor i32 %1330, %1312
  %1332 = xor i32 %1331, %1309
  %1333 = xor i32 %1082, %1042
  %1334 = xor i32 %1333, %1194
  %1335 = xor i32 %1334, %1284
  %1336 = shl i32 %1335, 1
  %1337 = lshr i32 %1335, 31
  %1338 = or i32 %1336, %1337
  %1339 = shl i32 %1327, 5
  %1340 = lshr i32 %1327, 27
  %1341 = or i32 %1339, %1340
  %1342 = add i32 %1338, -899497514
  %1343 = add i32 %1342, %1294
  %1344 = add i32 %1343, %1332
  %1345 = add i32 %1344, %1341
  %1346 = shl i32 %1309, 30
  %1347 = lshr i32 %1309, 2
  %1348 = or i32 %1346, %1347
  %1349 = xor i32 %1348, %1330
  %1350 = xor i32 %1349, %1327
  %1351 = xor i32 %1102, %1062
  %1352 = xor i32 %1351, %1212
  %1353 = xor i32 %1352, %1302
  %1354 = shl i32 %1353, 1
  %1355 = lshr i32 %1353, 31
  %1356 = or i32 %1354, %1355
  %1357 = shl i32 %1345, 5
  %1358 = lshr i32 %1345, 27
  %1359 = or i32 %1357, %1358
  %1360 = add i32 %1356, -899497514
  %1361 = add i32 %1360, %1312
  %1362 = add i32 %1361, %1350
  %1363 = add i32 %1362, %1359
  %1364 = shl i32 %1327, 30
  %1365 = lshr i32 %1327, 2
  %1366 = or i32 %1364, %1365
  %1367 = xor i32 %1366, %1348
  %1368 = xor i32 %1367, %1345
  %1369 = xor i32 %1122, %1082
  %1370 = xor i32 %1369, %1230
  %1371 = xor i32 %1370, %1320
  %1372 = shl i32 %1371, 1
  %1373 = lshr i32 %1371, 31
  %1374 = or i32 %1372, %1373
  %1375 = shl i32 %1363, 5
  %1376 = lshr i32 %1363, 27
  %1377 = or i32 %1375, %1376
  %1378 = add i32 %1374, -899497514
  %1379 = add i32 %1378, %1330
  %1380 = add i32 %1379, %1368
  %1381 = add i32 %1380, %1377
  %1382 = shl i32 %1345, 30
  %1383 = lshr i32 %1345, 2
  %1384 = or i32 %1382, %1383
  %1385 = xor i32 %1384, %1366
  %1386 = xor i32 %1385, %1363
  %1387 = xor i32 %1140, %1102
  %1388 = xor i32 %1387, %1248
  %1389 = xor i32 %1388, %1338
  %1390 = shl i32 %1389, 1
  %1391 = lshr i32 %1389, 31
  %1392 = or i32 %1390, %1391
  %1393 = shl i32 %1381, 5
  %1394 = lshr i32 %1381, 27
  %1395 = or i32 %1393, %1394
  %1396 = add i32 %1392, -899497514
  %1397 = add i32 %1396, %1348
  %1398 = add i32 %1397, %1386
  %1399 = add i32 %1398, %1395
  %1400 = shl i32 %1363, 30
  %1401 = lshr i32 %1363, 2
  %1402 = or i32 %1400, %1401
  %1403 = xor i32 %1402, %1384
  %1404 = xor i32 %1403, %1381
  %1405 = xor i32 %1158, %1122
  %1406 = xor i32 %1405, %1266
  %1407 = xor i32 %1406, %1356
  %1408 = shl i32 %1407, 1
  %1409 = lshr i32 %1407, 31
  %1410 = or i32 %1408, %1409
  %1411 = shl i32 %1399, 5
  %1412 = lshr i32 %1399, 27
  %1413 = or i32 %1411, %1412
  %1414 = add i32 %1410, -899497514
  %1415 = add i32 %1414, %1366
  %1416 = add i32 %1415, %1404
  %1417 = add i32 %1416, %1413
  %1418 = shl i32 %1381, 30
  %1419 = lshr i32 %1381, 2
  %1420 = or i32 %1418, %1419
  %1421 = xor i32 %1420, %1402
  %1422 = xor i32 %1421, %1399
  %1423 = xor i32 %1176, %1140
  %1424 = xor i32 %1423, %1284
  %1425 = xor i32 %1424, %1374
  %1426 = shl i32 %1425, 1
  %1427 = lshr i32 %1425, 31
  %1428 = or i32 %1426, %1427
  %1429 = shl i32 %1417, 5
  %1430 = lshr i32 %1417, 27
  %1431 = or i32 %1429, %1430
  %1432 = add i32 %1428, -899497514
  %1433 = add i32 %1432, %1384
  %1434 = add i32 %1433, %1422
  %1435 = add i32 %1434, %1431
  %1436 = shl i32 %1399, 30
  %1437 = lshr i32 %1399, 2
  %1438 = or i32 %1436, %1437
  %1439 = xor i32 %1438, %1420
  %1440 = xor i32 %1439, %1417
  %1441 = xor i32 %1194, %1158
  %1442 = xor i32 %1441, %1302
  %1443 = xor i32 %1442, %1392
  %1444 = shl i32 %1443, 1
  %1445 = lshr i32 %1443, 31
  %1446 = or i32 %1444, %1445
  %1447 = shl i32 %1435, 5
  %1448 = lshr i32 %1435, 27
  %1449 = or i32 %1447, %1448
  %1450 = add i32 %1446, -899497514
  %1451 = add i32 %1450, %1402
  %1452 = add i32 %1451, %1440
  %1453 = add i32 %1452, %1449
  %1454 = shl i32 %1417, 30
  %1455 = lshr i32 %1417, 2
  %1456 = or i32 %1454, %1455
  %1457 = xor i32 %1456, %1438
  %1458 = xor i32 %1457, %1435
  %1459 = xor i32 %1212, %1176
  %1460 = xor i32 %1459, %1320
  %1461 = xor i32 %1460, %1410
  %1462 = shl i32 %1461, 1
  %1463 = lshr i32 %1461, 31
  %1464 = or i32 %1462, %1463
  %1465 = shl i32 %1453, 5
  %1466 = lshr i32 %1453, 27
  %1467 = or i32 %1465, %1466
  %1468 = add i32 %1464, -899497514
  %1469 = add i32 %1468, %1420
  %1470 = add i32 %1469, %1458
  %1471 = add i32 %1470, %1467
  %1472 = shl i32 %1435, 30
  %1473 = lshr i32 %1435, 2
  %1474 = or i32 %1472, %1473
  %1475 = xor i32 %1474, %1456
  %1476 = xor i32 %1475, %1453
  %1477 = xor i32 %1230, %1194
  %1478 = xor i32 %1477, %1338
  %1479 = xor i32 %1478, %1428
  %1480 = shl i32 %1479, 1
  %1481 = lshr i32 %1479, 31
  %1482 = or i32 %1480, %1481
  %1483 = shl i32 %1471, 5
  %1484 = lshr i32 %1471, 27
  %1485 = or i32 %1483, %1484
  %1486 = shl i32 %1453, 30
  %1487 = lshr i32 %1453, 2
  %1488 = or i32 %1486, %1487
  %1489 = add i32 %50, -899497514
  %1490 = add i32 %1489, %1482
  %1491 = add i32 %1490, %1438
  %1492 = add i32 %1491, %1476
  %1493 = add i32 %1492, %1485
  store i32 %1493, i32* %0, align 4, !tbaa !5
  %1494 = load i32, i32* %51, align 4, !tbaa !5
  %1495 = add i32 %1471, %1494
  store i32 %1495, i32* %51, align 4, !tbaa !5
  %1496 = load i32, i32* %53, align 4, !tbaa !5
  %1497 = add i32 %1488, %1496
  store i32 %1497, i32* %53, align 4, !tbaa !5
  %1498 = load i32, i32* %55, align 4, !tbaa !5
  %1499 = add i32 %1474, %1498
  store i32 %1499, i32* %55, align 4, !tbaa !5
  %1500 = load i32, i32* %57, align 4, !tbaa !5
  %1501 = add i32 %1456, %1500
  store i32 %1501, i32* %57, align 4, !tbaa !5
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #1

; Function Attrs: norecurse nounwind
define void @SHA1Init(%struct.SHA1_CTX* nocapture) local_unnamed_addr #2 {
  %2 = bitcast %struct.SHA1_CTX* %0 to <4 x i32>*
  store <4 x i32> <i32 1732584193, i32 -271733879, i32 -1732584194, i32 271733878>, <4 x i32>* %2, align 4, !tbaa !5
  %3 = getelementptr inbounds %struct.SHA1_CTX, %struct.SHA1_CTX* %0, i32 0, i32 0, i32 4
  store i32 -1009589776, i32* %3, align 4, !tbaa !5
  %4 = getelementptr inbounds %struct.SHA1_CTX, %struct.SHA1_CTX* %0, i32 0, i32 1, i32 1
  store i32 0, i32* %4, align 4, !tbaa !5
  %5 = getelementptr inbounds %struct.SHA1_CTX, %struct.SHA1_CTX* %0, i32 0, i32 1, i32 0
  store i32 0, i32* %5, align 4, !tbaa !5
  ret void
}

; Function Attrs: nounwind
define void @SHA1UpdateCGRA(%struct.SHA1_CTX* nocapture, i8* nocapture readonly, i32) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.SHA1_CTX, %struct.SHA1_CTX* %0, i32 0, i32 1, i32 0
  %5 = load i32, i32* %4, align 4, !tbaa !5
  %6 = shl i32 %2, 3
  %7 = add i32 %5, %6
  store i32 %7, i32* %4, align 4, !tbaa !5
  %8 = icmp ult i32 %7, %5
  %9 = getelementptr inbounds %struct.SHA1_CTX, %struct.SHA1_CTX* %0, i32 0, i32 1, i32 1
  %10 = load i32, i32* %9, align 4, !tbaa !5
  br i1 %8, label %11, label %13

; <label>:11:                                     ; preds = %3
  %12 = add i32 %10, 1
  store i32 %12, i32* %9, align 4, !tbaa !5
  br label %13

; <label>:13:                                     ; preds = %11, %3
  %14 = phi i32 [ %12, %11 ], [ %10, %3 ]
  %15 = lshr i32 %2, 29
  %16 = add i32 %14, %15
  store i32 %16, i32* %9, align 4, !tbaa !5
  %17 = lshr i32 %5, 3
  %18 = and i32 %17, 63
  %19 = add i32 %18, %2
  %20 = icmp ugt i32 %19, 63
  br i1 %20, label %21, label %.loopexit

; <label>:21:                                     ; preds = %13
  %22 = getelementptr inbounds %struct.SHA1_CTX, %struct.SHA1_CTX* %0, i32 0, i32 2, i32 %18
  %23 = sub nsw i32 64, %18
  tail call void @llvm.memcpy.p0i8.p0i8.i32(i8* %22, i8* %1, i32 %23, i32 1, i1 false)
  %24 = getelementptr inbounds %struct.SHA1_CTX, %struct.SHA1_CTX* %0, i32 0, i32 0, i32 0
  %25 = getelementptr inbounds %struct.SHA1_CTX, %struct.SHA1_CTX* %0, i32 0, i32 2, i32 0
  tail call void @SHA1Transform(i32* %24, i8* %25)
  %26 = add nuw nsw i32 %23, 63
  %27 = icmp ult i32 %26, %2
  br i1 %27, label %28, label %.loopexit

; <label>:28:                                     ; preds = %21
  %29 = getelementptr inbounds %struct.SHA1_CTX, %struct.SHA1_CTX* %0, i32 0, i32 0, i32 1
  %30 = getelementptr inbounds %struct.SHA1_CTX, %struct.SHA1_CTX* %0, i32 0, i32 0, i32 2
  %31 = getelementptr inbounds %struct.SHA1_CTX, %struct.SHA1_CTX* %0, i32 0, i32 0, i32 3
  %32 = getelementptr inbounds %struct.SHA1_CTX, %struct.SHA1_CTX* %0, i32 0, i32 0, i32 4
  %33 = load i32, i32* %24, align 4, !tbaa !5
  %34 = load i32, i32* %29, align 4, !tbaa !5
  %35 = load i32, i32* %30, align 4, !tbaa !5
  %36 = load i32, i32* %31, align 4, !tbaa !5
  %37 = load i32, i32* %32, align 4, !tbaa !5
  br label %38

; <label>:38:                                     ; preds = %38, %28
  %39 = phi i32 [ %37, %28 ], [ %1535, %38 ]
  %40 = phi i32 [ %36, %28 ], [ %1533, %38 ]
  %41 = phi i32 [ %35, %28 ], [ %1531, %38 ]
  %42 = phi i32 [ %34, %28 ], [ %1529, %38 ]
  %43 = phi i32 [ %33, %28 ], [ %1527, %38 ]
  %44 = phi i32 [ %23, %28 ], [ %1536, %38 ]
  %45 = getelementptr inbounds i8, i8* %1, i32 %44
  %46 = bitcast i8* %45 to i32*
  %47 = load i32, i32* %46, align 1
  %48 = getelementptr inbounds i8, i8* %45, i32 4
  %49 = bitcast i8* %48 to i32*
  %50 = load i32, i32* %49, align 1
  %51 = getelementptr inbounds i8, i8* %45, i32 8
  %52 = bitcast i8* %51 to i32*
  %53 = load i32, i32* %52, align 1
  %54 = getelementptr inbounds i8, i8* %45, i32 12
  %55 = bitcast i8* %54 to i32*
  %56 = load i32, i32* %55, align 1
  %57 = getelementptr inbounds i8, i8* %45, i32 16
  %58 = bitcast i8* %57 to i32*
  %59 = load i32, i32* %58, align 1
  %60 = getelementptr inbounds i8, i8* %45, i32 20
  %61 = bitcast i8* %60 to i32*
  %62 = load i32, i32* %61, align 1
  %63 = getelementptr inbounds i8, i8* %45, i32 24
  %64 = bitcast i8* %63 to i32*
  %65 = load i32, i32* %64, align 1
  %66 = getelementptr inbounds i8, i8* %45, i32 28
  %67 = bitcast i8* %66 to i32*
  %68 = load i32, i32* %67, align 1
  %69 = getelementptr inbounds i8, i8* %45, i32 32
  %70 = bitcast i8* %69 to i32*
  %71 = load i32, i32* %70, align 1
  %72 = getelementptr inbounds i8, i8* %45, i32 36
  %73 = bitcast i8* %72 to i32*
  %74 = load i32, i32* %73, align 1
  %75 = getelementptr inbounds i8, i8* %45, i32 40
  %76 = bitcast i8* %75 to i32*
  %77 = load i32, i32* %76, align 1
  %78 = getelementptr inbounds i8, i8* %45, i32 44
  %79 = bitcast i8* %78 to i32*
  %80 = load i32, i32* %79, align 1
  %81 = getelementptr inbounds i8, i8* %45, i32 48
  %82 = bitcast i8* %81 to i32*
  %83 = load i32, i32* %82, align 1
  %84 = getelementptr inbounds i8, i8* %45, i32 52
  %85 = bitcast i8* %84 to i32*
  %86 = load i32, i32* %85, align 1
  %87 = getelementptr inbounds i8, i8* %45, i32 56
  %88 = bitcast i8* %87 to i32*
  %89 = load i32, i32* %88, align 1
  %90 = getelementptr inbounds i8, i8* %45, i32 60
  %91 = bitcast i8* %90 to i32*
  %92 = load i32, i32* %91, align 1
  %93 = xor i32 %41, %40
  %94 = and i32 %93, %42
  %95 = xor i32 %94, %40
  %96 = tail call i32 @llvm.bswap.i32(i32 %47)
  %97 = shl i32 %43, 5
  %98 = lshr i32 %43, 27
  %99 = or i32 %97, %98
  %100 = add i32 %39, 1518500249
  %101 = add i32 %100, %95
  %102 = add i32 %101, %99
  %103 = add i32 %102, %96
  %104 = shl i32 %42, 30
  %105 = lshr i32 %42, 2
  %106 = or i32 %104, %105
  %107 = xor i32 %106, %41
  %108 = and i32 %107, %43
  %109 = xor i32 %108, %41
  %110 = tail call i32 @llvm.bswap.i32(i32 %50)
  %111 = shl i32 %103, 5
  %112 = lshr i32 %103, 27
  %113 = or i32 %111, %112
  %114 = add i32 %40, 1518500249
  %115 = add i32 %114, %110
  %116 = add i32 %115, %109
  %117 = add i32 %116, %113
  %118 = shl i32 %43, 30
  %119 = lshr i32 %43, 2
  %120 = or i32 %118, %119
  %121 = xor i32 %120, %106
  %122 = and i32 %103, %121
  %123 = xor i32 %122, %106
  %124 = tail call i32 @llvm.bswap.i32(i32 %53)
  %125 = shl i32 %117, 5
  %126 = lshr i32 %117, 27
  %127 = or i32 %125, %126
  %128 = add i32 %41, 1518500249
  %129 = add i32 %128, %124
  %130 = add i32 %129, %123
  %131 = add i32 %130, %127
  %132 = shl i32 %103, 30
  %133 = lshr i32 %103, 2
  %134 = or i32 %132, %133
  %135 = xor i32 %134, %120
  %136 = and i32 %117, %135
  %137 = xor i32 %136, %120
  %138 = tail call i32 @llvm.bswap.i32(i32 %56)
  %139 = shl i32 %131, 5
  %140 = lshr i32 %131, 27
  %141 = or i32 %139, %140
  %142 = add i32 %106, 1518500249
  %143 = add i32 %142, %138
  %144 = add i32 %143, %137
  %145 = add i32 %144, %141
  %146 = shl i32 %117, 30
  %147 = lshr i32 %117, 2
  %148 = or i32 %146, %147
  %149 = xor i32 %148, %134
  %150 = and i32 %131, %149
  %151 = xor i32 %150, %134
  %152 = tail call i32 @llvm.bswap.i32(i32 %59)
  %153 = shl i32 %145, 5
  %154 = lshr i32 %145, 27
  %155 = or i32 %153, %154
  %156 = add i32 %120, 1518500249
  %157 = add i32 %156, %152
  %158 = add i32 %157, %151
  %159 = add i32 %158, %155
  %160 = shl i32 %131, 30
  %161 = lshr i32 %131, 2
  %162 = or i32 %160, %161
  %163 = xor i32 %162, %148
  %164 = and i32 %145, %163
  %165 = xor i32 %164, %148
  %166 = tail call i32 @llvm.bswap.i32(i32 %62)
  %167 = shl i32 %159, 5
  %168 = lshr i32 %159, 27
  %169 = or i32 %167, %168
  %170 = add i32 %166, 1518500249
  %171 = add i32 %170, %134
  %172 = add i32 %171, %165
  %173 = add i32 %172, %169
  %174 = shl i32 %145, 30
  %175 = lshr i32 %145, 2
  %176 = or i32 %174, %175
  %177 = xor i32 %176, %162
  %178 = and i32 %159, %177
  %179 = xor i32 %178, %162
  %180 = tail call i32 @llvm.bswap.i32(i32 %65)
  %181 = shl i32 %173, 5
  %182 = lshr i32 %173, 27
  %183 = or i32 %181, %182
  %184 = add i32 %180, 1518500249
  %185 = add i32 %184, %148
  %186 = add i32 %185, %179
  %187 = add i32 %186, %183
  %188 = shl i32 %159, 30
  %189 = lshr i32 %159, 2
  %190 = or i32 %188, %189
  %191 = xor i32 %190, %176
  %192 = and i32 %173, %191
  %193 = xor i32 %192, %176
  %194 = tail call i32 @llvm.bswap.i32(i32 %68)
  %195 = shl i32 %187, 5
  %196 = lshr i32 %187, 27
  %197 = or i32 %195, %196
  %198 = add i32 %194, 1518500249
  %199 = add i32 %198, %162
  %200 = add i32 %199, %193
  %201 = add i32 %200, %197
  %202 = shl i32 %173, 30
  %203 = lshr i32 %173, 2
  %204 = or i32 %202, %203
  %205 = xor i32 %204, %190
  %206 = and i32 %187, %205
  %207 = xor i32 %206, %190
  %208 = tail call i32 @llvm.bswap.i32(i32 %71)
  %209 = shl i32 %201, 5
  %210 = lshr i32 %201, 27
  %211 = or i32 %209, %210
  %212 = add i32 %208, 1518500249
  %213 = add i32 %212, %176
  %214 = add i32 %213, %207
  %215 = add i32 %214, %211
  %216 = shl i32 %187, 30
  %217 = lshr i32 %187, 2
  %218 = or i32 %216, %217
  %219 = xor i32 %218, %204
  %220 = and i32 %201, %219
  %221 = xor i32 %220, %204
  %222 = tail call i32 @llvm.bswap.i32(i32 %74)
  %223 = shl i32 %215, 5
  %224 = lshr i32 %215, 27
  %225 = or i32 %223, %224
  %226 = add i32 %222, 1518500249
  %227 = add i32 %226, %190
  %228 = add i32 %227, %221
  %229 = add i32 %228, %225
  %230 = shl i32 %201, 30
  %231 = lshr i32 %201, 2
  %232 = or i32 %230, %231
  %233 = xor i32 %232, %218
  %234 = and i32 %215, %233
  %235 = xor i32 %234, %218
  %236 = tail call i32 @llvm.bswap.i32(i32 %77)
  %237 = shl i32 %229, 5
  %238 = lshr i32 %229, 27
  %239 = or i32 %237, %238
  %240 = add i32 %236, 1518500249
  %241 = add i32 %240, %204
  %242 = add i32 %241, %235
  %243 = add i32 %242, %239
  %244 = shl i32 %215, 30
  %245 = lshr i32 %215, 2
  %246 = or i32 %244, %245
  %247 = xor i32 %246, %232
  %248 = and i32 %229, %247
  %249 = xor i32 %248, %232
  %250 = tail call i32 @llvm.bswap.i32(i32 %80)
  %251 = shl i32 %243, 5
  %252 = lshr i32 %243, 27
  %253 = or i32 %251, %252
  %254 = add i32 %250, 1518500249
  %255 = add i32 %254, %218
  %256 = add i32 %255, %249
  %257 = add i32 %256, %253
  %258 = shl i32 %229, 30
  %259 = lshr i32 %229, 2
  %260 = or i32 %258, %259
  %261 = xor i32 %260, %246
  %262 = and i32 %243, %261
  %263 = xor i32 %262, %246
  %264 = tail call i32 @llvm.bswap.i32(i32 %83)
  %265 = shl i32 %257, 5
  %266 = lshr i32 %257, 27
  %267 = or i32 %265, %266
  %268 = add i32 %264, 1518500249
  %269 = add i32 %268, %232
  %270 = add i32 %269, %263
  %271 = add i32 %270, %267
  %272 = shl i32 %243, 30
  %273 = lshr i32 %243, 2
  %274 = or i32 %272, %273
  %275 = xor i32 %274, %260
  %276 = and i32 %257, %275
  %277 = xor i32 %276, %260
  %278 = tail call i32 @llvm.bswap.i32(i32 %86)
  %279 = shl i32 %271, 5
  %280 = lshr i32 %271, 27
  %281 = or i32 %279, %280
  %282 = add i32 %278, 1518500249
  %283 = add i32 %282, %246
  %284 = add i32 %283, %277
  %285 = add i32 %284, %281
  %286 = shl i32 %257, 30
  %287 = lshr i32 %257, 2
  %288 = or i32 %286, %287
  %289 = xor i32 %288, %274
  %290 = and i32 %271, %289
  %291 = xor i32 %290, %274
  %292 = tail call i32 @llvm.bswap.i32(i32 %89)
  %293 = shl i32 %285, 5
  %294 = lshr i32 %285, 27
  %295 = or i32 %293, %294
  %296 = add i32 %292, 1518500249
  %297 = add i32 %296, %260
  %298 = add i32 %297, %291
  %299 = add i32 %298, %295
  %300 = shl i32 %271, 30
  %301 = lshr i32 %271, 2
  %302 = or i32 %300, %301
  %303 = xor i32 %302, %288
  %304 = and i32 %285, %303
  %305 = xor i32 %304, %288
  %306 = tail call i32 @llvm.bswap.i32(i32 %92)
  %307 = shl i32 %299, 5
  %308 = lshr i32 %299, 27
  %309 = or i32 %307, %308
  %310 = add i32 %306, 1518500249
  %311 = add i32 %310, %274
  %312 = add i32 %311, %305
  %313 = add i32 %312, %309
  %314 = shl i32 %285, 30
  %315 = lshr i32 %285, 2
  %316 = or i32 %314, %315
  %317 = xor i32 %316, %302
  %318 = and i32 %299, %317
  %319 = xor i32 %318, %302
  %320 = xor i32 %53, %47
  %321 = xor i32 %320, %71
  %322 = xor i32 %321, %86
  %323 = tail call i32 @llvm.bswap.i32(i32 %322)
  %324 = shl i32 %323, 1
  %325 = lshr i32 %323, 31
  %326 = or i32 %324, %325
  %327 = shl i32 %313, 5
  %328 = lshr i32 %313, 27
  %329 = or i32 %327, %328
  %330 = add i32 %326, 1518500249
  %331 = add i32 %330, %288
  %332 = add i32 %331, %319
  %333 = add i32 %332, %329
  %334 = shl i32 %299, 30
  %335 = lshr i32 %299, 2
  %336 = or i32 %334, %335
  %337 = xor i32 %336, %316
  %338 = and i32 %313, %337
  %339 = xor i32 %338, %316
  %340 = xor i32 %56, %50
  %341 = xor i32 %340, %74
  %342 = xor i32 %341, %89
  %343 = tail call i32 @llvm.bswap.i32(i32 %342)
  %344 = shl i32 %343, 1
  %345 = lshr i32 %343, 31
  %346 = or i32 %344, %345
  %347 = shl i32 %333, 5
  %348 = lshr i32 %333, 27
  %349 = or i32 %347, %348
  %350 = add i32 %346, 1518500249
  %351 = add i32 %350, %302
  %352 = add i32 %351, %339
  %353 = add i32 %352, %349
  %354 = shl i32 %313, 30
  %355 = lshr i32 %313, 2
  %356 = or i32 %354, %355
  %357 = xor i32 %356, %336
  %358 = and i32 %333, %357
  %359 = xor i32 %358, %336
  %360 = xor i32 %59, %53
  %361 = xor i32 %360, %77
  %362 = xor i32 %361, %92
  %363 = tail call i32 @llvm.bswap.i32(i32 %362)
  %364 = shl i32 %363, 1
  %365 = lshr i32 %363, 31
  %366 = or i32 %364, %365
  %367 = shl i32 %353, 5
  %368 = lshr i32 %353, 27
  %369 = or i32 %367, %368
  %370 = add i32 %366, 1518500249
  %371 = add i32 %370, %316
  %372 = add i32 %371, %359
  %373 = add i32 %372, %369
  %374 = shl i32 %333, 30
  %375 = lshr i32 %333, 2
  %376 = or i32 %374, %375
  %377 = xor i32 %376, %356
  %378 = and i32 %353, %377
  %379 = xor i32 %378, %356
  %380 = xor i32 %62, %56
  %381 = xor i32 %380, %80
  %382 = tail call i32 @llvm.bswap.i32(i32 %381)
  %383 = xor i32 %326, %382
  %384 = shl i32 %383, 1
  %385 = lshr i32 %383, 31
  %386 = or i32 %384, %385
  %387 = shl i32 %373, 5
  %388 = lshr i32 %373, 27
  %389 = or i32 %387, %388
  %390 = add i32 %386, 1518500249
  %391 = add i32 %390, %336
  %392 = add i32 %391, %379
  %393 = add i32 %392, %389
  %394 = shl i32 %353, 30
  %395 = lshr i32 %353, 2
  %396 = or i32 %394, %395
  %397 = xor i32 %396, %376
  %398 = xor i32 %397, %373
  %399 = xor i32 %65, %59
  %400 = xor i32 %399, %83
  %401 = tail call i32 @llvm.bswap.i32(i32 %400)
  %402 = xor i32 %346, %401
  %403 = shl i32 %402, 1
  %404 = lshr i32 %402, 31
  %405 = or i32 %403, %404
  %406 = shl i32 %393, 5
  %407 = lshr i32 %393, 27
  %408 = or i32 %406, %407
  %409 = add i32 %405, 1859775393
  %410 = add i32 %409, %356
  %411 = add i32 %410, %398
  %412 = add i32 %411, %408
  %413 = shl i32 %373, 30
  %414 = lshr i32 %373, 2
  %415 = or i32 %413, %414
  %416 = xor i32 %415, %396
  %417 = xor i32 %416, %393
  %418 = xor i32 %68, %62
  %419 = xor i32 %418, %86
  %420 = tail call i32 @llvm.bswap.i32(i32 %419)
  %421 = xor i32 %366, %420
  %422 = shl i32 %421, 1
  %423 = lshr i32 %421, 31
  %424 = or i32 %422, %423
  %425 = shl i32 %412, 5
  %426 = lshr i32 %412, 27
  %427 = or i32 %425, %426
  %428 = add i32 %424, 1859775393
  %429 = add i32 %428, %376
  %430 = add i32 %429, %417
  %431 = add i32 %430, %427
  %432 = shl i32 %393, 30
  %433 = lshr i32 %393, 2
  %434 = or i32 %432, %433
  %435 = xor i32 %434, %415
  %436 = xor i32 %435, %412
  %437 = xor i32 %71, %65
  %438 = xor i32 %437, %89
  %439 = tail call i32 @llvm.bswap.i32(i32 %438)
  %440 = xor i32 %386, %439
  %441 = shl i32 %440, 1
  %442 = lshr i32 %440, 31
  %443 = or i32 %441, %442
  %444 = shl i32 %431, 5
  %445 = lshr i32 %431, 27
  %446 = or i32 %444, %445
  %447 = add i32 %443, 1859775393
  %448 = add i32 %447, %396
  %449 = add i32 %448, %436
  %450 = add i32 %449, %446
  %451 = shl i32 %412, 30
  %452 = lshr i32 %412, 2
  %453 = or i32 %451, %452
  %454 = xor i32 %453, %434
  %455 = xor i32 %454, %431
  %456 = xor i32 %74, %68
  %457 = xor i32 %456, %92
  %458 = tail call i32 @llvm.bswap.i32(i32 %457)
  %459 = xor i32 %405, %458
  %460 = shl i32 %459, 1
  %461 = lshr i32 %459, 31
  %462 = or i32 %460, %461
  %463 = shl i32 %450, 5
  %464 = lshr i32 %450, 27
  %465 = or i32 %463, %464
  %466 = add i32 %462, 1859775393
  %467 = add i32 %466, %415
  %468 = add i32 %467, %455
  %469 = add i32 %468, %465
  %470 = shl i32 %431, 30
  %471 = lshr i32 %431, 2
  %472 = or i32 %470, %471
  %473 = xor i32 %472, %453
  %474 = xor i32 %473, %450
  %475 = xor i32 %77, %71
  %476 = tail call i32 @llvm.bswap.i32(i32 %475)
  %477 = xor i32 %326, %476
  %478 = xor i32 %477, %424
  %479 = shl i32 %478, 1
  %480 = lshr i32 %478, 31
  %481 = or i32 %479, %480
  %482 = shl i32 %469, 5
  %483 = lshr i32 %469, 27
  %484 = or i32 %482, %483
  %485 = add i32 %481, 1859775393
  %486 = add i32 %485, %434
  %487 = add i32 %486, %474
  %488 = add i32 %487, %484
  %489 = shl i32 %450, 30
  %490 = lshr i32 %450, 2
  %491 = or i32 %489, %490
  %492 = xor i32 %491, %472
  %493 = xor i32 %492, %469
  %494 = xor i32 %80, %74
  %495 = tail call i32 @llvm.bswap.i32(i32 %494)
  %496 = xor i32 %346, %495
  %497 = xor i32 %496, %443
  %498 = shl i32 %497, 1
  %499 = lshr i32 %497, 31
  %500 = or i32 %498, %499
  %501 = shl i32 %488, 5
  %502 = lshr i32 %488, 27
  %503 = or i32 %501, %502
  %504 = add i32 %500, 1859775393
  %505 = add i32 %504, %453
  %506 = add i32 %505, %493
  %507 = add i32 %506, %503
  %508 = shl i32 %469, 30
  %509 = lshr i32 %469, 2
  %510 = or i32 %508, %509
  %511 = xor i32 %510, %491
  %512 = xor i32 %511, %488
  %513 = xor i32 %83, %77
  %514 = tail call i32 @llvm.bswap.i32(i32 %513)
  %515 = xor i32 %366, %514
  %516 = xor i32 %515, %462
  %517 = shl i32 %516, 1
  %518 = lshr i32 %516, 31
  %519 = or i32 %517, %518
  %520 = shl i32 %507, 5
  %521 = lshr i32 %507, 27
  %522 = or i32 %520, %521
  %523 = add i32 %519, 1859775393
  %524 = add i32 %523, %472
  %525 = add i32 %524, %512
  %526 = add i32 %525, %522
  %527 = shl i32 %488, 30
  %528 = lshr i32 %488, 2
  %529 = or i32 %527, %528
  %530 = xor i32 %529, %510
  %531 = xor i32 %530, %507
  %532 = xor i32 %86, %80
  %533 = tail call i32 @llvm.bswap.i32(i32 %532)
  %534 = xor i32 %386, %533
  %535 = xor i32 %534, %481
  %536 = shl i32 %535, 1
  %537 = lshr i32 %535, 31
  %538 = or i32 %536, %537
  %539 = shl i32 %526, 5
  %540 = lshr i32 %526, 27
  %541 = or i32 %539, %540
  %542 = add i32 %538, 1859775393
  %543 = add i32 %542, %491
  %544 = add i32 %543, %531
  %545 = add i32 %544, %541
  %546 = shl i32 %507, 30
  %547 = lshr i32 %507, 2
  %548 = or i32 %546, %547
  %549 = xor i32 %548, %529
  %550 = xor i32 %549, %526
  %551 = xor i32 %89, %83
  %552 = tail call i32 @llvm.bswap.i32(i32 %551)
  %553 = xor i32 %405, %552
  %554 = xor i32 %553, %500
  %555 = shl i32 %554, 1
  %556 = lshr i32 %554, 31
  %557 = or i32 %555, %556
  %558 = shl i32 %545, 5
  %559 = lshr i32 %545, 27
  %560 = or i32 %558, %559
  %561 = add i32 %557, 1859775393
  %562 = add i32 %561, %510
  %563 = add i32 %562, %550
  %564 = add i32 %563, %560
  %565 = shl i32 %526, 30
  %566 = lshr i32 %526, 2
  %567 = or i32 %565, %566
  %568 = xor i32 %567, %548
  %569 = xor i32 %568, %545
  %570 = xor i32 %92, %86
  %571 = tail call i32 @llvm.bswap.i32(i32 %570)
  %572 = xor i32 %424, %571
  %573 = xor i32 %572, %519
  %574 = shl i32 %573, 1
  %575 = lshr i32 %573, 31
  %576 = or i32 %574, %575
  %577 = shl i32 %564, 5
  %578 = lshr i32 %564, 27
  %579 = or i32 %577, %578
  %580 = add i32 %576, 1859775393
  %581 = add i32 %580, %529
  %582 = add i32 %581, %569
  %583 = add i32 %582, %579
  %584 = shl i32 %545, 30
  %585 = lshr i32 %545, 2
  %586 = or i32 %584, %585
  %587 = xor i32 %586, %567
  %588 = xor i32 %587, %564
  %589 = xor i32 %326, %292
  %590 = xor i32 %589, %443
  %591 = xor i32 %590, %538
  %592 = shl i32 %591, 1
  %593 = lshr i32 %591, 31
  %594 = or i32 %592, %593
  %595 = shl i32 %583, 5
  %596 = lshr i32 %583, 27
  %597 = or i32 %595, %596
  %598 = add i32 %594, 1859775393
  %599 = add i32 %598, %548
  %600 = add i32 %599, %588
  %601 = add i32 %600, %597
  %602 = shl i32 %564, 30
  %603 = lshr i32 %564, 2
  %604 = or i32 %602, %603
  %605 = xor i32 %604, %586
  %606 = xor i32 %605, %583
  %607 = xor i32 %346, %306
  %608 = xor i32 %607, %462
  %609 = xor i32 %608, %557
  %610 = shl i32 %609, 1
  %611 = lshr i32 %609, 31
  %612 = or i32 %610, %611
  %613 = shl i32 %601, 5
  %614 = lshr i32 %601, 27
  %615 = or i32 %613, %614
  %616 = add i32 %612, 1859775393
  %617 = add i32 %616, %567
  %618 = add i32 %617, %606
  %619 = add i32 %618, %615
  %620 = shl i32 %583, 30
  %621 = lshr i32 %583, 2
  %622 = or i32 %620, %621
  %623 = xor i32 %622, %604
  %624 = xor i32 %623, %601
  %625 = xor i32 %366, %326
  %626 = xor i32 %625, %481
  %627 = xor i32 %626, %576
  %628 = shl i32 %627, 1
  %629 = lshr i32 %627, 31
  %630 = or i32 %628, %629
  %631 = shl i32 %619, 5
  %632 = lshr i32 %619, 27
  %633 = or i32 %631, %632
  %634 = add i32 %630, 1859775393
  %635 = add i32 %634, %586
  %636 = add i32 %635, %624
  %637 = add i32 %636, %633
  %638 = shl i32 %601, 30
  %639 = lshr i32 %601, 2
  %640 = or i32 %638, %639
  %641 = xor i32 %640, %622
  %642 = xor i32 %641, %619
  %643 = xor i32 %386, %346
  %644 = xor i32 %643, %500
  %645 = xor i32 %644, %594
  %646 = shl i32 %645, 1
  %647 = lshr i32 %645, 31
  %648 = or i32 %646, %647
  %649 = shl i32 %637, 5
  %650 = lshr i32 %637, 27
  %651 = or i32 %649, %650
  %652 = add i32 %648, 1859775393
  %653 = add i32 %652, %604
  %654 = add i32 %653, %642
  %655 = add i32 %654, %651
  %656 = shl i32 %619, 30
  %657 = lshr i32 %619, 2
  %658 = or i32 %656, %657
  %659 = xor i32 %658, %640
  %660 = xor i32 %659, %637
  %661 = xor i32 %405, %366
  %662 = xor i32 %661, %519
  %663 = xor i32 %662, %612
  %664 = shl i32 %663, 1
  %665 = lshr i32 %663, 31
  %666 = or i32 %664, %665
  %667 = shl i32 %655, 5
  %668 = lshr i32 %655, 27
  %669 = or i32 %667, %668
  %670 = add i32 %666, 1859775393
  %671 = add i32 %670, %622
  %672 = add i32 %671, %660
  %673 = add i32 %672, %669
  %674 = shl i32 %637, 30
  %675 = lshr i32 %637, 2
  %676 = or i32 %674, %675
  %677 = xor i32 %676, %658
  %678 = xor i32 %677, %655
  %679 = xor i32 %424, %386
  %680 = xor i32 %679, %538
  %681 = xor i32 %680, %630
  %682 = shl i32 %681, 1
  %683 = lshr i32 %681, 31
  %684 = or i32 %682, %683
  %685 = shl i32 %673, 5
  %686 = lshr i32 %673, 27
  %687 = or i32 %685, %686
  %688 = add i32 %684, 1859775393
  %689 = add i32 %688, %640
  %690 = add i32 %689, %678
  %691 = add i32 %690, %687
  %692 = shl i32 %655, 30
  %693 = lshr i32 %655, 2
  %694 = or i32 %692, %693
  %695 = xor i32 %694, %676
  %696 = xor i32 %695, %673
  %697 = xor i32 %443, %405
  %698 = xor i32 %697, %557
  %699 = xor i32 %698, %648
  %700 = shl i32 %699, 1
  %701 = lshr i32 %699, 31
  %702 = or i32 %700, %701
  %703 = shl i32 %691, 5
  %704 = lshr i32 %691, 27
  %705 = or i32 %703, %704
  %706 = add i32 %702, 1859775393
  %707 = add i32 %706, %658
  %708 = add i32 %707, %696
  %709 = add i32 %708, %705
  %710 = shl i32 %673, 30
  %711 = lshr i32 %673, 2
  %712 = or i32 %710, %711
  %713 = xor i32 %712, %694
  %714 = xor i32 %713, %691
  %715 = xor i32 %462, %424
  %716 = xor i32 %715, %576
  %717 = xor i32 %716, %666
  %718 = shl i32 %717, 1
  %719 = lshr i32 %717, 31
  %720 = or i32 %718, %719
  %721 = shl i32 %709, 5
  %722 = lshr i32 %709, 27
  %723 = or i32 %721, %722
  %724 = add i32 %720, 1859775393
  %725 = add i32 %724, %676
  %726 = add i32 %725, %714
  %727 = add i32 %726, %723
  %728 = shl i32 %691, 30
  %729 = lshr i32 %691, 2
  %730 = or i32 %728, %729
  %731 = xor i32 %730, %712
  %732 = xor i32 %731, %709
  %733 = xor i32 %481, %443
  %734 = xor i32 %733, %594
  %735 = xor i32 %734, %684
  %736 = shl i32 %735, 1
  %737 = lshr i32 %735, 31
  %738 = or i32 %736, %737
  %739 = shl i32 %727, 5
  %740 = lshr i32 %727, 27
  %741 = or i32 %739, %740
  %742 = add i32 %738, 1859775393
  %743 = add i32 %742, %694
  %744 = add i32 %743, %732
  %745 = add i32 %744, %741
  %746 = shl i32 %709, 30
  %747 = lshr i32 %709, 2
  %748 = or i32 %746, %747
  %749 = xor i32 %748, %730
  %750 = xor i32 %749, %727
  %751 = xor i32 %500, %462
  %752 = xor i32 %751, %612
  %753 = xor i32 %752, %702
  %754 = shl i32 %753, 1
  %755 = lshr i32 %753, 31
  %756 = or i32 %754, %755
  %757 = shl i32 %745, 5
  %758 = lshr i32 %745, 27
  %759 = or i32 %757, %758
  %760 = add i32 %756, 1859775393
  %761 = add i32 %760, %712
  %762 = add i32 %761, %750
  %763 = add i32 %762, %759
  %764 = shl i32 %727, 30
  %765 = lshr i32 %727, 2
  %766 = or i32 %764, %765
  %767 = or i32 %745, %766
  %768 = and i32 %767, %748
  %769 = and i32 %745, %766
  %770 = or i32 %768, %769
  %771 = xor i32 %519, %481
  %772 = xor i32 %771, %630
  %773 = xor i32 %772, %720
  %774 = shl i32 %773, 1
  %775 = lshr i32 %773, 31
  %776 = or i32 %774, %775
  %777 = shl i32 %763, 5
  %778 = lshr i32 %763, 27
  %779 = or i32 %777, %778
  %780 = add i32 %776, -1894007588
  %781 = add i32 %780, %730
  %782 = add i32 %781, %770
  %783 = add i32 %782, %779
  %784 = shl i32 %745, 30
  %785 = lshr i32 %745, 2
  %786 = or i32 %784, %785
  %787 = or i32 %763, %786
  %788 = and i32 %787, %766
  %789 = and i32 %763, %786
  %790 = or i32 %788, %789
  %791 = xor i32 %538, %500
  %792 = xor i32 %791, %648
  %793 = xor i32 %792, %738
  %794 = shl i32 %793, 1
  %795 = lshr i32 %793, 31
  %796 = or i32 %794, %795
  %797 = shl i32 %783, 5
  %798 = lshr i32 %783, 27
  %799 = or i32 %797, %798
  %800 = add i32 %796, -1894007588
  %801 = add i32 %800, %748
  %802 = add i32 %801, %790
  %803 = add i32 %802, %799
  %804 = shl i32 %763, 30
  %805 = lshr i32 %763, 2
  %806 = or i32 %804, %805
  %807 = or i32 %783, %806
  %808 = and i32 %807, %786
  %809 = and i32 %783, %806
  %810 = or i32 %808, %809
  %811 = xor i32 %557, %519
  %812 = xor i32 %811, %666
  %813 = xor i32 %812, %756
  %814 = shl i32 %813, 1
  %815 = lshr i32 %813, 31
  %816 = or i32 %814, %815
  %817 = shl i32 %803, 5
  %818 = lshr i32 %803, 27
  %819 = or i32 %817, %818
  %820 = add i32 %816, -1894007588
  %821 = add i32 %820, %766
  %822 = add i32 %821, %810
  %823 = add i32 %822, %819
  %824 = shl i32 %783, 30
  %825 = lshr i32 %783, 2
  %826 = or i32 %824, %825
  %827 = or i32 %803, %826
  %828 = and i32 %827, %806
  %829 = and i32 %803, %826
  %830 = or i32 %828, %829
  %831 = xor i32 %576, %538
  %832 = xor i32 %831, %684
  %833 = xor i32 %832, %776
  %834 = shl i32 %833, 1
  %835 = lshr i32 %833, 31
  %836 = or i32 %834, %835
  %837 = shl i32 %823, 5
  %838 = lshr i32 %823, 27
  %839 = or i32 %837, %838
  %840 = add i32 %836, -1894007588
  %841 = add i32 %840, %786
  %842 = add i32 %841, %830
  %843 = add i32 %842, %839
  %844 = shl i32 %803, 30
  %845 = lshr i32 %803, 2
  %846 = or i32 %844, %845
  %847 = or i32 %823, %846
  %848 = and i32 %847, %826
  %849 = and i32 %823, %846
  %850 = or i32 %848, %849
  %851 = xor i32 %594, %557
  %852 = xor i32 %851, %702
  %853 = xor i32 %852, %796
  %854 = shl i32 %853, 1
  %855 = lshr i32 %853, 31
  %856 = or i32 %854, %855
  %857 = shl i32 %843, 5
  %858 = lshr i32 %843, 27
  %859 = or i32 %857, %858
  %860 = add i32 %856, -1894007588
  %861 = add i32 %860, %806
  %862 = add i32 %861, %850
  %863 = add i32 %862, %859
  %864 = shl i32 %823, 30
  %865 = lshr i32 %823, 2
  %866 = or i32 %864, %865
  %867 = or i32 %843, %866
  %868 = and i32 %867, %846
  %869 = and i32 %843, %866
  %870 = or i32 %868, %869
  %871 = xor i32 %612, %576
  %872 = xor i32 %871, %720
  %873 = xor i32 %872, %816
  %874 = shl i32 %873, 1
  %875 = lshr i32 %873, 31
  %876 = or i32 %874, %875
  %877 = shl i32 %863, 5
  %878 = lshr i32 %863, 27
  %879 = or i32 %877, %878
  %880 = add i32 %876, -1894007588
  %881 = add i32 %880, %826
  %882 = add i32 %881, %870
  %883 = add i32 %882, %879
  %884 = shl i32 %843, 30
  %885 = lshr i32 %843, 2
  %886 = or i32 %884, %885
  %887 = or i32 %863, %886
  %888 = and i32 %887, %866
  %889 = and i32 %863, %886
  %890 = or i32 %888, %889
  %891 = xor i32 %630, %594
  %892 = xor i32 %891, %738
  %893 = xor i32 %892, %836
  %894 = shl i32 %893, 1
  %895 = lshr i32 %893, 31
  %896 = or i32 %894, %895
  %897 = shl i32 %883, 5
  %898 = lshr i32 %883, 27
  %899 = or i32 %897, %898
  %900 = add i32 %896, -1894007588
  %901 = add i32 %900, %846
  %902 = add i32 %901, %890
  %903 = add i32 %902, %899
  %904 = shl i32 %863, 30
  %905 = lshr i32 %863, 2
  %906 = or i32 %904, %905
  %907 = or i32 %883, %906
  %908 = and i32 %907, %886
  %909 = and i32 %883, %906
  %910 = or i32 %908, %909
  %911 = xor i32 %648, %612
  %912 = xor i32 %911, %756
  %913 = xor i32 %912, %856
  %914 = shl i32 %913, 1
  %915 = lshr i32 %913, 31
  %916 = or i32 %914, %915
  %917 = shl i32 %903, 5
  %918 = lshr i32 %903, 27
  %919 = or i32 %917, %918
  %920 = add i32 %916, -1894007588
  %921 = add i32 %920, %866
  %922 = add i32 %921, %910
  %923 = add i32 %922, %919
  %924 = shl i32 %883, 30
  %925 = lshr i32 %883, 2
  %926 = or i32 %924, %925
  %927 = or i32 %903, %926
  %928 = and i32 %927, %906
  %929 = and i32 %903, %926
  %930 = or i32 %928, %929
  %931 = xor i32 %666, %630
  %932 = xor i32 %931, %776
  %933 = xor i32 %932, %876
  %934 = shl i32 %933, 1
  %935 = lshr i32 %933, 31
  %936 = or i32 %934, %935
  %937 = shl i32 %923, 5
  %938 = lshr i32 %923, 27
  %939 = or i32 %937, %938
  %940 = add i32 %936, -1894007588
  %941 = add i32 %940, %886
  %942 = add i32 %941, %930
  %943 = add i32 %942, %939
  %944 = shl i32 %903, 30
  %945 = lshr i32 %903, 2
  %946 = or i32 %944, %945
  %947 = or i32 %923, %946
  %948 = and i32 %947, %926
  %949 = and i32 %923, %946
  %950 = or i32 %948, %949
  %951 = xor i32 %684, %648
  %952 = xor i32 %951, %796
  %953 = xor i32 %952, %896
  %954 = shl i32 %953, 1
  %955 = lshr i32 %953, 31
  %956 = or i32 %954, %955
  %957 = shl i32 %943, 5
  %958 = lshr i32 %943, 27
  %959 = or i32 %957, %958
  %960 = add i32 %956, -1894007588
  %961 = add i32 %960, %906
  %962 = add i32 %961, %950
  %963 = add i32 %962, %959
  %964 = shl i32 %923, 30
  %965 = lshr i32 %923, 2
  %966 = or i32 %964, %965
  %967 = or i32 %943, %966
  %968 = and i32 %967, %946
  %969 = and i32 %943, %966
  %970 = or i32 %968, %969
  %971 = xor i32 %702, %666
  %972 = xor i32 %971, %816
  %973 = xor i32 %972, %916
  %974 = shl i32 %973, 1
  %975 = lshr i32 %973, 31
  %976 = or i32 %974, %975
  %977 = shl i32 %963, 5
  %978 = lshr i32 %963, 27
  %979 = or i32 %977, %978
  %980 = add i32 %976, -1894007588
  %981 = add i32 %980, %926
  %982 = add i32 %981, %970
  %983 = add i32 %982, %979
  %984 = shl i32 %943, 30
  %985 = lshr i32 %943, 2
  %986 = or i32 %984, %985
  %987 = or i32 %963, %986
  %988 = and i32 %987, %966
  %989 = and i32 %963, %986
  %990 = or i32 %988, %989
  %991 = xor i32 %720, %684
  %992 = xor i32 %991, %836
  %993 = xor i32 %992, %936
  %994 = shl i32 %993, 1
  %995 = lshr i32 %993, 31
  %996 = or i32 %994, %995
  %997 = shl i32 %983, 5
  %998 = lshr i32 %983, 27
  %999 = or i32 %997, %998
  %1000 = add i32 %996, -1894007588
  %1001 = add i32 %1000, %946
  %1002 = add i32 %1001, %990
  %1003 = add i32 %1002, %999
  %1004 = shl i32 %963, 30
  %1005 = lshr i32 %963, 2
  %1006 = or i32 %1004, %1005
  %1007 = or i32 %983, %1006
  %1008 = and i32 %1007, %986
  %1009 = and i32 %983, %1006
  %1010 = or i32 %1008, %1009
  %1011 = xor i32 %738, %702
  %1012 = xor i32 %1011, %856
  %1013 = xor i32 %1012, %956
  %1014 = shl i32 %1013, 1
  %1015 = lshr i32 %1013, 31
  %1016 = or i32 %1014, %1015
  %1017 = shl i32 %1003, 5
  %1018 = lshr i32 %1003, 27
  %1019 = or i32 %1017, %1018
  %1020 = add i32 %1016, -1894007588
  %1021 = add i32 %1020, %966
  %1022 = add i32 %1021, %1010
  %1023 = add i32 %1022, %1019
  %1024 = shl i32 %983, 30
  %1025 = lshr i32 %983, 2
  %1026 = or i32 %1024, %1025
  %1027 = or i32 %1003, %1026
  %1028 = and i32 %1027, %1006
  %1029 = and i32 %1003, %1026
  %1030 = or i32 %1028, %1029
  %1031 = xor i32 %756, %720
  %1032 = xor i32 %1031, %876
  %1033 = xor i32 %1032, %976
  %1034 = shl i32 %1033, 1
  %1035 = lshr i32 %1033, 31
  %1036 = or i32 %1034, %1035
  %1037 = shl i32 %1023, 5
  %1038 = lshr i32 %1023, 27
  %1039 = or i32 %1037, %1038
  %1040 = add i32 %1036, -1894007588
  %1041 = add i32 %1040, %986
  %1042 = add i32 %1041, %1030
  %1043 = add i32 %1042, %1039
  %1044 = shl i32 %1003, 30
  %1045 = lshr i32 %1003, 2
  %1046 = or i32 %1044, %1045
  %1047 = or i32 %1023, %1046
  %1048 = and i32 %1047, %1026
  %1049 = and i32 %1023, %1046
  %1050 = or i32 %1048, %1049
  %1051 = xor i32 %776, %738
  %1052 = xor i32 %1051, %896
  %1053 = xor i32 %1052, %996
  %1054 = shl i32 %1053, 1
  %1055 = lshr i32 %1053, 31
  %1056 = or i32 %1054, %1055
  %1057 = shl i32 %1043, 5
  %1058 = lshr i32 %1043, 27
  %1059 = or i32 %1057, %1058
  %1060 = add i32 %1056, -1894007588
  %1061 = add i32 %1060, %1006
  %1062 = add i32 %1061, %1050
  %1063 = add i32 %1062, %1059
  %1064 = shl i32 %1023, 30
  %1065 = lshr i32 %1023, 2
  %1066 = or i32 %1064, %1065
  %1067 = or i32 %1043, %1066
  %1068 = and i32 %1067, %1046
  %1069 = and i32 %1043, %1066
  %1070 = or i32 %1068, %1069
  %1071 = xor i32 %796, %756
  %1072 = xor i32 %1071, %916
  %1073 = xor i32 %1072, %1016
  %1074 = shl i32 %1073, 1
  %1075 = lshr i32 %1073, 31
  %1076 = or i32 %1074, %1075
  %1077 = shl i32 %1063, 5
  %1078 = lshr i32 %1063, 27
  %1079 = or i32 %1077, %1078
  %1080 = add i32 %1076, -1894007588
  %1081 = add i32 %1080, %1026
  %1082 = add i32 %1081, %1070
  %1083 = add i32 %1082, %1079
  %1084 = shl i32 %1043, 30
  %1085 = lshr i32 %1043, 2
  %1086 = or i32 %1084, %1085
  %1087 = or i32 %1063, %1086
  %1088 = and i32 %1087, %1066
  %1089 = and i32 %1063, %1086
  %1090 = or i32 %1088, %1089
  %1091 = xor i32 %816, %776
  %1092 = xor i32 %1091, %936
  %1093 = xor i32 %1092, %1036
  %1094 = shl i32 %1093, 1
  %1095 = lshr i32 %1093, 31
  %1096 = or i32 %1094, %1095
  %1097 = shl i32 %1083, 5
  %1098 = lshr i32 %1083, 27
  %1099 = or i32 %1097, %1098
  %1100 = add i32 %1096, -1894007588
  %1101 = add i32 %1100, %1046
  %1102 = add i32 %1101, %1090
  %1103 = add i32 %1102, %1099
  %1104 = shl i32 %1063, 30
  %1105 = lshr i32 %1063, 2
  %1106 = or i32 %1104, %1105
  %1107 = or i32 %1083, %1106
  %1108 = and i32 %1107, %1086
  %1109 = and i32 %1083, %1106
  %1110 = or i32 %1108, %1109
  %1111 = xor i32 %836, %796
  %1112 = xor i32 %1111, %956
  %1113 = xor i32 %1112, %1056
  %1114 = shl i32 %1113, 1
  %1115 = lshr i32 %1113, 31
  %1116 = or i32 %1114, %1115
  %1117 = shl i32 %1103, 5
  %1118 = lshr i32 %1103, 27
  %1119 = or i32 %1117, %1118
  %1120 = add i32 %1116, -1894007588
  %1121 = add i32 %1120, %1066
  %1122 = add i32 %1121, %1110
  %1123 = add i32 %1122, %1119
  %1124 = shl i32 %1083, 30
  %1125 = lshr i32 %1083, 2
  %1126 = or i32 %1124, %1125
  %1127 = or i32 %1103, %1126
  %1128 = and i32 %1127, %1106
  %1129 = and i32 %1103, %1126
  %1130 = or i32 %1128, %1129
  %1131 = xor i32 %856, %816
  %1132 = xor i32 %1131, %976
  %1133 = xor i32 %1132, %1076
  %1134 = shl i32 %1133, 1
  %1135 = lshr i32 %1133, 31
  %1136 = or i32 %1134, %1135
  %1137 = shl i32 %1123, 5
  %1138 = lshr i32 %1123, 27
  %1139 = or i32 %1137, %1138
  %1140 = add i32 %1136, -1894007588
  %1141 = add i32 %1140, %1086
  %1142 = add i32 %1141, %1130
  %1143 = add i32 %1142, %1139
  %1144 = shl i32 %1103, 30
  %1145 = lshr i32 %1103, 2
  %1146 = or i32 %1144, %1145
  %1147 = or i32 %1123, %1146
  %1148 = and i32 %1147, %1126
  %1149 = and i32 %1123, %1146
  %1150 = or i32 %1148, %1149
  %1151 = xor i32 %876, %836
  %1152 = xor i32 %1151, %996
  %1153 = xor i32 %1152, %1096
  %1154 = shl i32 %1153, 1
  %1155 = lshr i32 %1153, 31
  %1156 = or i32 %1154, %1155
  %1157 = shl i32 %1143, 5
  %1158 = lshr i32 %1143, 27
  %1159 = or i32 %1157, %1158
  %1160 = add i32 %1156, -1894007588
  %1161 = add i32 %1160, %1106
  %1162 = add i32 %1161, %1150
  %1163 = add i32 %1162, %1159
  %1164 = shl i32 %1123, 30
  %1165 = lshr i32 %1123, 2
  %1166 = or i32 %1164, %1165
  %1167 = xor i32 %1166, %1146
  %1168 = xor i32 %1167, %1143
  %1169 = xor i32 %896, %856
  %1170 = xor i32 %1169, %1016
  %1171 = xor i32 %1170, %1116
  %1172 = shl i32 %1171, 1
  %1173 = lshr i32 %1171, 31
  %1174 = or i32 %1172, %1173
  %1175 = shl i32 %1163, 5
  %1176 = lshr i32 %1163, 27
  %1177 = or i32 %1175, %1176
  %1178 = add i32 %1174, -899497514
  %1179 = add i32 %1178, %1126
  %1180 = add i32 %1179, %1168
  %1181 = add i32 %1180, %1177
  %1182 = shl i32 %1143, 30
  %1183 = lshr i32 %1143, 2
  %1184 = or i32 %1182, %1183
  %1185 = xor i32 %1184, %1166
  %1186 = xor i32 %1185, %1163
  %1187 = xor i32 %916, %876
  %1188 = xor i32 %1187, %1036
  %1189 = xor i32 %1188, %1136
  %1190 = shl i32 %1189, 1
  %1191 = lshr i32 %1189, 31
  %1192 = or i32 %1190, %1191
  %1193 = shl i32 %1181, 5
  %1194 = lshr i32 %1181, 27
  %1195 = or i32 %1193, %1194
  %1196 = add i32 %1192, -899497514
  %1197 = add i32 %1196, %1146
  %1198 = add i32 %1197, %1186
  %1199 = add i32 %1198, %1195
  %1200 = shl i32 %1163, 30
  %1201 = lshr i32 %1163, 2
  %1202 = or i32 %1200, %1201
  %1203 = xor i32 %1202, %1184
  %1204 = xor i32 %1203, %1181
  %1205 = xor i32 %936, %896
  %1206 = xor i32 %1205, %1056
  %1207 = xor i32 %1206, %1156
  %1208 = shl i32 %1207, 1
  %1209 = lshr i32 %1207, 31
  %1210 = or i32 %1208, %1209
  %1211 = shl i32 %1199, 5
  %1212 = lshr i32 %1199, 27
  %1213 = or i32 %1211, %1212
  %1214 = add i32 %1210, -899497514
  %1215 = add i32 %1214, %1166
  %1216 = add i32 %1215, %1204
  %1217 = add i32 %1216, %1213
  %1218 = shl i32 %1181, 30
  %1219 = lshr i32 %1181, 2
  %1220 = or i32 %1218, %1219
  %1221 = xor i32 %1220, %1202
  %1222 = xor i32 %1221, %1199
  %1223 = xor i32 %956, %916
  %1224 = xor i32 %1223, %1076
  %1225 = xor i32 %1224, %1174
  %1226 = shl i32 %1225, 1
  %1227 = lshr i32 %1225, 31
  %1228 = or i32 %1226, %1227
  %1229 = shl i32 %1217, 5
  %1230 = lshr i32 %1217, 27
  %1231 = or i32 %1229, %1230
  %1232 = add i32 %1228, -899497514
  %1233 = add i32 %1232, %1184
  %1234 = add i32 %1233, %1222
  %1235 = add i32 %1234, %1231
  %1236 = shl i32 %1199, 30
  %1237 = lshr i32 %1199, 2
  %1238 = or i32 %1236, %1237
  %1239 = xor i32 %1238, %1220
  %1240 = xor i32 %1239, %1217
  %1241 = xor i32 %976, %936
  %1242 = xor i32 %1241, %1096
  %1243 = xor i32 %1242, %1192
  %1244 = shl i32 %1243, 1
  %1245 = lshr i32 %1243, 31
  %1246 = or i32 %1244, %1245
  %1247 = shl i32 %1235, 5
  %1248 = lshr i32 %1235, 27
  %1249 = or i32 %1247, %1248
  %1250 = add i32 %1246, -899497514
  %1251 = add i32 %1250, %1202
  %1252 = add i32 %1251, %1240
  %1253 = add i32 %1252, %1249
  %1254 = shl i32 %1217, 30
  %1255 = lshr i32 %1217, 2
  %1256 = or i32 %1254, %1255
  %1257 = xor i32 %1256, %1238
  %1258 = xor i32 %1257, %1235
  %1259 = xor i32 %996, %956
  %1260 = xor i32 %1259, %1116
  %1261 = xor i32 %1260, %1210
  %1262 = shl i32 %1261, 1
  %1263 = lshr i32 %1261, 31
  %1264 = or i32 %1262, %1263
  %1265 = shl i32 %1253, 5
  %1266 = lshr i32 %1253, 27
  %1267 = or i32 %1265, %1266
  %1268 = add i32 %1264, -899497514
  %1269 = add i32 %1268, %1220
  %1270 = add i32 %1269, %1258
  %1271 = add i32 %1270, %1267
  %1272 = shl i32 %1235, 30
  %1273 = lshr i32 %1235, 2
  %1274 = or i32 %1272, %1273
  %1275 = xor i32 %1274, %1256
  %1276 = xor i32 %1275, %1253
  %1277 = xor i32 %1016, %976
  %1278 = xor i32 %1277, %1136
  %1279 = xor i32 %1278, %1228
  %1280 = shl i32 %1279, 1
  %1281 = lshr i32 %1279, 31
  %1282 = or i32 %1280, %1281
  %1283 = shl i32 %1271, 5
  %1284 = lshr i32 %1271, 27
  %1285 = or i32 %1283, %1284
  %1286 = add i32 %1282, -899497514
  %1287 = add i32 %1286, %1238
  %1288 = add i32 %1287, %1276
  %1289 = add i32 %1288, %1285
  %1290 = shl i32 %1253, 30
  %1291 = lshr i32 %1253, 2
  %1292 = or i32 %1290, %1291
  %1293 = xor i32 %1292, %1274
  %1294 = xor i32 %1293, %1271
  %1295 = xor i32 %1036, %996
  %1296 = xor i32 %1295, %1156
  %1297 = xor i32 %1296, %1246
  %1298 = shl i32 %1297, 1
  %1299 = lshr i32 %1297, 31
  %1300 = or i32 %1298, %1299
  %1301 = shl i32 %1289, 5
  %1302 = lshr i32 %1289, 27
  %1303 = or i32 %1301, %1302
  %1304 = add i32 %1300, -899497514
  %1305 = add i32 %1304, %1256
  %1306 = add i32 %1305, %1294
  %1307 = add i32 %1306, %1303
  %1308 = shl i32 %1271, 30
  %1309 = lshr i32 %1271, 2
  %1310 = or i32 %1308, %1309
  %1311 = xor i32 %1310, %1292
  %1312 = xor i32 %1311, %1289
  %1313 = xor i32 %1056, %1016
  %1314 = xor i32 %1313, %1174
  %1315 = xor i32 %1314, %1264
  %1316 = shl i32 %1315, 1
  %1317 = lshr i32 %1315, 31
  %1318 = or i32 %1316, %1317
  %1319 = shl i32 %1307, 5
  %1320 = lshr i32 %1307, 27
  %1321 = or i32 %1319, %1320
  %1322 = add i32 %1318, -899497514
  %1323 = add i32 %1322, %1274
  %1324 = add i32 %1323, %1312
  %1325 = add i32 %1324, %1321
  %1326 = shl i32 %1289, 30
  %1327 = lshr i32 %1289, 2
  %1328 = or i32 %1326, %1327
  %1329 = xor i32 %1328, %1310
  %1330 = xor i32 %1329, %1307
  %1331 = xor i32 %1076, %1036
  %1332 = xor i32 %1331, %1192
  %1333 = xor i32 %1332, %1282
  %1334 = shl i32 %1333, 1
  %1335 = lshr i32 %1333, 31
  %1336 = or i32 %1334, %1335
  %1337 = shl i32 %1325, 5
  %1338 = lshr i32 %1325, 27
  %1339 = or i32 %1337, %1338
  %1340 = add i32 %1336, -899497514
  %1341 = add i32 %1340, %1292
  %1342 = add i32 %1341, %1330
  %1343 = add i32 %1342, %1339
  %1344 = shl i32 %1307, 30
  %1345 = lshr i32 %1307, 2
  %1346 = or i32 %1344, %1345
  %1347 = xor i32 %1346, %1328
  %1348 = xor i32 %1347, %1325
  %1349 = xor i32 %1096, %1056
  %1350 = xor i32 %1349, %1210
  %1351 = xor i32 %1350, %1300
  %1352 = shl i32 %1351, 1
  %1353 = lshr i32 %1351, 31
  %1354 = or i32 %1352, %1353
  %1355 = shl i32 %1343, 5
  %1356 = lshr i32 %1343, 27
  %1357 = or i32 %1355, %1356
  %1358 = add i32 %1354, -899497514
  %1359 = add i32 %1358, %1310
  %1360 = add i32 %1359, %1348
  %1361 = add i32 %1360, %1357
  %1362 = shl i32 %1325, 30
  %1363 = lshr i32 %1325, 2
  %1364 = or i32 %1362, %1363
  %1365 = xor i32 %1364, %1346
  %1366 = xor i32 %1365, %1343
  %1367 = xor i32 %1116, %1076
  %1368 = xor i32 %1367, %1228
  %1369 = xor i32 %1368, %1318
  %1370 = shl i32 %1369, 1
  %1371 = lshr i32 %1369, 31
  %1372 = or i32 %1370, %1371
  %1373 = shl i32 %1361, 5
  %1374 = lshr i32 %1361, 27
  %1375 = or i32 %1373, %1374
  %1376 = add i32 %1372, -899497514
  %1377 = add i32 %1376, %1328
  %1378 = add i32 %1377, %1366
  %1379 = add i32 %1378, %1375
  %1380 = shl i32 %1343, 30
  %1381 = lshr i32 %1343, 2
  %1382 = or i32 %1380, %1381
  %1383 = xor i32 %1382, %1364
  %1384 = xor i32 %1383, %1361
  %1385 = xor i32 %1136, %1096
  %1386 = xor i32 %1385, %1246
  %1387 = xor i32 %1386, %1336
  %1388 = shl i32 %1387, 1
  %1389 = lshr i32 %1387, 31
  %1390 = or i32 %1388, %1389
  %1391 = shl i32 %1379, 5
  %1392 = lshr i32 %1379, 27
  %1393 = or i32 %1391, %1392
  %1394 = add i32 %1390, -899497514
  %1395 = add i32 %1394, %1346
  %1396 = add i32 %1395, %1384
  %1397 = add i32 %1396, %1393
  %1398 = shl i32 %1361, 30
  %1399 = lshr i32 %1361, 2
  %1400 = or i32 %1398, %1399
  %1401 = xor i32 %1400, %1382
  %1402 = xor i32 %1401, %1379
  %1403 = xor i32 %1156, %1116
  %1404 = xor i32 %1403, %1264
  %1405 = xor i32 %1404, %1354
  %1406 = shl i32 %1405, 1
  %1407 = lshr i32 %1405, 31
  %1408 = or i32 %1406, %1407
  %1409 = shl i32 %1397, 5
  %1410 = lshr i32 %1397, 27
  %1411 = or i32 %1409, %1410
  %1412 = add i32 %1408, -899497514
  %1413 = add i32 %1412, %1364
  %1414 = add i32 %1413, %1402
  %1415 = add i32 %1414, %1411
  %1416 = shl i32 %1379, 30
  %1417 = lshr i32 %1379, 2
  %1418 = or i32 %1416, %1417
  %1419 = xor i32 %1418, %1400
  %1420 = xor i32 %1419, %1397
  %1421 = xor i32 %1174, %1136
  %1422 = xor i32 %1421, %1282
  %1423 = xor i32 %1422, %1372
  %1424 = shl i32 %1423, 1
  %1425 = lshr i32 %1423, 31
  %1426 = or i32 %1424, %1425
  %1427 = shl i32 %1415, 5
  %1428 = lshr i32 %1415, 27
  %1429 = or i32 %1427, %1428
  %1430 = add i32 %1426, -899497514
  %1431 = add i32 %1430, %1382
  %1432 = add i32 %1431, %1420
  %1433 = add i32 %1432, %1429
  %1434 = shl i32 %1397, 30
  %1435 = lshr i32 %1397, 2
  %1436 = or i32 %1434, %1435
  %1437 = xor i32 %1436, %1418
  %1438 = xor i32 %1437, %1415
  %1439 = xor i32 %1192, %1156
  %1440 = xor i32 %1439, %1300
  %1441 = xor i32 %1440, %1390
  %1442 = shl i32 %1441, 1
  %1443 = lshr i32 %1441, 31
  %1444 = or i32 %1442, %1443
  %1445 = shl i32 %1433, 5
  %1446 = lshr i32 %1433, 27
  %1447 = or i32 %1445, %1446
  %1448 = add i32 %1444, -899497514
  %1449 = add i32 %1448, %1400
  %1450 = add i32 %1449, %1438
  %1451 = add i32 %1450, %1447
  %1452 = shl i32 %1415, 30
  %1453 = lshr i32 %1415, 2
  %1454 = or i32 %1452, %1453
  %1455 = xor i32 %1454, %1436
  %1456 = xor i32 %1455, %1433
  %1457 = xor i32 %1210, %1174
  %1458 = xor i32 %1457, %1318
  %1459 = xor i32 %1458, %1408
  %1460 = shl i32 %1459, 1
  %1461 = lshr i32 %1459, 31
  %1462 = or i32 %1460, %1461
  %1463 = shl i32 %1451, 5
  %1464 = lshr i32 %1451, 27
  %1465 = or i32 %1463, %1464
  %1466 = add i32 %1462, -899497514
  %1467 = add i32 %1466, %1418
  %1468 = add i32 %1467, %1456
  %1469 = add i32 %1468, %1465
  %1470 = shl i32 %1433, 30
  %1471 = lshr i32 %1433, 2
  %1472 = or i32 %1470, %1471
  %1473 = xor i32 %1472, %1454
  %1474 = xor i32 %1473, %1451
  %1475 = xor i32 %1228, %1192
  %1476 = xor i32 %1475, %1336
  %1477 = xor i32 %1476, %1426
  %1478 = shl i32 %1477, 1
  %1479 = lshr i32 %1477, 31
  %1480 = or i32 %1478, %1479
  %1481 = shl i32 %1469, 5
  %1482 = lshr i32 %1469, 27
  %1483 = or i32 %1481, %1482
  %1484 = add i32 %1480, -899497514
  %1485 = add i32 %1484, %1436
  %1486 = add i32 %1485, %1474
  %1487 = add i32 %1486, %1483
  %1488 = shl i32 %1451, 30
  %1489 = lshr i32 %1451, 2
  %1490 = or i32 %1488, %1489
  %1491 = xor i32 %1490, %1472
  %1492 = xor i32 %1491, %1469
  %1493 = xor i32 %1246, %1210
  %1494 = xor i32 %1493, %1354
  %1495 = xor i32 %1494, %1444
  %1496 = shl i32 %1495, 1
  %1497 = lshr i32 %1495, 31
  %1498 = or i32 %1496, %1497
  %1499 = shl i32 %1487, 5
  %1500 = lshr i32 %1487, 27
  %1501 = or i32 %1499, %1500
  %1502 = add i32 %1498, -899497514
  %1503 = add i32 %1502, %1454
  %1504 = add i32 %1503, %1492
  %1505 = add i32 %1504, %1501
  %1506 = shl i32 %1469, 30
  %1507 = lshr i32 %1469, 2
  %1508 = or i32 %1506, %1507
  %1509 = xor i32 %1508, %1490
  %1510 = xor i32 %1509, %1487
  %1511 = xor i32 %1264, %1228
  %1512 = xor i32 %1511, %1372
  %1513 = xor i32 %1512, %1462
  %1514 = shl i32 %1513, 1
  %1515 = lshr i32 %1513, 31
  %1516 = or i32 %1514, %1515
  %1517 = shl i32 %1505, 5
  %1518 = lshr i32 %1505, 27
  %1519 = or i32 %1517, %1518
  %1520 = shl i32 %1487, 30
  %1521 = lshr i32 %1487, 2
  %1522 = or i32 %1520, %1521
  %1523 = add i32 %43, -899497514
  %1524 = add i32 %1523, %1516
  %1525 = add i32 %1524, %1472
  %1526 = add i32 %1525, %1510
  %1527 = add i32 %1526, %1519
  store i32 %1527, i32* %24, align 4, !tbaa !5
  %1528 = load i32, i32* %29, align 4, !tbaa !5
  %1529 = add i32 %1505, %1528
  store i32 %1529, i32* %29, align 4, !tbaa !5
  %1530 = load i32, i32* %30, align 4, !tbaa !5
  %1531 = add i32 %1522, %1530
  store i32 %1531, i32* %30, align 4, !tbaa !5
  %1532 = load i32, i32* %31, align 4, !tbaa !5
  %1533 = add i32 %1508, %1532
  store i32 %1533, i32* %31, align 4, !tbaa !5
  %1534 = load i32, i32* %32, align 4, !tbaa !5
  %1535 = add i32 %1490, %1534
  store i32 %1535, i32* %32, align 4, !tbaa !5
  %1536 = add i32 %44, 64
  %1537 = add i32 %44, 127
  %1538 = icmp ult i32 %1537, %2
  br i1 %1538, label %38, label %.loopexit.loopexit, !llvm.loop !9

.loopexit.loopexit:                               ; preds = %38
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit, %21, %13
  %1539 = phi i32 [ %18, %13 ], [ 0, %21 ], [ 0, %.loopexit.loopexit ]
  %1540 = phi i32 [ 0, %13 ], [ %23, %21 ], [ %1536, %.loopexit.loopexit ]
  %1541 = getelementptr inbounds %struct.SHA1_CTX, %struct.SHA1_CTX* %0, i32 0, i32 2, i32 %1539
  %1542 = getelementptr inbounds i8, i8* %1, i32 %1540
  %1543 = sub i32 %2, %1540
  tail call void @llvm.memcpy.p0i8.p0i8.i32(i8* %1541, i8* %1542, i32 %1543, i32 1, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* nocapture writeonly, i8* nocapture readonly, i32, i32, i1) #3

; Function Attrs: nounwind
define void @SHA1Update(%struct.SHA1_CTX* nocapture, i8* nocapture readonly, i32) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.SHA1_CTX, %struct.SHA1_CTX* %0, i32 0, i32 1, i32 0
  %5 = load i32, i32* %4, align 4, !tbaa !5
  %6 = shl i32 %2, 3
  %7 = add i32 %5, %6
  store i32 %7, i32* %4, align 4, !tbaa !5
  %8 = icmp ult i32 %7, %5
  %9 = getelementptr inbounds %struct.SHA1_CTX, %struct.SHA1_CTX* %0, i32 0, i32 1, i32 1
  %10 = load i32, i32* %9, align 4, !tbaa !5
  br i1 %8, label %11, label %13

; <label>:11:                                     ; preds = %3
  %12 = add i32 %10, 1
  store i32 %12, i32* %9, align 4, !tbaa !5
  br label %13

; <label>:13:                                     ; preds = %11, %3
  %14 = phi i32 [ %12, %11 ], [ %10, %3 ]
  %15 = lshr i32 %2, 29
  %16 = add i32 %14, %15
  store i32 %16, i32* %9, align 4, !tbaa !5
  %17 = lshr i32 %5, 3
  %18 = and i32 %17, 63
  %19 = add i32 %18, %2
  %20 = icmp ugt i32 %19, 63
  br i1 %20, label %21, label %.loopexit

; <label>:21:                                     ; preds = %13
  %22 = getelementptr inbounds %struct.SHA1_CTX, %struct.SHA1_CTX* %0, i32 0, i32 2, i32 %18
  %23 = sub nsw i32 64, %18
  tail call void @llvm.memcpy.p0i8.p0i8.i32(i8* %22, i8* %1, i32 %23, i32 1, i1 false)
  %24 = getelementptr inbounds %struct.SHA1_CTX, %struct.SHA1_CTX* %0, i32 0, i32 0, i32 0
  %25 = getelementptr inbounds %struct.SHA1_CTX, %struct.SHA1_CTX* %0, i32 0, i32 2, i32 0
  tail call void @SHA1Transform(i32* %24, i8* %25)
  %26 = add nuw nsw i32 %23, 63
  %27 = icmp ult i32 %26, %2
  br i1 %27, label %.preheader.preheader, label %.loopexit

.preheader.preheader:                             ; preds = %21
  br label %.preheader

.preheader:                                       ; preds = %.preheader, %.preheader.preheader
  %28 = phi i32 [ %30, %.preheader ], [ %23, %.preheader.preheader ]
  %29 = getelementptr inbounds i8, i8* %1, i32 %28
  tail call void @SHA1Transform(i32* %24, i8* %29)
  %30 = add i32 %28, 64
  %31 = add i32 %28, 127
  %32 = icmp ult i32 %31, %2
  br i1 %32, label %.preheader, label %.loopexit.loopexit, !llvm.loop !71

.loopexit.loopexit:                               ; preds = %.preheader
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit, %21, %13
  %33 = phi i32 [ 0, %13 ], [ %23, %21 ], [ %30, %.loopexit.loopexit ]
  %34 = phi i32 [ %18, %13 ], [ 0, %21 ], [ 0, %.loopexit.loopexit ]
  %35 = getelementptr inbounds %struct.SHA1_CTX, %struct.SHA1_CTX* %0, i32 0, i32 2, i32 %34
  %36 = getelementptr inbounds i8, i8* %1, i32 %33
  %37 = sub i32 %2, %33
  tail call void @llvm.memcpy.p0i8.p0i8.i32(i8* %35, i8* %36, i32 %37, i32 1, i1 false)
  ret void
}

; Function Attrs: nounwind
define void @SHA1Final(i8* nocapture, %struct.SHA1_CTX* nocapture) local_unnamed_addr #0 {
  %3 = alloca i64, align 8
  %4 = bitcast i64* %3 to [8 x i8]*
  %5 = alloca i8, align 1
  %6 = bitcast i64* %3 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %6) #6
  call void @llvm.lifetime.start(i64 1, i8* nonnull %5) #6
  %7 = getelementptr inbounds %struct.SHA1_CTX, %struct.SHA1_CTX* %1, i32 0, i32 1, i32 1
  %8 = load i32, i32* %7, align 4, !tbaa !5
  %9 = lshr i32 %8, 24
  %10 = trunc i32 %9 to i8
  store i8 %10, i8* %6, align 8, !tbaa !83
  %11 = lshr i32 %8, 16
  %12 = trunc i32 %11 to i8
  %13 = getelementptr inbounds [8 x i8], [8 x i8]* %4, i32 0, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !83
  %14 = lshr i32 %8, 8
  %15 = trunc i32 %14 to i8
  %16 = getelementptr inbounds [8 x i8], [8 x i8]* %4, i32 0, i32 2
  store i8 %15, i8* %16, align 2, !tbaa !83
  %17 = trunc i32 %8 to i8
  %18 = getelementptr inbounds [8 x i8], [8 x i8]* %4, i32 0, i32 3
  store i8 %17, i8* %18, align 1, !tbaa !83
  %19 = getelementptr inbounds %struct.SHA1_CTX, %struct.SHA1_CTX* %1, i32 0, i32 1, i32 0
  %20 = load i32, i32* %19, align 4, !tbaa !5
  %21 = lshr i32 %20, 24
  %22 = trunc i32 %21 to i8
  %23 = getelementptr inbounds [8 x i8], [8 x i8]* %4, i32 0, i32 4
  store i8 %22, i8* %23, align 4, !tbaa !83
  %24 = lshr i32 %20, 16
  %25 = trunc i32 %24 to i8
  %26 = getelementptr inbounds [8 x i8], [8 x i8]* %4, i32 0, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !83
  %27 = lshr i32 %20, 8
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds [8 x i8], [8 x i8]* %4, i32 0, i32 6
  store i8 %28, i8* %29, align 2, !tbaa !83
  %30 = trunc i32 %20 to i8
  %31 = getelementptr inbounds [8 x i8], [8 x i8]* %4, i32 0, i32 7
  store i8 %30, i8* %31, align 1, !tbaa !83
  store i8 -128, i8* %5, align 1, !tbaa !83
  %32 = add i32 %20, 8
  store i32 %32, i32* %19, align 4, !tbaa !5
  %33 = icmp ugt i32 %20, -9
  br i1 %33, label %34, label %36

; <label>:34:                                     ; preds = %2
  %35 = add i32 %8, 1
  store i32 %35, i32* %7, align 4, !tbaa !5
  br label %36

; <label>:36:                                     ; preds = %34, %2
  %37 = phi i32 [ %35, %34 ], [ %8, %2 ]
  store i32 %37, i32* %7, align 4, !tbaa !5
  %38 = lshr i32 %20, 3
  %39 = and i32 %38, 63
  %40 = icmp eq i32 %39, 63
  br i1 %40, label %41, label %46

; <label>:41:                                     ; preds = %36
  %42 = getelementptr inbounds %struct.SHA1_CTX, %struct.SHA1_CTX* %1, i32 0, i32 2, i32 63
  store i8 -128, i8* %42, align 1
  %43 = getelementptr inbounds %struct.SHA1_CTX, %struct.SHA1_CTX* %1, i32 0, i32 0, i32 0
  %44 = getelementptr inbounds %struct.SHA1_CTX, %struct.SHA1_CTX* %1, i32 0, i32 2, i32 0
  tail call void @SHA1Transform(i32* %43, i8* %44) #6
  %45 = load i32, i32* %19, align 4, !tbaa !5
  br label %46

; <label>:46:                                     ; preds = %41, %36
  %47 = phi i32 [ %32, %36 ], [ %45, %41 ]
  %48 = phi i32 [ 0, %36 ], [ 1, %41 ]
  %49 = phi i32 [ %39, %36 ], [ 0, %41 ]
  %50 = getelementptr inbounds %struct.SHA1_CTX, %struct.SHA1_CTX* %1, i32 0, i32 2, i32 %49
  %51 = getelementptr inbounds i8, i8* %5, i32 %48
  %52 = xor i32 %48, 1
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %50, i8* %51, i32 %52, i32 1, i1 false) #6
  %53 = and i32 %47, 504
  %54 = icmp eq i32 %53, 448
  br i1 %54, label %.loopexit, label %55

; <label>:55:                                     ; preds = %46
  %56 = getelementptr inbounds %struct.SHA1_CTX, %struct.SHA1_CTX* %1, i32 0, i32 0, i32 0
  %57 = getelementptr inbounds %struct.SHA1_CTX, %struct.SHA1_CTX* %1, i32 0, i32 2, i32 0
  %58 = getelementptr inbounds %struct.SHA1_CTX, %struct.SHA1_CTX* %1, i32 0, i32 2, i32 63
  br label %59

; <label>:59:                                     ; preds = %73, %55
  %60 = phi i32 [ %47, %55 ], [ %74, %73 ]
  store i8 0, i8* %5, align 1, !tbaa !83
  %61 = add i32 %60, 8
  store i32 %61, i32* %19, align 4, !tbaa !5
  %62 = icmp ugt i32 %60, -9
  %63 = load i32, i32* %7, align 4, !tbaa !5
  br i1 %62, label %64, label %66

; <label>:64:                                     ; preds = %59
  %65 = add i32 %63, 1
  store i32 %65, i32* %7, align 4, !tbaa !5
  br label %66

; <label>:66:                                     ; preds = %64, %59
  %67 = phi i32 [ %65, %64 ], [ %63, %59 ]
  store i32 %67, i32* %7, align 4, !tbaa !5
  %68 = lshr i32 %60, 3
  %69 = and i32 %68, 63
  %70 = icmp eq i32 %69, 63
  br i1 %70, label %71, label %73

; <label>:71:                                     ; preds = %66
  store i8 0, i8* %58, align 1
  tail call void @SHA1Transform(i32* nonnull %56, i8* nonnull %57) #6
  %72 = load i32, i32* %19, align 4, !tbaa !5
  br label %73

; <label>:73:                                     ; preds = %71, %66
  %74 = phi i32 [ %61, %66 ], [ %72, %71 ]
  %75 = phi i32 [ 0, %66 ], [ 1, %71 ]
  %76 = phi i32 [ %69, %66 ], [ 0, %71 ]
  %77 = getelementptr inbounds %struct.SHA1_CTX, %struct.SHA1_CTX* %1, i32 0, i32 2, i32 %76
  %78 = getelementptr inbounds i8, i8* %5, i32 %75
  %79 = xor i32 %75, 1
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %77, i8* %78, i32 %79, i32 1, i1 false) #6
  %80 = and i32 %74, 504
  %81 = icmp eq i32 %80, 448
  br i1 %81, label %.loopexit.loopexit, label %59, !llvm.loop !84

.loopexit.loopexit:                               ; preds = %73
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit, %46
  %82 = phi i32 [ %47, %46 ], [ %74, %.loopexit.loopexit ]
  %83 = add i32 %82, 64
  store i32 %83, i32* %19, align 4, !tbaa !5
  %84 = icmp ugt i32 %82, -65
  %85 = load i32, i32* %7, align 4, !tbaa !5
  br i1 %84, label %86, label %88

; <label>:86:                                     ; preds = %.loopexit
  %87 = add i32 %85, 1
  store i32 %87, i32* %7, align 4, !tbaa !5
  br label %88

; <label>:88:                                     ; preds = %86, %.loopexit
  %89 = phi i32 [ %87, %86 ], [ %85, %.loopexit ]
  store i32 %89, i32* %7, align 4, !tbaa !5
  %90 = lshr i32 %82, 3
  %91 = and i32 %90, 63
  %92 = add nuw nsw i32 %91, 8
  %93 = icmp ugt i32 %92, 63
  br i1 %93, label %96, label %94

; <label>:94:                                     ; preds = %88
  %95 = getelementptr inbounds %struct.SHA1_CTX, %struct.SHA1_CTX* %1, i32 0, i32 0, i32 0
  br label %101

; <label>:96:                                     ; preds = %88
  %97 = getelementptr inbounds %struct.SHA1_CTX, %struct.SHA1_CTX* %1, i32 0, i32 2, i32 %91
  %98 = sub nsw i32 64, %91
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %97, i8* nonnull %6, i32 %98, i32 1, i1 false) #6
  %99 = getelementptr inbounds %struct.SHA1_CTX, %struct.SHA1_CTX* %1, i32 0, i32 0, i32 0
  %100 = getelementptr inbounds %struct.SHA1_CTX, %struct.SHA1_CTX* %1, i32 0, i32 2, i32 0
  tail call void @SHA1Transform(i32* %99, i8* %100) #6
  br label %101

; <label>:101:                                    ; preds = %96, %94
  %102 = phi i32* [ %95, %94 ], [ %99, %96 ]
  %103 = phi i32 [ 0, %94 ], [ %98, %96 ]
  %104 = phi i32 [ %91, %94 ], [ 0, %96 ]
  %105 = getelementptr inbounds %struct.SHA1_CTX, %struct.SHA1_CTX* %1, i32 0, i32 2, i32 %104
  %106 = getelementptr inbounds i8, i8* %6, i32 %103
  %107 = sub nsw i32 8, %103
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %105, i8* %106, i32 %107, i32 1, i1 false) #6
  %108 = load i32, i32* %102, align 4, !tbaa !5
  %109 = lshr i32 %108, 24
  %110 = trunc i32 %109 to i8
  store i8 %110, i8* %0, align 1, !tbaa !83
  %111 = load i32, i32* %102, align 4, !tbaa !5
  %112 = lshr i32 %111, 16
  %113 = trunc i32 %112 to i8
  %114 = getelementptr inbounds i8, i8* %0, i32 1
  store i8 %113, i8* %114, align 1, !tbaa !83
  %115 = load i32, i32* %102, align 4, !tbaa !5
  %116 = lshr i32 %115, 8
  %117 = trunc i32 %116 to i8
  %118 = getelementptr inbounds i8, i8* %0, i32 2
  store i8 %117, i8* %118, align 1, !tbaa !83
  %119 = load i32, i32* %102, align 4, !tbaa !5
  %120 = trunc i32 %119 to i8
  %121 = getelementptr inbounds i8, i8* %0, i32 3
  store i8 %120, i8* %121, align 1, !tbaa !83
  %122 = getelementptr inbounds %struct.SHA1_CTX, %struct.SHA1_CTX* %1, i32 0, i32 0, i32 1
  %123 = load i32, i32* %122, align 4, !tbaa !5
  %124 = lshr i32 %123, 24
  %125 = trunc i32 %124 to i8
  %126 = getelementptr inbounds i8, i8* %0, i32 4
  store i8 %125, i8* %126, align 1, !tbaa !83
  %127 = load i32, i32* %122, align 4, !tbaa !5
  %128 = lshr i32 %127, 16
  %129 = trunc i32 %128 to i8
  %130 = getelementptr inbounds i8, i8* %0, i32 5
  store i8 %129, i8* %130, align 1, !tbaa !83
  %131 = load i32, i32* %122, align 4, !tbaa !5
  %132 = lshr i32 %131, 8
  %133 = trunc i32 %132 to i8
  %134 = getelementptr inbounds i8, i8* %0, i32 6
  store i8 %133, i8* %134, align 1, !tbaa !83
  %135 = load i32, i32* %122, align 4, !tbaa !5
  %136 = trunc i32 %135 to i8
  %137 = getelementptr inbounds i8, i8* %0, i32 7
  store i8 %136, i8* %137, align 1, !tbaa !83
  %138 = getelementptr inbounds %struct.SHA1_CTX, %struct.SHA1_CTX* %1, i32 0, i32 0, i32 2
  %139 = load i32, i32* %138, align 4, !tbaa !5
  %140 = lshr i32 %139, 24
  %141 = trunc i32 %140 to i8
  %142 = getelementptr inbounds i8, i8* %0, i32 8
  store i8 %141, i8* %142, align 1, !tbaa !83
  %143 = load i32, i32* %138, align 4, !tbaa !5
  %144 = lshr i32 %143, 16
  %145 = trunc i32 %144 to i8
  %146 = getelementptr inbounds i8, i8* %0, i32 9
  store i8 %145, i8* %146, align 1, !tbaa !83
  %147 = load i32, i32* %138, align 4, !tbaa !5
  %148 = lshr i32 %147, 8
  %149 = trunc i32 %148 to i8
  %150 = getelementptr inbounds i8, i8* %0, i32 10
  store i8 %149, i8* %150, align 1, !tbaa !83
  %151 = load i32, i32* %138, align 4, !tbaa !5
  %152 = trunc i32 %151 to i8
  %153 = getelementptr inbounds i8, i8* %0, i32 11
  store i8 %152, i8* %153, align 1, !tbaa !83
  %154 = getelementptr inbounds %struct.SHA1_CTX, %struct.SHA1_CTX* %1, i32 0, i32 0, i32 3
  %155 = load i32, i32* %154, align 4, !tbaa !5
  %156 = lshr i32 %155, 24
  %157 = trunc i32 %156 to i8
  %158 = getelementptr inbounds i8, i8* %0, i32 12
  store i8 %157, i8* %158, align 1, !tbaa !83
  %159 = load i32, i32* %154, align 4, !tbaa !5
  %160 = lshr i32 %159, 16
  %161 = trunc i32 %160 to i8
  %162 = getelementptr inbounds i8, i8* %0, i32 13
  store i8 %161, i8* %162, align 1, !tbaa !83
  %163 = load i32, i32* %154, align 4, !tbaa !5
  %164 = lshr i32 %163, 8
  %165 = trunc i32 %164 to i8
  %166 = getelementptr inbounds i8, i8* %0, i32 14
  store i8 %165, i8* %166, align 1, !tbaa !83
  %167 = load i32, i32* %154, align 4, !tbaa !5
  %168 = trunc i32 %167 to i8
  %169 = getelementptr inbounds i8, i8* %0, i32 15
  store i8 %168, i8* %169, align 1, !tbaa !83
  %170 = getelementptr inbounds %struct.SHA1_CTX, %struct.SHA1_CTX* %1, i32 0, i32 0, i32 4
  %171 = load i32, i32* %170, align 4, !tbaa !5
  %172 = lshr i32 %171, 24
  %173 = trunc i32 %172 to i8
  %174 = getelementptr inbounds i8, i8* %0, i32 16
  store i8 %173, i8* %174, align 1, !tbaa !83
  %175 = load i32, i32* %170, align 4, !tbaa !5
  %176 = lshr i32 %175, 16
  %177 = trunc i32 %176 to i8
  %178 = getelementptr inbounds i8, i8* %0, i32 17
  store i8 %177, i8* %178, align 1, !tbaa !83
  %179 = load i32, i32* %170, align 4, !tbaa !5
  %180 = lshr i32 %179, 8
  %181 = trunc i32 %180 to i8
  %182 = getelementptr inbounds i8, i8* %0, i32 18
  store i8 %181, i8* %182, align 1, !tbaa !83
  %183 = load i32, i32* %170, align 4, !tbaa !5
  %184 = trunc i32 %183 to i8
  %185 = getelementptr inbounds i8, i8* %0, i32 19
  store i8 %184, i8* %185, align 1, !tbaa !83
  %186 = bitcast %struct.SHA1_CTX* %1 to i8*
  tail call void @llvm.memset.p0i8.i32(i8* %186, i8 0, i32 92, i32 4, i1 false)
  call void @llvm.lifetime.end(i64 1, i8* nonnull %5) #6
  call void @llvm.lifetime.end(i64 8, i8* nonnull %6) #6
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start(i64, i8* nocapture) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly, i8, i32, i32, i1) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end(i64, i8* nocapture) #3

; Function Attrs: nounwind
define void @SHA1(i8* nocapture, i8* nocapture readonly, i32) local_unnamed_addr #0 {
  %4 = alloca %struct.SHA1_CTX, align 4
  %5 = bitcast %struct.SHA1_CTX* %4 to i8*
  call void @llvm.lifetime.start(i64 92, i8* nonnull %5) #6
  %6 = getelementptr inbounds %struct.SHA1_CTX, %struct.SHA1_CTX* %4, i32 0, i32 0, i32 0
  %7 = bitcast %struct.SHA1_CTX* %4 to <4 x i32>*
  store <4 x i32> <i32 1732584193, i32 -271733879, i32 -1732584194, i32 271733878>, <4 x i32>* %7, align 4, !tbaa !5
  %8 = getelementptr inbounds %struct.SHA1_CTX, %struct.SHA1_CTX* %4, i32 0, i32 0, i32 4
  store i32 -1009589776, i32* %8, align 4, !tbaa !5
  %9 = getelementptr inbounds %struct.SHA1_CTX, %struct.SHA1_CTX* %4, i32 0, i32 1, i32 1
  store i32 0, i32* %9, align 4, !tbaa !5
  %10 = getelementptr inbounds %struct.SHA1_CTX, %struct.SHA1_CTX* %4, i32 0, i32 1, i32 0
  store i32 0, i32* %10, align 4, !tbaa !5
  %11 = icmp eq i32 %2, 0
  br i1 %11, label %.loopexit, label %12

; <label>:12:                                     ; preds = %3
  %13 = getelementptr inbounds %struct.SHA1_CTX, %struct.SHA1_CTX* %4, i32 0, i32 2, i32 0
  %14 = getelementptr inbounds %struct.SHA1_CTX, %struct.SHA1_CTX* %4, i32 0, i32 2, i32 63
  br label %15

; <label>:15:                                     ; preds = %39, %12
  %16 = phi i32 [ 0, %12 ], [ %41, %39 ]
  %17 = phi i32 [ 0, %12 ], [ %40, %39 ]
  %18 = phi i32 [ 0, %12 ], [ %37, %39 ]
  %19 = getelementptr inbounds i8, i8* %1, i32 %18
  %20 = add i32 %17, 8
  store i32 %20, i32* %10, align 4, !tbaa !5
  %21 = icmp ugt i32 %17, -9
  br i1 %21, label %22, label %24

; <label>:22:                                     ; preds = %15
  %23 = add i32 %16, 1
  store i32 %23, i32* %9, align 4, !tbaa !5
  br label %24

; <label>:24:                                     ; preds = %22, %15
  %25 = phi i32 [ %23, %22 ], [ %16, %15 ]
  store i32 %25, i32* %9, align 4, !tbaa !5
  %26 = lshr i32 %17, 3
  %27 = and i32 %26, 63
  %28 = icmp eq i32 %27, 63
  br i1 %28, label %29, label %31

; <label>:29:                                     ; preds = %24
  %30 = load i8, i8* %19, align 1
  store i8 %30, i8* %14, align 1
  call void @SHA1Transform(i32* nonnull %6, i8* nonnull %13) #6
  br label %31

; <label>:31:                                     ; preds = %29, %24
  %32 = phi i32 [ 0, %24 ], [ 1, %29 ]
  %33 = phi i32 [ %27, %24 ], [ 0, %29 ]
  %34 = getelementptr inbounds %struct.SHA1_CTX, %struct.SHA1_CTX* %4, i32 0, i32 2, i32 %33
  %35 = getelementptr inbounds i8, i8* %19, i32 %32
  %36 = xor i32 %32, 1
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %34, i8* %35, i32 %36, i32 1, i1 false) #6
  %37 = add nuw i32 %18, 1
  %38 = icmp eq i32 %37, %2
  br i1 %38, label %.loopexit.loopexit, label %39, !llvm.loop !98

; <label>:39:                                     ; preds = %31
  %40 = load i32, i32* %10, align 4, !tbaa !5
  %41 = load i32, i32* %9, align 4, !tbaa !5
  br label %15

.loopexit.loopexit:                               ; preds = %31
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit, %3
  call void @SHA1Final(i8* %0, %struct.SHA1_CTX* nonnull %4)
  %42 = getelementptr inbounds i8, i8* %0, i32 20
  store i8 0, i8* %42, align 1, !tbaa !83
  call void @llvm.lifetime.end(i64 92, i8* nonnull %5) #6
  ret void
}

; Function Attrs: nounwind
define i32 @main() local_unnamed_addr #0 {
  %1 = alloca %struct.SHA1_CTX, align 4
  %2 = alloca %struct.SHA1_CTX, align 4
  %3 = alloca [21 x i8], align 1
  %4 = alloca [41 x i8], align 1
  %5 = alloca i32, align 4
  %6 = alloca [100 x [21 x i8]], align 1
  %7 = getelementptr inbounds [21 x i8], [21 x i8]* %3, i32 0, i32 0
  call void @llvm.lifetime.start(i64 21, i8* nonnull %7) #6
  %8 = getelementptr inbounds [41 x i8], [41 x i8]* %4, i32 0, i32 0
  call void @llvm.lifetime.start(i64 41, i8* nonnull %8) #6
  %9 = bitcast %struct.SHA1_CTX* %2 to i8*
  call void @llvm.lifetime.start(i64 92, i8* nonnull %9) #6
  %10 = getelementptr inbounds %struct.SHA1_CTX, %struct.SHA1_CTX* %2, i32 0, i32 0, i32 0
  %11 = bitcast %struct.SHA1_CTX* %2 to <4 x i32>*
  store <4 x i32> <i32 1732584193, i32 -271733879, i32 -1732584194, i32 271733878>, <4 x i32>* %11, align 4, !tbaa !5
  %12 = getelementptr inbounds %struct.SHA1_CTX, %struct.SHA1_CTX* %2, i32 0, i32 0, i32 4
  store i32 -1009589776, i32* %12, align 4, !tbaa !5
  %13 = getelementptr inbounds %struct.SHA1_CTX, %struct.SHA1_CTX* %2, i32 0, i32 1, i32 1
  store i32 0, i32* %13, align 4, !tbaa !5
  %14 = getelementptr inbounds %struct.SHA1_CTX, %struct.SHA1_CTX* %2, i32 0, i32 1, i32 0
  store i32 0, i32* %14, align 4, !tbaa !5
  %15 = getelementptr inbounds %struct.SHA1_CTX, %struct.SHA1_CTX* %2, i32 0, i32 2, i32 0
  %16 = getelementptr inbounds %struct.SHA1_CTX, %struct.SHA1_CTX* %2, i32 0, i32 2, i32 63
  br label %17

; <label>:17:                                     ; preds = %41, %0
  %18 = phi i32 [ 0, %0 ], [ %43, %41 ]
  %19 = phi i32 [ 0, %0 ], [ %42, %41 ]
  %20 = phi i32 [ 0, %0 ], [ %39, %41 ]
  %21 = getelementptr inbounds [4 x i8], [4 x i8]* @main.string, i32 0, i32 %20
  %22 = add i32 %19, 8
  store i32 %22, i32* %14, align 4, !tbaa !5
  %23 = icmp ugt i32 %19, -9
  br i1 %23, label %24, label %26

; <label>:24:                                     ; preds = %17
  %25 = add i32 %18, 1
  store i32 %25, i32* %13, align 4, !tbaa !5
  br label %26

; <label>:26:                                     ; preds = %24, %17
  %27 = phi i32 [ %25, %24 ], [ %18, %17 ]
  store i32 %27, i32* %13, align 4, !tbaa !5
  %28 = lshr i32 %19, 3
  %29 = and i32 %28, 63
  %30 = icmp eq i32 %29, 63
  br i1 %30, label %31, label %33

; <label>:31:                                     ; preds = %26
  %32 = load i8, i8* %21, align 1
  store i8 %32, i8* %16, align 1
  call void @SHA1Transform(i32* nonnull %10, i8* nonnull %15) #6
  br label %33

; <label>:33:                                     ; preds = %31, %26
  %34 = phi i32 [ 0, %26 ], [ 1, %31 ]
  %35 = phi i32 [ %29, %26 ], [ 0, %31 ]
  %36 = getelementptr inbounds %struct.SHA1_CTX, %struct.SHA1_CTX* %2, i32 0, i32 2, i32 %35
  %37 = getelementptr inbounds i8, i8* %21, i32 %34
  %38 = xor i32 %34, 1
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %36, i8* %37, i32 %38, i32 1, i1 false) #6
  %39 = add nuw i32 %20, 1
  %40 = icmp eq i32 %39, 3
  br i1 %40, label %SHA1.exit, label %41, !llvm.loop !98

; <label>:41:                                     ; preds = %33
  %42 = load i32, i32* %14, align 4, !tbaa !5
  %43 = load i32, i32* %13, align 4, !tbaa !5
  br label %17

SHA1.exit:                                        ; preds = %33
  call void @SHA1Final(i8* nonnull %7, %struct.SHA1_CTX* nonnull %2) #6
  %44 = getelementptr inbounds [21 x i8], [21 x i8]* %3, i32 0, i32 20
  store i8 0, i8* %44, align 1, !tbaa !83
  call void @llvm.lifetime.end(i64 92, i8* nonnull %9) #6
  %45 = load i8, i8* %7, align 1, !tbaa !83
  %46 = zext i8 %45 to i32
  %47 = call i32 (i8*, i8*, ...) @sprintf(i8* nonnull %8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i32 %46) #6
  %48 = getelementptr inbounds [41 x i8], [41 x i8]* %4, i32 0, i32 2
  %49 = getelementptr inbounds [21 x i8], [21 x i8]* %3, i32 0, i32 1
  %50 = load i8, i8* %49, align 1, !tbaa !83
  %51 = zext i8 %50 to i32
  %52 = call i32 (i8*, i8*, ...) @sprintf(i8* %48, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i32 %51) #6
  %53 = getelementptr inbounds [41 x i8], [41 x i8]* %4, i32 0, i32 4
  %54 = getelementptr inbounds [21 x i8], [21 x i8]* %3, i32 0, i32 2
  %55 = load i8, i8* %54, align 1, !tbaa !83
  %56 = zext i8 %55 to i32
  %57 = call i32 (i8*, i8*, ...) @sprintf(i8* %53, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i32 %56) #6
  %58 = getelementptr inbounds [41 x i8], [41 x i8]* %4, i32 0, i32 6
  %59 = getelementptr inbounds [21 x i8], [21 x i8]* %3, i32 0, i32 3
  %60 = load i8, i8* %59, align 1, !tbaa !83
  %61 = zext i8 %60 to i32
  %62 = call i32 (i8*, i8*, ...) @sprintf(i8* %58, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i32 %61) #6
  %63 = getelementptr inbounds [41 x i8], [41 x i8]* %4, i32 0, i32 8
  %64 = getelementptr inbounds [21 x i8], [21 x i8]* %3, i32 0, i32 4
  %65 = load i8, i8* %64, align 1, !tbaa !83
  %66 = zext i8 %65 to i32
  %67 = call i32 (i8*, i8*, ...) @sprintf(i8* %63, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i32 %66) #6
  %68 = getelementptr inbounds [41 x i8], [41 x i8]* %4, i32 0, i32 10
  %69 = getelementptr inbounds [21 x i8], [21 x i8]* %3, i32 0, i32 5
  %70 = load i8, i8* %69, align 1, !tbaa !83
  %71 = zext i8 %70 to i32
  %72 = call i32 (i8*, i8*, ...) @sprintf(i8* %68, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i32 %71) #6
  %73 = getelementptr inbounds [41 x i8], [41 x i8]* %4, i32 0, i32 12
  %74 = getelementptr inbounds [21 x i8], [21 x i8]* %3, i32 0, i32 6
  %75 = load i8, i8* %74, align 1, !tbaa !83
  %76 = zext i8 %75 to i32
  %77 = call i32 (i8*, i8*, ...) @sprintf(i8* %73, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i32 %76) #6
  %78 = getelementptr inbounds [41 x i8], [41 x i8]* %4, i32 0, i32 14
  %79 = getelementptr inbounds [21 x i8], [21 x i8]* %3, i32 0, i32 7
  %80 = load i8, i8* %79, align 1, !tbaa !83
  %81 = zext i8 %80 to i32
  %82 = call i32 (i8*, i8*, ...) @sprintf(i8* %78, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i32 %81) #6
  %83 = getelementptr inbounds [41 x i8], [41 x i8]* %4, i32 0, i32 16
  %84 = getelementptr inbounds [21 x i8], [21 x i8]* %3, i32 0, i32 8
  %85 = load i8, i8* %84, align 1, !tbaa !83
  %86 = zext i8 %85 to i32
  %87 = call i32 (i8*, i8*, ...) @sprintf(i8* %83, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i32 %86) #6
  %88 = getelementptr inbounds [41 x i8], [41 x i8]* %4, i32 0, i32 18
  %89 = getelementptr inbounds [21 x i8], [21 x i8]* %3, i32 0, i32 9
  %90 = load i8, i8* %89, align 1, !tbaa !83
  %91 = zext i8 %90 to i32
  %92 = call i32 (i8*, i8*, ...) @sprintf(i8* %88, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i32 %91) #6
  %93 = getelementptr inbounds [41 x i8], [41 x i8]* %4, i32 0, i32 20
  %94 = getelementptr inbounds [21 x i8], [21 x i8]* %3, i32 0, i32 10
  %95 = load i8, i8* %94, align 1, !tbaa !83
  %96 = zext i8 %95 to i32
  %97 = call i32 (i8*, i8*, ...) @sprintf(i8* %93, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i32 %96) #6
  %98 = getelementptr inbounds [41 x i8], [41 x i8]* %4, i32 0, i32 22
  %99 = getelementptr inbounds [21 x i8], [21 x i8]* %3, i32 0, i32 11
  %100 = load i8, i8* %99, align 1, !tbaa !83
  %101 = zext i8 %100 to i32
  %102 = call i32 (i8*, i8*, ...) @sprintf(i8* %98, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i32 %101) #6
  %103 = getelementptr inbounds [41 x i8], [41 x i8]* %4, i32 0, i32 24
  %104 = getelementptr inbounds [21 x i8], [21 x i8]* %3, i32 0, i32 12
  %105 = load i8, i8* %104, align 1, !tbaa !83
  %106 = zext i8 %105 to i32
  %107 = call i32 (i8*, i8*, ...) @sprintf(i8* %103, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i32 %106) #6
  %108 = getelementptr inbounds [41 x i8], [41 x i8]* %4, i32 0, i32 26
  %109 = getelementptr inbounds [21 x i8], [21 x i8]* %3, i32 0, i32 13
  %110 = load i8, i8* %109, align 1, !tbaa !83
  %111 = zext i8 %110 to i32
  %112 = call i32 (i8*, i8*, ...) @sprintf(i8* %108, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i32 %111) #6
  %113 = getelementptr inbounds [41 x i8], [41 x i8]* %4, i32 0, i32 28
  %114 = getelementptr inbounds [21 x i8], [21 x i8]* %3, i32 0, i32 14
  %115 = load i8, i8* %114, align 1, !tbaa !83
  %116 = zext i8 %115 to i32
  %117 = call i32 (i8*, i8*, ...) @sprintf(i8* %113, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i32 %116) #6
  %118 = getelementptr inbounds [41 x i8], [41 x i8]* %4, i32 0, i32 30
  %119 = getelementptr inbounds [21 x i8], [21 x i8]* %3, i32 0, i32 15
  %120 = load i8, i8* %119, align 1, !tbaa !83
  %121 = zext i8 %120 to i32
  %122 = call i32 (i8*, i8*, ...) @sprintf(i8* %118, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i32 %121) #6
  %123 = getelementptr inbounds [41 x i8], [41 x i8]* %4, i32 0, i32 32
  %124 = getelementptr inbounds [21 x i8], [21 x i8]* %3, i32 0, i32 16
  %125 = load i8, i8* %124, align 1, !tbaa !83
  %126 = zext i8 %125 to i32
  %127 = call i32 (i8*, i8*, ...) @sprintf(i8* %123, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i32 %126) #6
  %128 = getelementptr inbounds [41 x i8], [41 x i8]* %4, i32 0, i32 34
  %129 = getelementptr inbounds [21 x i8], [21 x i8]* %3, i32 0, i32 17
  %130 = load i8, i8* %129, align 1, !tbaa !83
  %131 = zext i8 %130 to i32
  %132 = call i32 (i8*, i8*, ...) @sprintf(i8* %128, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i32 %131) #6
  %133 = getelementptr inbounds [41 x i8], [41 x i8]* %4, i32 0, i32 36
  %134 = getelementptr inbounds [21 x i8], [21 x i8]* %3, i32 0, i32 18
  %135 = load i8, i8* %134, align 1, !tbaa !83
  %136 = zext i8 %135 to i32
  %137 = call i32 (i8*, i8*, ...) @sprintf(i8* %133, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i32 %136) #6
  %138 = getelementptr inbounds [41 x i8], [41 x i8]* %4, i32 0, i32 38
  %139 = getelementptr inbounds [21 x i8], [21 x i8]* %3, i32 0, i32 19
  %140 = load i8, i8* %139, align 1, !tbaa !83
  %141 = zext i8 %140 to i32
  %142 = call i32 (i8*, i8*, ...) @sprintf(i8* %138, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i32 %141) #6
  %143 = call i32 @strncmp(i8* nonnull %8, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @main.expect, i32 0, i32 0), i32 40) #8
  %144 = icmp eq i32 %143, 0
  br i1 %144, label %147, label %145

; <label>:145:                                    ; preds = %SHA1.exit
  %146 = tail call i32 @puts(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str, i32 0, i32 0))
  br label %360

; <label>:147:                                    ; preds = %SHA1.exit
  %148 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start(i64 4, i8* nonnull %148) #6
  %149 = call i32 @time(i32* nonnull %5) #6
  call void @srand(i32 %149) #6
  %150 = getelementptr inbounds [100 x [21 x i8]], [100 x [21 x i8]]* %6, i32 0, i32 0, i32 0
  call void @llvm.lifetime.start(i64 2100, i8* nonnull %150) #6
  br label %151

; <label>:151:                                    ; preds = %151, %147
  %152 = phi i32 [ 0, %147 ], [ %254, %151 ]
  %153 = call i32 @rand() #6
  %154 = srem i32 %153, 26
  %155 = add nsw i32 %154, 97
  %156 = trunc i32 %155 to i8
  %157 = getelementptr inbounds [100 x [21 x i8]], [100 x [21 x i8]]* %6, i32 0, i32 %152, i32 0
  store i8 %156, i8* %157, align 1, !tbaa !83
  %158 = call i32 @rand() #6
  %159 = srem i32 %158, 26
  %160 = add nsw i32 %159, 97
  %161 = trunc i32 %160 to i8
  %162 = getelementptr inbounds [100 x [21 x i8]], [100 x [21 x i8]]* %6, i32 0, i32 %152, i32 1
  store i8 %161, i8* %162, align 1, !tbaa !83
  %163 = call i32 @rand() #6
  %164 = srem i32 %163, 26
  %165 = add nsw i32 %164, 97
  %166 = trunc i32 %165 to i8
  %167 = getelementptr inbounds [100 x [21 x i8]], [100 x [21 x i8]]* %6, i32 0, i32 %152, i32 2
  store i8 %166, i8* %167, align 1, !tbaa !83
  %168 = call i32 @rand() #6
  %169 = srem i32 %168, 26
  %170 = add nsw i32 %169, 97
  %171 = trunc i32 %170 to i8
  %172 = getelementptr inbounds [100 x [21 x i8]], [100 x [21 x i8]]* %6, i32 0, i32 %152, i32 3
  store i8 %171, i8* %172, align 1, !tbaa !83
  %173 = call i32 @rand() #6
  %174 = srem i32 %173, 26
  %175 = add nsw i32 %174, 97
  %176 = trunc i32 %175 to i8
  %177 = getelementptr inbounds [100 x [21 x i8]], [100 x [21 x i8]]* %6, i32 0, i32 %152, i32 4
  store i8 %176, i8* %177, align 1, !tbaa !83
  %178 = call i32 @rand() #6
  %179 = srem i32 %178, 26
  %180 = add nsw i32 %179, 97
  %181 = trunc i32 %180 to i8
  %182 = getelementptr inbounds [100 x [21 x i8]], [100 x [21 x i8]]* %6, i32 0, i32 %152, i32 5
  store i8 %181, i8* %182, align 1, !tbaa !83
  %183 = call i32 @rand() #6
  %184 = srem i32 %183, 26
  %185 = add nsw i32 %184, 97
  %186 = trunc i32 %185 to i8
  %187 = getelementptr inbounds [100 x [21 x i8]], [100 x [21 x i8]]* %6, i32 0, i32 %152, i32 6
  store i8 %186, i8* %187, align 1, !tbaa !83
  %188 = call i32 @rand() #6
  %189 = srem i32 %188, 26
  %190 = add nsw i32 %189, 97
  %191 = trunc i32 %190 to i8
  %192 = getelementptr inbounds [100 x [21 x i8]], [100 x [21 x i8]]* %6, i32 0, i32 %152, i32 7
  store i8 %191, i8* %192, align 1, !tbaa !83
  %193 = call i32 @rand() #6
  %194 = srem i32 %193, 26
  %195 = add nsw i32 %194, 97
  %196 = trunc i32 %195 to i8
  %197 = getelementptr inbounds [100 x [21 x i8]], [100 x [21 x i8]]* %6, i32 0, i32 %152, i32 8
  store i8 %196, i8* %197, align 1, !tbaa !83
  %198 = call i32 @rand() #6
  %199 = srem i32 %198, 26
  %200 = add nsw i32 %199, 97
  %201 = trunc i32 %200 to i8
  %202 = getelementptr inbounds [100 x [21 x i8]], [100 x [21 x i8]]* %6, i32 0, i32 %152, i32 9
  store i8 %201, i8* %202, align 1, !tbaa !83
  %203 = call i32 @rand() #6
  %204 = srem i32 %203, 26
  %205 = add nsw i32 %204, 97
  %206 = trunc i32 %205 to i8
  %207 = getelementptr inbounds [100 x [21 x i8]], [100 x [21 x i8]]* %6, i32 0, i32 %152, i32 10
  store i8 %206, i8* %207, align 1, !tbaa !83
  %208 = call i32 @rand() #6
  %209 = srem i32 %208, 26
  %210 = add nsw i32 %209, 97
  %211 = trunc i32 %210 to i8
  %212 = getelementptr inbounds [100 x [21 x i8]], [100 x [21 x i8]]* %6, i32 0, i32 %152, i32 11
  store i8 %211, i8* %212, align 1, !tbaa !83
  %213 = call i32 @rand() #6
  %214 = srem i32 %213, 26
  %215 = add nsw i32 %214, 97
  %216 = trunc i32 %215 to i8
  %217 = getelementptr inbounds [100 x [21 x i8]], [100 x [21 x i8]]* %6, i32 0, i32 %152, i32 12
  store i8 %216, i8* %217, align 1, !tbaa !83
  %218 = call i32 @rand() #6
  %219 = srem i32 %218, 26
  %220 = add nsw i32 %219, 97
  %221 = trunc i32 %220 to i8
  %222 = getelementptr inbounds [100 x [21 x i8]], [100 x [21 x i8]]* %6, i32 0, i32 %152, i32 13
  store i8 %221, i8* %222, align 1, !tbaa !83
  %223 = call i32 @rand() #6
  %224 = srem i32 %223, 26
  %225 = add nsw i32 %224, 97
  %226 = trunc i32 %225 to i8
  %227 = getelementptr inbounds [100 x [21 x i8]], [100 x [21 x i8]]* %6, i32 0, i32 %152, i32 14
  store i8 %226, i8* %227, align 1, !tbaa !83
  %228 = call i32 @rand() #6
  %229 = srem i32 %228, 26
  %230 = add nsw i32 %229, 97
  %231 = trunc i32 %230 to i8
  %232 = getelementptr inbounds [100 x [21 x i8]], [100 x [21 x i8]]* %6, i32 0, i32 %152, i32 15
  store i8 %231, i8* %232, align 1, !tbaa !83
  %233 = call i32 @rand() #6
  %234 = srem i32 %233, 26
  %235 = add nsw i32 %234, 97
  %236 = trunc i32 %235 to i8
  %237 = getelementptr inbounds [100 x [21 x i8]], [100 x [21 x i8]]* %6, i32 0, i32 %152, i32 16
  store i8 %236, i8* %237, align 1, !tbaa !83
  %238 = call i32 @rand() #6
  %239 = srem i32 %238, 26
  %240 = add nsw i32 %239, 97
  %241 = trunc i32 %240 to i8
  %242 = getelementptr inbounds [100 x [21 x i8]], [100 x [21 x i8]]* %6, i32 0, i32 %152, i32 17
  store i8 %241, i8* %242, align 1, !tbaa !83
  %243 = call i32 @rand() #6
  %244 = srem i32 %243, 26
  %245 = add nsw i32 %244, 97
  %246 = trunc i32 %245 to i8
  %247 = getelementptr inbounds [100 x [21 x i8]], [100 x [21 x i8]]* %6, i32 0, i32 %152, i32 18
  store i8 %246, i8* %247, align 1, !tbaa !83
  %248 = call i32 @rand() #6
  %249 = srem i32 %248, 26
  %250 = add nsw i32 %249, 97
  %251 = trunc i32 %250 to i8
  %252 = getelementptr inbounds [100 x [21 x i8]], [100 x [21 x i8]]* %6, i32 0, i32 %152, i32 19
  store i8 %251, i8* %252, align 1, !tbaa !83
  %253 = getelementptr inbounds [100 x [21 x i8]], [100 x [21 x i8]]* %6, i32 0, i32 %152, i32 20
  store i8 0, i8* %253, align 1, !tbaa !83
  %254 = add nuw nsw i32 %152, 1
  %255 = icmp eq i32 %254, 100
  br i1 %255, label %.preheader, label %151, !llvm.loop !115

.preheader:                                       ; preds = %151
  %256 = bitcast %struct.SHA1_CTX* %1 to i8*
  %257 = getelementptr inbounds %struct.SHA1_CTX, %struct.SHA1_CTX* %1, i32 0, i32 0, i32 0
  %258 = bitcast %struct.SHA1_CTX* %1 to <4 x i32>*
  %259 = getelementptr inbounds %struct.SHA1_CTX, %struct.SHA1_CTX* %1, i32 0, i32 0, i32 4
  %260 = getelementptr inbounds %struct.SHA1_CTX, %struct.SHA1_CTX* %1, i32 0, i32 1, i32 1
  %261 = getelementptr inbounds %struct.SHA1_CTX, %struct.SHA1_CTX* %1, i32 0, i32 1, i32 0
  %262 = getelementptr inbounds %struct.SHA1_CTX, %struct.SHA1_CTX* %1, i32 0, i32 2, i32 0
  %263 = getelementptr inbounds %struct.SHA1_CTX, %struct.SHA1_CTX* %1, i32 0, i32 2, i32 63
  br label %264

; <label>:264:                                    ; preds = %SHA1.exit1, %.preheader
  %265 = phi i32 [ %356, %SHA1.exit1 ], [ 0, %.preheader ]
  %266 = getelementptr inbounds [100 x [21 x i8]], [100 x [21 x i8]]* %6, i32 0, i32 %265, i32 0
  %267 = call i32 @strlen(i8* %266) #8
  call void @llvm.lifetime.start(i64 92, i8* nonnull %256) #6
  store <4 x i32> <i32 1732584193, i32 -271733879, i32 -1732584194, i32 271733878>, <4 x i32>* %258, align 4, !tbaa !5
  store i32 -1009589776, i32* %259, align 4, !tbaa !5
  store i32 0, i32* %260, align 4, !tbaa !5
  store i32 0, i32* %261, align 4, !tbaa !5
  %268 = icmp eq i32 %267, 0
  br i1 %268, label %SHA1.exit1, label %.preheader2.preheader

.preheader2.preheader:                            ; preds = %264
  br label %.preheader2

.preheader2:                                      ; preds = %292, %.preheader2.preheader
  %269 = phi i32 [ %294, %292 ], [ 0, %.preheader2.preheader ]
  %270 = phi i32 [ %293, %292 ], [ 0, %.preheader2.preheader ]
  %271 = phi i32 [ %290, %292 ], [ 0, %.preheader2.preheader ]
  %272 = getelementptr inbounds [100 x [21 x i8]], [100 x [21 x i8]]* %6, i32 0, i32 %265, i32 %271
  %273 = add i32 %270, 8
  store i32 %273, i32* %261, align 4, !tbaa !5
  %274 = icmp ugt i32 %270, -9
  br i1 %274, label %275, label %277

; <label>:275:                                    ; preds = %.preheader2
  %276 = add i32 %269, 1
  store i32 %276, i32* %260, align 4, !tbaa !5
  br label %277

; <label>:277:                                    ; preds = %275, %.preheader2
  %278 = phi i32 [ %276, %275 ], [ %269, %.preheader2 ]
  store i32 %278, i32* %260, align 4, !tbaa !5
  %279 = lshr i32 %270, 3
  %280 = and i32 %279, 63
  %281 = icmp eq i32 %280, 63
  br i1 %281, label %282, label %284

; <label>:282:                                    ; preds = %277
  %283 = load i8, i8* %272, align 1
  store i8 %283, i8* %263, align 1
  call void @SHA1Transform(i32* nonnull %257, i8* nonnull %262) #6
  br label %284

; <label>:284:                                    ; preds = %282, %277
  %285 = phi i32 [ 0, %277 ], [ 1, %282 ]
  %286 = phi i32 [ %280, %277 ], [ 0, %282 ]
  %287 = getelementptr inbounds %struct.SHA1_CTX, %struct.SHA1_CTX* %1, i32 0, i32 2, i32 %286
  %288 = getelementptr inbounds i8, i8* %272, i32 %285
  %289 = xor i32 %285, 1
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %287, i8* %288, i32 %289, i32 1, i1 false) #6
  %290 = add nuw i32 %271, 1
  %291 = icmp eq i32 %290, %267
  br i1 %291, label %SHA1.exit1.loopexit, label %292, !llvm.loop !98

; <label>:292:                                    ; preds = %284
  %293 = load i32, i32* %261, align 4, !tbaa !5
  %294 = load i32, i32* %260, align 4, !tbaa !5
  br label %.preheader2

SHA1.exit1.loopexit:                              ; preds = %284
  br label %SHA1.exit1

SHA1.exit1:                                       ; preds = %SHA1.exit1.loopexit, %264
  call void @SHA1Final(i8* nonnull %7, %struct.SHA1_CTX* nonnull %1) #6
  store i8 0, i8* %44, align 1, !tbaa !83
  call void @llvm.lifetime.end(i64 92, i8* nonnull %256) #6
  %295 = load i8, i8* %7, align 1, !tbaa !83
  %296 = zext i8 %295 to i32
  %297 = call i32 (i8*, i8*, ...) @sprintf(i8* nonnull %8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i32 %296) #6
  %298 = load i8, i8* %49, align 1, !tbaa !83
  %299 = zext i8 %298 to i32
  %300 = call i32 (i8*, i8*, ...) @sprintf(i8* %48, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i32 %299) #6
  %301 = load i8, i8* %54, align 1, !tbaa !83
  %302 = zext i8 %301 to i32
  %303 = call i32 (i8*, i8*, ...) @sprintf(i8* %53, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i32 %302) #6
  %304 = load i8, i8* %59, align 1, !tbaa !83
  %305 = zext i8 %304 to i32
  %306 = call i32 (i8*, i8*, ...) @sprintf(i8* %58, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i32 %305) #6
  %307 = load i8, i8* %64, align 1, !tbaa !83
  %308 = zext i8 %307 to i32
  %309 = call i32 (i8*, i8*, ...) @sprintf(i8* %63, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i32 %308) #6
  %310 = load i8, i8* %69, align 1, !tbaa !83
  %311 = zext i8 %310 to i32
  %312 = call i32 (i8*, i8*, ...) @sprintf(i8* %68, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i32 %311) #6
  %313 = load i8, i8* %74, align 1, !tbaa !83
  %314 = zext i8 %313 to i32
  %315 = call i32 (i8*, i8*, ...) @sprintf(i8* %73, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i32 %314) #6
  %316 = load i8, i8* %79, align 1, !tbaa !83
  %317 = zext i8 %316 to i32
  %318 = call i32 (i8*, i8*, ...) @sprintf(i8* %78, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i32 %317) #6
  %319 = load i8, i8* %84, align 1, !tbaa !83
  %320 = zext i8 %319 to i32
  %321 = call i32 (i8*, i8*, ...) @sprintf(i8* %83, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i32 %320) #6
  %322 = load i8, i8* %89, align 1, !tbaa !83
  %323 = zext i8 %322 to i32
  %324 = call i32 (i8*, i8*, ...) @sprintf(i8* %88, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i32 %323) #6
  %325 = load i8, i8* %94, align 1, !tbaa !83
  %326 = zext i8 %325 to i32
  %327 = call i32 (i8*, i8*, ...) @sprintf(i8* %93, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i32 %326) #6
  %328 = load i8, i8* %99, align 1, !tbaa !83
  %329 = zext i8 %328 to i32
  %330 = call i32 (i8*, i8*, ...) @sprintf(i8* %98, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i32 %329) #6
  %331 = load i8, i8* %104, align 1, !tbaa !83
  %332 = zext i8 %331 to i32
  %333 = call i32 (i8*, i8*, ...) @sprintf(i8* %103, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i32 %332) #6
  %334 = load i8, i8* %109, align 1, !tbaa !83
  %335 = zext i8 %334 to i32
  %336 = call i32 (i8*, i8*, ...) @sprintf(i8* %108, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i32 %335) #6
  %337 = load i8, i8* %114, align 1, !tbaa !83
  %338 = zext i8 %337 to i32
  %339 = call i32 (i8*, i8*, ...) @sprintf(i8* %113, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i32 %338) #6
  %340 = load i8, i8* %119, align 1, !tbaa !83
  %341 = zext i8 %340 to i32
  %342 = call i32 (i8*, i8*, ...) @sprintf(i8* %118, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i32 %341) #6
  %343 = load i8, i8* %124, align 1, !tbaa !83
  %344 = zext i8 %343 to i32
  %345 = call i32 (i8*, i8*, ...) @sprintf(i8* %123, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i32 %344) #6
  %346 = load i8, i8* %129, align 1, !tbaa !83
  %347 = zext i8 %346 to i32
  %348 = call i32 (i8*, i8*, ...) @sprintf(i8* %128, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i32 %347) #6
  %349 = load i8, i8* %134, align 1, !tbaa !83
  %350 = zext i8 %349 to i32
  %351 = call i32 (i8*, i8*, ...) @sprintf(i8* %133, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i32 %350) #6
  %352 = load i8, i8* %139, align 1, !tbaa !83
  %353 = zext i8 %352 to i32
  %354 = call i32 (i8*, i8*, ...) @sprintf(i8* %138, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i32 %353) #6
  %355 = call i32 @puts(i8* nonnull %8)
  %356 = add nuw nsw i32 %265, 1
  %357 = icmp eq i32 %356, 100
  br i1 %357, label %358, label %264, !llvm.loop !157

; <label>:358:                                    ; preds = %SHA1.exit1
  %359 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.3, i32 0, i32 0), i32 100)
  call void @llvm.lifetime.end(i64 2100, i8* nonnull %150) #6
  call void @llvm.lifetime.end(i64 4, i8* nonnull %148) #6
  br label %360

; <label>:360:                                    ; preds = %358, %145
  call void @llvm.lifetime.end(i64 41, i8* nonnull %8) #6
  call void @llvm.lifetime.end(i64 21, i8* nonnull %7) #6
  ret i32 0
}

; Function Attrs: nounwind
declare i32 @sprintf(i8* nocapture, i8* nocapture readonly, ...) local_unnamed_addr #4

; Function Attrs: nounwind readonly
declare i32 @strncmp(i8* nocapture, i8* nocapture, i32) local_unnamed_addr #5

; Function Attrs: nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #6

; Function Attrs: nounwind
declare i32 @time(i32*) local_unnamed_addr #4

; Function Attrs: nounwind
declare void @srand(i32) local_unnamed_addr #4

; Function Attrs: nounwind
declare i32 @rand() local_unnamed_addr #4

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* nocapture) local_unnamed_addr #5

; Function Attrs: nounwind
declare i32 @printf(i8* nocapture readonly, ...) local_unnamed_addr #4

; Function Attrs: nounwind
define i32 @initializeParameters(i32) local_unnamed_addr #0 {
  %2 = alloca [25 x i8], align 1
  %3 = alloca [20 x i8], align 1
  %4 = alloca [40 x i8], align 1
  %5 = alloca [40 x i8], align 1
  %6 = alloca [40 x i8], align 1
  %7 = alloca [40 x i8], align 1
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca [40 x i8], align 1
  %13 = alloca i32, align 4
  %14 = load i32*, i32** @initCGRA, align 4, !tbaa !160
  %15 = add i32 %0, -1
  %16 = mul i32 %15, 7
  %17 = getelementptr inbounds i32, i32* %14, i32 %16
  store i32 2011168768, i32* %17, align 4, !tbaa !5
  %18 = getelementptr inbounds i32, i32* %17, i32 1
  store i32 2011168768, i32* %18, align 4, !tbaa !5
  %19 = getelementptr inbounds i32, i32* %17, i32 2
  %20 = getelementptr inbounds [25 x i8], [25 x i8]* %2, i32 0, i32 0
  %21 = bitcast i32* %19 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* %21, i8 0, i64 20, i32 4, i1 false)
  call void @llvm.lifetime.start(i64 25, i8* nonnull %20) #6
  %22 = getelementptr inbounds [20 x i8], [20 x i8]* %3, i32 0, i32 0
  call void @llvm.lifetime.start(i64 20, i8* nonnull %22) #6
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* nonnull %22, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @configureCGRA.directoryPath, i32 0, i32 0), i32 20, i32 1, i1 false)
  %23 = call i32 (i8*, i8*, ...) @sprintf(i8* nonnull %20, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 %0) #6
  %24 = call i8* @strcat(i8* nonnull %22, i8* nonnull %20) #6
  %25 = getelementptr inbounds [40 x i8], [40 x i8]* %4, i32 0, i32 0
  call void @llvm.lifetime.start(i64 40, i8* nonnull %25) #6
  call void @llvm.memset.p0i8.i32(i8* nonnull %25, i8 0, i32 40, i32 1, i1 false)
  %26 = getelementptr inbounds [40 x i8], [40 x i8]* %5, i32 0, i32 0
  call void @llvm.lifetime.start(i64 40, i8* nonnull %26) #6
  call void @llvm.memset.p0i8.i32(i8* nonnull %26, i8 0, i32 40, i32 1, i1 false)
  %27 = getelementptr inbounds [40 x i8], [40 x i8]* %6, i32 0, i32 0
  call void @llvm.lifetime.start(i64 40, i8* nonnull %27) #6
  call void @llvm.memset.p0i8.i32(i8* nonnull %27, i8 0, i32 40, i32 1, i1 false)
  %28 = getelementptr inbounds [40 x i8], [40 x i8]* %7, i32 0, i32 0
  call void @llvm.lifetime.start(i64 40, i8* nonnull %28) #6
  call void @llvm.memset.p0i8.i32(i8* nonnull %28, i8 0, i32 40, i32 1, i1 false)
  %29 = call i8* @strcat(i8* nonnull %25, i8* nonnull %22) #6
  %30 = call i32 @strlen(i8* nonnull %25)
  %31 = getelementptr [40 x i8], [40 x i8]* %4, i32 0, i32 %30
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %31, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1.2, i32 0, i32 0), i32 16, i32 1, i1 false)
  %32 = call i8* @strcat(i8* nonnull %26, i8* nonnull %22) #6
  %33 = call i32 @strlen(i8* nonnull %26)
  %34 = getelementptr [40 x i8], [40 x i8]* %5, i32 0, i32 %33
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %34, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i32 0, i32 0), i32 16, i32 1, i1 false)
  %35 = call i8* @strcat(i8* nonnull %27, i8* nonnull %22) #6
  %36 = call i32 @strlen(i8* nonnull %27)
  %37 = getelementptr [40 x i8], [40 x i8]* %6, i32 0, i32 %36
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %37, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.3.3, i32 0, i32 0), i32 16, i32 1, i1 false)
  %38 = call %struct._IO_FILE* @fopen(i8* nonnull %25, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0))
  %39 = call %struct._IO_FILE* @fopen(i8* nonnull %26, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0))
  %40 = call %struct._IO_FILE* @fopen(i8* nonnull %27, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0))
  %41 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start(i64 4, i8* nonnull %41) #6
  %42 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start(i64 4, i8* nonnull %42) #6
  %43 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start(i64 4, i8* nonnull %43) #6
  %44 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.start(i64 4, i8* nonnull %44) #6
  %45 = call i32 @fread(i8* nonnull %41, i32 4, i32 1, %struct._IO_FILE* %38)
  %46 = call i32 @fread(i8* nonnull %42, i32 4, i32 1, %struct._IO_FILE* %39)
  %47 = call i32 @fread(i8* nonnull %43, i32 4, i32 1, %struct._IO_FILE* %40)
  %48 = load i32, i32* %8, align 4, !tbaa !5
  %49 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.5, i32 0, i32 0), i32 %48)
  %50 = load i32, i32* %9, align 4, !tbaa !5
  %51 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.6, i32 0, i32 0), i32 %50)
  %52 = load i32, i32* %10, align 4, !tbaa !5
  %53 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.7, i32 0, i32 0), i32 %52)
  %54 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.8, i32 0, i32 0), i32 4)
  %55 = shl i32 %48, 2
  %56 = call noalias i8* @malloc(i32 %55) #6
  store i8* %56, i8** bitcast (i32** @epilog to i8**), align 4, !tbaa !160
  %57 = shl i32 %50, 2
  %58 = call noalias i8* @malloc(i32 %57) #6
  store i8* %58, i8** bitcast (i32** @prolog to i8**), align 4, !tbaa !160
  %59 = shl i32 %52, 2
  %60 = call noalias i8* @malloc(i32 %59) #6
  store i8* %60, i8** bitcast (i32** @kernel to i8**), align 4, !tbaa !160
  %61 = call i32 @fread(i8* %56, i32 4, i32 %48, %struct._IO_FILE* %38)
  %62 = load i8*, i8** bitcast (i32** @prolog to i8**), align 4, !tbaa !160
  %63 = call i32 @fread(i8* %62, i32 4, i32 %50, %struct._IO_FILE* %39)
  %64 = load i8*, i8** bitcast (i32** @kernel to i8**), align 4, !tbaa !160
  %65 = call i32 @fread(i8* %64, i32 4, i32 %52, %struct._IO_FILE* %40)
  %66 = call i8* @strcat(i8* nonnull %28, i8* nonnull %22) #6
  %67 = call i32 @strlen(i8* nonnull %28)
  %68 = getelementptr [40 x i8], [40 x i8]* %7, i32 0, i32 %67
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %68, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.9, i32 0, i32 0), i32 26, i32 1, i1 false)
  %69 = call %struct._IO_FILE* @fopen(i8* nonnull %28, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i32 0, i32 0))
  %70 = call i32 (%struct._IO_FILE*, i8*, ...) @__isoc99_fscanf(%struct._IO_FILE* %69, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32* nonnull %11) #6
  %71 = sdiv i32 %52, 16
  %72 = sdiv i32 %48, 16
  %73 = sdiv i32 %50, 16
  %74 = load i32*, i32** @initCGRA, align 4, !tbaa !160
  %75 = getelementptr inbounds i32, i32* %74, i32 %16
  %76 = getelementptr inbounds i32, i32* %75, i32 2
  store i32 %71, i32* %76, align 4, !tbaa !5
  %77 = getelementptr inbounds i32, i32* %75, i32 3
  store i32 %72, i32* %77, align 4, !tbaa !5
  %78 = getelementptr inbounds i32, i32* %75, i32 4
  store i32 %73, i32* %78, align 4, !tbaa !5
  %79 = load i32, i32* %11, align 4, !tbaa !5
  %80 = sdiv i32 %79, 16
  %81 = getelementptr inbounds i32, i32* %75, i32 6
  store i32 %80, i32* %81, align 4, !tbaa !5
  %82 = call i32 @fclose(%struct._IO_FILE* %38)
  %83 = call i32 @fclose(%struct._IO_FILE* %39)
  %84 = call i32 @fclose(%struct._IO_FILE* %40)
  %85 = call i32 @fclose(%struct._IO_FILE* %69)
  %86 = getelementptr inbounds [40 x i8], [40 x i8]* %12, i32 0, i32 0
  call void @llvm.lifetime.start(i64 40, i8* nonnull %86) #6
  call void @llvm.memset.p0i8.i32(i8* nonnull %86, i8 0, i32 40, i32 1, i1 false)
  %87 = call i8* @strcat(i8* nonnull %86, i8* nonnull %22) #6
  %88 = call i32 @strlen(i8* nonnull %86)
  %89 = getelementptr [40 x i8], [40 x i8]* %12, i32 0, i32 %88
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %89, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.11, i32 0, i32 0), i32 18, i32 1, i1 false)
  %90 = bitcast i32* %13 to i8*
  call void @llvm.lifetime.start(i64 4, i8* nonnull %90) #6
  store i32 0, i32* %13, align 4, !tbaa !5
  %91 = call %struct._IO_FILE* @fopen(i8* nonnull %86, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i32 0, i32 0))
  %92 = call i32 (%struct._IO_FILE*, i8*, ...) @__isoc99_fscanf(%struct._IO_FILE* %91, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32* nonnull %13) #6
  %93 = call i32 @fclose(%struct._IO_FILE* %91)
  %94 = load i32, i32* %13, align 4, !tbaa !5
  %95 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.12, i32 0, i32 0), i32 %94)
  %96 = load i32, i32* %13, align 4, !tbaa !5
  %97 = load i32*, i32** @initCGRA, align 4, !tbaa !160
  %98 = getelementptr inbounds i32, i32* %97, i32 %16
  %99 = getelementptr inbounds i32, i32* %98, i32 5
  store i32 %96, i32* %99, align 4, !tbaa !5
  %100 = load i32, i32* bitcast (i32** @prolog to i32*), align 4, !tbaa !160
  %101 = load i32, i32* bitcast (i32** @epilog to i32*), align 4, !tbaa !160
  %102 = load i32, i32* bitcast (i32** @kernel to i32*), align 4, !tbaa !160
  %103 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.13, i32 0, i32 0), i32 %100, i32 %101, i32 %102)
  %104 = load i32, i32* bitcast (i32** @prolog to i32*), align 4, !tbaa !160
  %105 = load i32*, i32** @prologPtr, align 4, !tbaa !160
  %106 = getelementptr inbounds i32, i32* %105, i32 %15
  store i32 %104, i32* %106, align 4, !tbaa !162
  %107 = load i32, i32* bitcast (i32** @epilog to i32*), align 4, !tbaa !160
  %108 = load i32*, i32** @epilogPtr, align 4, !tbaa !160
  %109 = getelementptr inbounds i32, i32* %108, i32 %15
  store i32 %107, i32* %109, align 4, !tbaa !162
  %110 = load i32, i32* bitcast (i32** @kernel to i32*), align 4, !tbaa !160
  %111 = load i32*, i32** @kernelPtr, align 4, !tbaa !160
  %112 = getelementptr inbounds i32, i32* %111, i32 %15
  store i32 %110, i32* %112, align 4, !tbaa !162
  call void @llvm.lifetime.end(i64 4, i8* nonnull %90) #6
  call void @llvm.lifetime.end(i64 40, i8* nonnull %86) #6
  call void @llvm.lifetime.end(i64 4, i8* nonnull %44) #6
  call void @llvm.lifetime.end(i64 4, i8* nonnull %43) #6
  call void @llvm.lifetime.end(i64 4, i8* nonnull %42) #6
  call void @llvm.lifetime.end(i64 4, i8* nonnull %41) #6
  call void @llvm.lifetime.end(i64 40, i8* nonnull %28) #6
  call void @llvm.lifetime.end(i64 40, i8* nonnull %27) #6
  call void @llvm.lifetime.end(i64 40, i8* nonnull %26) #6
  call void @llvm.lifetime.end(i64 40, i8* nonnull %25) #6
  call void @llvm.lifetime.end(i64 20, i8* nonnull %22) #6
  call void @llvm.lifetime.end(i64 25, i8* nonnull %20) #6
  ret i32 0
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i32, i1) #3

; Function Attrs: nounwind
declare i8* @strcat(i8*, i8* nocapture readonly) local_unnamed_addr #4

; Function Attrs: nounwind
declare noalias %struct._IO_FILE* @fopen(i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #4

; Function Attrs: nounwind
declare i32 @fread(i8* nocapture, i32, i32, %struct._IO_FILE* nocapture) local_unnamed_addr #4

; Function Attrs: nounwind
declare noalias i8* @malloc(i32) local_unnamed_addr #4

declare i32 @__isoc99_fscanf(%struct._IO_FILE*, i8*, ...) local_unnamed_addr #7

; Function Attrs: nounwind
declare i32 @fclose(%struct._IO_FILE* nocapture) local_unnamed_addr #4

; Function Attrs: nounwind
define i32 @configureCGRA(i32) local_unnamed_addr #0 {
  %2 = alloca [25 x i8], align 1
  %3 = alloca [20 x i8], align 1
  %4 = alloca [40 x i8], align 1
  %5 = load i32*, i32** @initCGRA, align 4, !tbaa !160
  %6 = add i32 %0, -1
  %7 = mul i32 %6, 7
  %8 = getelementptr inbounds i32, i32* %5, i32 %7
  %9 = getelementptr inbounds i32, i32* %8, i32 5
  %10 = load i32, i32* %9, align 4, !tbaa !5
  %11 = getelementptr inbounds [25 x i8], [25 x i8]* %2, i32 0, i32 0
  call void @llvm.lifetime.start(i64 25, i8* nonnull %11) #6
  %12 = getelementptr inbounds [20 x i8], [20 x i8]* %3, i32 0, i32 0
  call void @llvm.lifetime.start(i64 20, i8* nonnull %12) #6
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* nonnull %12, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @configureCGRA.directoryPath, i32 0, i32 0), i32 20, i32 1, i1 false)
  %13 = call i32 (i8*, i8*, ...) @sprintf(i8* nonnull %11, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 %0) #6
  %14 = call i8* @strcat(i8* nonnull %12, i8* nonnull %11) #6
  %15 = icmp slt i32 %10, 1
  br i1 %15, label %16, label %22

; <label>:16:                                     ; preds = %1
  %17 = load i32, i32* @dynamicTCVal, align 4, !tbaa !5
  %18 = add nsw i32 %17, %10
  %19 = load i32*, i32** @initCGRA, align 4, !tbaa !160
  %20 = getelementptr inbounds i32, i32* %19, i32 %7
  %21 = getelementptr inbounds i32, i32* %20, i32 5
  store i32 %18, i32* %21, align 4, !tbaa !5
  br label %22

; <label>:22:                                     ; preds = %16, %1
  %23 = getelementptr inbounds [40 x i8], [40 x i8]* %4, i32 0, i32 0
  call void @llvm.lifetime.start(i64 40, i8* nonnull %23) #6
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* nonnull %23, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @configureCGRA.initCGRAfile, i32 0, i32 0), i32 40, i32 1, i1 false)
  %24 = call i32 @strlen(i8* nonnull %23)
  %25 = getelementptr [40 x i8], [40 x i8]* %4, i32 0, i32 %24
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %25, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.14, i32 0, i32 0), i32 14, i32 1, i1 false)
  %26 = call %struct._IO_FILE* @fopen(i8* nonnull %23, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.15, i32 0, i32 0))
  %27 = load i32*, i32** @initCGRA, align 4, !tbaa !160
  %28 = getelementptr inbounds i32, i32* %27, i32 %7
  %29 = load i32, i32* %28, align 4, !tbaa !5
  %30 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %26, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.16, i32 0, i32 0), i32 %29)
  %31 = load i32*, i32** @initCGRA, align 4, !tbaa !160
  %32 = getelementptr inbounds i32, i32* %31, i32 %7
  %33 = getelementptr inbounds i32, i32* %32, i32 1
  %34 = load i32, i32* %33, align 4, !tbaa !5
  %35 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %26, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.16, i32 0, i32 0), i32 %34)
  %36 = load i32*, i32** @initCGRA, align 4, !tbaa !160
  %37 = getelementptr inbounds i32, i32* %36, i32 %7
  %38 = getelementptr inbounds i32, i32* %37, i32 2
  %39 = load i32, i32* %38, align 4, !tbaa !5
  %40 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %26, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.16, i32 0, i32 0), i32 %39)
  %41 = load i32*, i32** @initCGRA, align 4, !tbaa !160
  %42 = getelementptr inbounds i32, i32* %41, i32 %7
  %43 = getelementptr inbounds i32, i32* %42, i32 3
  %44 = load i32, i32* %43, align 4, !tbaa !5
  %45 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %26, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.16, i32 0, i32 0), i32 %44)
  %46 = load i32*, i32** @initCGRA, align 4, !tbaa !160
  %47 = getelementptr inbounds i32, i32* %46, i32 %7
  %48 = getelementptr inbounds i32, i32* %47, i32 4
  %49 = load i32, i32* %48, align 4, !tbaa !5
  %50 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %26, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.16, i32 0, i32 0), i32 %49)
  %51 = load i32*, i32** @initCGRA, align 4, !tbaa !160
  %52 = getelementptr inbounds i32, i32* %51, i32 %7
  %53 = getelementptr inbounds i32, i32* %52, i32 5
  %54 = load i32, i32* %53, align 4, !tbaa !5
  %55 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %26, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.16, i32 0, i32 0), i32 %54)
  %56 = load i32*, i32** @initCGRA, align 4, !tbaa !160
  %57 = getelementptr inbounds i32, i32* %56, i32 %7
  %58 = getelementptr inbounds i32, i32* %57, i32 6
  %59 = load i32, i32* %58, align 4, !tbaa !5
  %60 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %26, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.16, i32 0, i32 0), i32 %59)
  %61 = load i32*, i32** @epilogPtr, align 4, !tbaa !160
  %62 = getelementptr inbounds i32, i32* %61, i32 %6
  %63 = load i32, i32* %62, align 4, !tbaa !162
  %64 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %26, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.17, i32 0, i32 0), i32 %63)
  %65 = load i32*, i32** @prologPtr, align 4, !tbaa !160
  %66 = getelementptr inbounds i32, i32* %65, i32 %6
  %67 = load i32, i32* %66, align 4, !tbaa !162
  %68 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %26, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.17, i32 0, i32 0), i32 %67)
  %69 = load i32*, i32** @kernelPtr, align 4, !tbaa !160
  %70 = getelementptr inbounds i32, i32* %69, i32 %6
  %71 = load i32, i32* %70, align 4, !tbaa !162
  %72 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %26, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.17, i32 0, i32 0), i32 %71)
  %73 = call i32 @fclose(%struct._IO_FILE* %26)
  call void @llvm.lifetime.end(i64 40, i8* nonnull %23) #6
  call void @llvm.lifetime.end(i64 20, i8* nonnull %12) #6
  call void @llvm.lifetime.end(i64 25, i8* nonnull %11) #6
  ret i32 0
}

; Function Attrs: nounwind
declare i32 @fprintf(%struct._IO_FILE* nocapture, i8* nocapture readonly, ...) local_unnamed_addr #4

; Function Attrs: nounwind
define void @checkTotalLoops() local_unnamed_addr #0 {
  %1 = alloca [40 x i8], align 1
  %2 = getelementptr inbounds [40 x i8], [40 x i8]* %1, i32 0, i32 0
  call void @llvm.lifetime.start(i64 40, i8* nonnull %2) #6
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* nonnull %2, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @checkTotalLoops.myfile, i32 0, i32 0), i32 40, i32 1, i1 false)
  %3 = call %struct._IO_FILE* @fopen(i8* nonnull %2, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i32 0, i32 0))
  %4 = tail call i32 (%struct._IO_FILE*, i8*, ...) @__isoc99_fscanf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.18, i32 0, i32 0), i32* nonnull @totalLoops) #6
  %5 = tail call i32 @fclose(%struct._IO_FILE* %3)
  call void @llvm.lifetime.end(i64 40, i8* nonnull %2) #6
  ret void
}

; Function Attrs: nounwind
define noalias i8* @runOnCGRA(i8* nocapture readnone) #0 {
  br label %2

; <label>:2:                                      ; preds = %11, %1
  %3 = load i32, i32* @thread_cond_cgra, align 4, !tbaa !5
  %4 = icmp eq i32 %3, 1
  br i1 %4, label %.loopexit, label %.preheader.preheader

.preheader.preheader:                             ; preds = %2
  br label %.preheader

.preheader:                                       ; preds = %.preheader, %.preheader.preheader
  %5 = tail call i32 @usleep(i32 1) #6
  %6 = load i32, i32* @thread_cond_cgra, align 4, !tbaa !5
  %7 = icmp eq i32 %6, 1
  br i1 %7, label %.loopexit.loopexit, label %.preheader, !llvm.loop !164

.loopexit.loopexit:                               ; preds = %.preheader
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit, %2
  %8 = load i32, i32* @thread_exit, align 4, !tbaa !5
  %9 = icmp eq i32 %8, 1
  br i1 %9, label %10, label %11

; <label>:10:                                     ; preds = %.loopexit
  tail call void asm sideeffect "mov r11,$0", "r"(i32 17) #6, !srcloc !212
  ret i8* null

; <label>:11:                                     ; preds = %.loopexit
  store i32 0, i32* @thread_cond_cgra, align 4, !tbaa !5
  tail call void asm sideeffect "mov r11,$0", "r"(i32 15) #6, !srcloc !213
  %12 = tail call i32 @usleep(i32 1) #6
  store i32 1, i32* @thread_cond_cpu, align 4, !tbaa !5
  br label %2, !llvm.loop !214
}

declare i32 @usleep(i32) local_unnamed_addr #7

; Function Attrs: nounwind
define void @accelerateOnCGRA(i32) local_unnamed_addr #0 {
  %2 = tail call i32 @configureCGRA(i32 %0)
  %3 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.20, i32 0, i32 0), i32 %0)
  store i32 0, i32* @thread_cond_cpu, align 4, !tbaa !5
  store i32 1, i32* @thread_cond_cgra, align 4, !tbaa !5
  br label %4

; <label>:4:                                      ; preds = %4, %1
  %5 = tail call i32 @usleep(i32 1) #6
  %6 = load i32, i32* @thread_cond_cpu, align 4, !tbaa !5
  %7 = icmp eq i32 %6, 1
  br i1 %7, label %8, label %4, !llvm.loop !216

; <label>:8:                                      ; preds = %4
  ret void
}

; Function Attrs: nounwind
define void @deleteCGRA() local_unnamed_addr #0 {
  %1 = tail call i32 @puts(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @str.4, i32 0, i32 0))
  store i32 1, i32* @thread_exit, align 4, !tbaa !5
  store i32 1, i32* @thread_cond_cgra, align 4, !tbaa !5
  %2 = tail call i32 @puts(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @str.24, i32 0, i32 0))
  %3 = load i32, i32* @pth, align 4, !tbaa !162
  %4 = tail call i32 @pthread_join(i32 %3, i8** null) #6
  ret void
}

declare i32 @pthread_join(i32, i8**) local_unnamed_addr #7

; Function Attrs: nounwind
define void @createCGRA() local_unnamed_addr #0 {
  %1 = alloca [40 x i8], align 1
  %2 = getelementptr inbounds [40 x i8], [40 x i8]* %1, i32 0, i32 0
  call void @llvm.lifetime.start(i64 40, i8* nonnull %2) #6
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* nonnull %2, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @checkTotalLoops.myfile, i32 0, i32 0), i32 40, i32 1, i1 false) #6
  %3 = call %struct._IO_FILE* @fopen(i8* nonnull %2, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i32 0, i32 0)) #6
  %4 = tail call i32 (%struct._IO_FILE*, i8*, ...) @__isoc99_fscanf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.18, i32 0, i32 0), i32* nonnull @totalLoops) #6
  %5 = tail call i32 @fclose(%struct._IO_FILE* %3) #6
  call void @llvm.lifetime.end(i64 40, i8* nonnull %2) #6
  %6 = load i32, i32* @totalLoops, align 4, !tbaa !5
  %7 = mul i32 %6, 28
  %8 = tail call noalias i8* @malloc(i32 %7) #6
  store i8* %8, i8** bitcast (i32** @initCGRA to i8**), align 4, !tbaa !160
  %9 = shl i32 %6, 2
  %10 = tail call noalias i8* @malloc(i32 %9) #6
  store i8* %10, i8** bitcast (i32** @prologPtr to i8**), align 4, !tbaa !160
  %11 = tail call noalias i8* @malloc(i32 %9) #6
  store i8* %11, i8** bitcast (i32** @kernelPtr to i8**), align 4, !tbaa !160
  %12 = tail call noalias i8* @malloc(i32 %9) #6
  store i8* %12, i8** bitcast (i32** @epilogPtr to i8**), align 4, !tbaa !160
  %13 = icmp eq i32 %6, 0
  br i1 %13, label %.loopexit, label %.preheader.preheader

.preheader.preheader:                             ; preds = %0
  br label %.preheader

.preheader:                                       ; preds = %.preheader, %.preheader.preheader
  %14 = phi i32 [ %16, %.preheader ], [ 1, %.preheader.preheader ]
  %15 = tail call i32 @initializeParameters(i32 %14)
  %16 = add i32 %14, 1
  %17 = load i32, i32* @totalLoops, align 4, !tbaa !5
  %18 = icmp ugt i32 %16, %17
  br i1 %18, label %.loopexit.loopexit, label %.preheader, !llvm.loop !225

.loopexit.loopexit:                               ; preds = %.preheader
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit, %0
  %19 = tail call i32 @puts(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @str.25, i32 0, i32 0))
  %20 = tail call i32 @pthread_create(i32* nonnull @pth, %union.pthread_attr_t* null, i8* (i8*)* nonnull @runOnCGRA, i8* null) #6
  ret void
}

; Function Attrs: nounwind
declare i32 @pthread_create(i32*, %union.pthread_attr_t*, i8* (i8*)*, i8*) local_unnamed_addr #4

attributes #0 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="cortex-a8" "target-features"="+dsp,+neon,+vfp3" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { norecurse nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="cortex-a8" "target-features"="+dsp,+neon,+vfp3" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="cortex-a8" "target-features"="+dsp,+neon,+vfp3" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="cortex-a8" "target-features"="+dsp,+neon,+vfp3" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="cortex-a8" "target-features"="+dsp,+neon,+vfp3" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind readonly }

!llvm.ident = !{!0, !0, !0}
!llvm.module.flags = !{!1, !2, !3, !4}

!0 = !{!"clang version 5.0.0 (trunk 296996) (llvm/trunk 296995)"}
!1 = !{i32 2, !"Dwarf Version", i32 4}
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 1, !"wchar_size", i32 4}
!4 = !{i32 1, !"min_enum_size", i32 4}
!5 = !{!6, !6, i64 0}
!6 = !{!"int", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C/C++ TBAA"}
!9 = distinct !{!9, !10, !70}
!10 = !DILocation(line: 334, column: 9, scope: !11)
!11 = distinct !DILexicalBlock(scope: !13, file: !12, line: 207, column: 9)
!12 = !DIFile(filename: "sha1.c", directory: "/home/lincoln/ccf3/ccf/work/benchmarks/sha")
!13 = distinct !DILexicalBlock(scope: !14, file: !12, line: 203, column: 5)
!14 = distinct !DILexicalBlock(scope: !15, file: !12, line: 202, column: 9)
!15 = distinct !DISubprogram(name: "SHA1UpdateCGRA", scope: !12, file: !12, line: 192, type: !16, isLocal: false, isDefinition: true, scopeLine: 193, flags: DIFlagPrototyped, isOptimized: true, unit: !41, variables: !45)
!16 = !DISubroutineType(types: !17)
!17 = !{null, !18, !39, !25}
!18 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !19, size: 32)
!19 = !DIDerivedType(tag: DW_TAG_typedef, name: "SHA1_CTX", file: !20, line: 17, baseType: !21)
!20 = !DIFile(filename: "./sha1.h", directory: "/home/lincoln/ccf3/ccf/work/benchmarks/sha")
!21 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !20, line: 12, size: 736, elements: !22)
!22 = !{!23, !30, !34}
!23 = !DIDerivedType(tag: DW_TAG_member, name: "state", scope: !21, file: !20, line: 14, baseType: !24, size: 160)
!24 = !DICompositeType(tag: DW_TAG_array_type, baseType: !25, size: 160, elements: !28)
!25 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint32_t", file: !26, line: 51, baseType: !27)
!26 = !DIFile(filename: "/usr/arm-linux-gnueabi/include/stdint.h", directory: "/home/lincoln/ccf3/ccf/work/benchmarks/sha")
!27 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!28 = !{!29}
!29 = !DISubrange(count: 5)
!30 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !21, file: !20, line: 15, baseType: !31, size: 64, offset: 160)
!31 = !DICompositeType(tag: DW_TAG_array_type, baseType: !25, size: 64, elements: !32)
!32 = !{!33}
!33 = !DISubrange(count: 2)
!34 = !DIDerivedType(tag: DW_TAG_member, name: "buffer", scope: !21, file: !20, line: 16, baseType: !35, size: 512, offset: 224)
!35 = !DICompositeType(tag: DW_TAG_array_type, baseType: !36, size: 512, elements: !37)
!36 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!37 = !{!38}
!38 = !DISubrange(count: 64)
!39 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !40, size: 32)
!40 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !36)
!41 = distinct !DICompileUnit(language: DW_LANG_C99, file: !12, producer: "clang version 5.0.0 (trunk 296996) (llvm/trunk 296995)", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !42, retainedTypes: !43)
!42 = !{}
!43 = !{!36, !39, !44}
!44 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !36, size: 32)
!45 = !{!46, !47, !48, !49, !50, !51, !54, !55, !56, !57, !58}
!46 = !DILocalVariable(name: "context", arg: 1, scope: !15, file: !12, line: 192, type: !18)
!47 = !DILocalVariable(name: "data", arg: 2, scope: !15, file: !12, line: 192, type: !39)
!48 = !DILocalVariable(name: "len", arg: 3, scope: !15, file: !12, line: 192, type: !25)
!49 = !DILocalVariable(name: "i", scope: !15, file: !12, line: 194, type: !25)
!50 = !DILocalVariable(name: "j", scope: !15, file: !12, line: 195, type: !25)
!51 = !DILocalVariable(name: "a", scope: !52, file: !12, line: 213, type: !25)
!52 = distinct !DILexicalBlock(scope: !53, file: !12, line: 208, column: 9)
!53 = distinct !DILexicalBlock(scope: !11, file: !12, line: 207, column: 9)
!54 = !DILocalVariable(name: "b", scope: !52, file: !12, line: 213, type: !25)
!55 = !DILocalVariable(name: "c", scope: !52, file: !12, line: 213, type: !25)
!56 = !DILocalVariable(name: "d", scope: !52, file: !12, line: 213, type: !25)
!57 = !DILocalVariable(name: "e", scope: !52, file: !12, line: 213, type: !25)
!58 = !DILocalVariable(name: "block", scope: !52, file: !12, line: 222, type: !59)
!59 = !DICompositeType(tag: DW_TAG_array_type, baseType: !60, size: 512, elements: !68)
!60 = !DIDerivedType(tag: DW_TAG_typedef, name: "CHAR64LONG16", scope: !15, file: !12, line: 219, baseType: !61)
!61 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !15, file: !12, line: 215, size: 512, elements: !62)
!62 = !{!63, !64}
!63 = !DIDerivedType(tag: DW_TAG_member, name: "c", scope: !61, file: !12, line: 217, baseType: !35, size: 512)
!64 = !DIDerivedType(tag: DW_TAG_member, name: "l", scope: !61, file: !12, line: 218, baseType: !65, size: 512)
!65 = !DICompositeType(tag: DW_TAG_array_type, baseType: !25, size: 512, elements: !66)
!66 = !{!67}
!67 = !DISubrange(count: 16)
!68 = !{!69}
!69 = !DISubrange(count: 1)
!70 = !{!"llvm.loop.CGRA.disable"}
!71 = distinct !{!71, !72}
!72 = !DILocation(line: 362, column: 9, scope: !73)
!73 = distinct !DILexicalBlock(scope: !74, file: !12, line: 359, column: 9)
!74 = distinct !DILexicalBlock(scope: !75, file: !12, line: 356, column: 5)
!75 = distinct !DILexicalBlock(scope: !76, file: !12, line: 355, column: 9)
!76 = distinct !DISubprogram(name: "SHA1Update", scope: !12, file: !12, line: 345, type: !16, isLocal: false, isDefinition: true, scopeLine: 346, flags: DIFlagPrototyped, isOptimized: true, unit: !41, variables: !77)
!77 = !{!78, !79, !80, !81, !82}
!78 = !DILocalVariable(name: "context", arg: 1, scope: !76, file: !12, line: 345, type: !18)
!79 = !DILocalVariable(name: "data", arg: 2, scope: !76, file: !12, line: 345, type: !39)
!80 = !DILocalVariable(name: "len", arg: 3, scope: !76, file: !12, line: 345, type: !25)
!81 = !DILocalVariable(name: "i", scope: !76, file: !12, line: 347, type: !25)
!82 = !DILocalVariable(name: "j", scope: !76, file: !12, line: 348, type: !25)
!83 = !{!7, !7, i64 0}
!84 = distinct !{!84, !85}
!85 = !DILocation(line: 396, column: 5, scope: !86)
!86 = distinct !DISubprogram(name: "SHA1Final", scope: !12, file: !12, line: 373, type: !87, isLocal: false, isDefinition: true, scopeLine: 377, flags: DIFlagPrototyped, isOptimized: true, unit: !41, variables: !89)
!87 = !DISubroutineType(types: !88)
!88 = !{null, !44, !18}
!89 = !{!90, !91, !92, !93, !97}
!90 = !DILocalVariable(name: "digest", arg: 1, scope: !86, file: !12, line: 374, type: !44)
!91 = !DILocalVariable(name: "context", arg: 2, scope: !86, file: !12, line: 375, type: !18)
!92 = !DILocalVariable(name: "i", scope: !86, file: !12, line: 378, type: !27)
!93 = !DILocalVariable(name: "finalcount", scope: !86, file: !12, line: 380, type: !94)
!94 = !DICompositeType(tag: DW_TAG_array_type, baseType: !36, size: 64, elements: !95)
!95 = !{!96}
!96 = !DISubrange(count: 8)
!97 = !DILocalVariable(name: "c", scope: !86, file: !12, line: 382, type: !36)
!98 = distinct !{!98, !99}
!99 = !DILocation(line: 418, column: 5, scope: !100)
!100 = distinct !DILexicalBlock(scope: !101, file: !12, line: 415, column: 5)
!101 = distinct !DISubprogram(name: "SHA1", scope: !12, file: !12, line: 409, type: !102, isLocal: false, isDefinition: true, scopeLine: 410, flags: DIFlagPrototyped, isOptimized: true, unit: !41, variables: !109)
!102 = !DISubroutineType(types: !103)
!103 = !{null, !104, !106, !108}
!104 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !105, size: 32)
!105 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_unsigned_char)
!106 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !107, size: 32)
!107 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !105)
!108 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!109 = !{!110, !111, !112, !113, !114}
!110 = !DILocalVariable(name: "hash_out", arg: 1, scope: !101, file: !12, line: 409, type: !104)
!111 = !DILocalVariable(name: "str", arg: 2, scope: !101, file: !12, line: 409, type: !106)
!112 = !DILocalVariable(name: "len", arg: 3, scope: !101, file: !12, line: 409, type: !108)
!113 = !DILocalVariable(name: "ctx", scope: !101, file: !12, line: 411, type: !19)
!114 = !DILocalVariable(name: "ii", scope: !101, file: !12, line: 412, type: !27)
!115 = distinct !{!115, !116}
!116 = !DILocation(line: 44, column: 2, scope: !117)
!117 = distinct !DILexicalBlock(scope: !119, file: !118, line: 37, column: 2)
!118 = !DIFile(filename: "main.c", directory: "/home/lincoln/ccf3/ccf/work/benchmarks/sha")
!119 = distinct !DISubprogram(name: "main", scope: !118, file: !118, line: 11, type: !120, isLocal: false, isDefinition: true, scopeLine: 12, isOptimized: true, unit: !122, variables: !135)
!120 = !DISubroutineType(types: !121)
!121 = !{!108}
!122 = distinct !DICompileUnit(language: DW_LANG_C99, file: !118, producer: "clang version 5.0.0 (trunk 296996) (llvm/trunk 296995)", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !42, retainedTypes: !123, globals: !124)
!123 = !{!27, !105}
!124 = !{!125, !130}
!125 = !DIGlobalVariableExpression(var: !126)
!126 = distinct !DIGlobalVariable(name: "string", scope: !119, file: !118, line: 13, type: !127, isLocal: true, isDefinition: true)
!127 = !DICompositeType(tag: DW_TAG_array_type, baseType: !107, size: 32, elements: !128)
!128 = !{!129}
!129 = !DISubrange(count: 4)
!130 = !DIGlobalVariableExpression(var: !131)
!131 = distinct !DIGlobalVariable(name: "expect", scope: !119, file: !118, line: 14, type: !132, isLocal: true, isDefinition: true)
!132 = !DICompositeType(tag: DW_TAG_array_type, baseType: !107, size: 328, elements: !133)
!133 = !{!134}
!134 = !DISubrange(count: 41)
!135 = !{!136, !140, !142, !145, !151, !155, !156}
!136 = !DILocalVariable(name: "result", scope: !119, file: !118, line: 15, type: !137)
!137 = !DICompositeType(tag: DW_TAG_array_type, baseType: !105, size: 168, elements: !138)
!138 = !{!139}
!139 = !DISubrange(count: 21)
!140 = !DILocalVariable(name: "hexresult", scope: !119, file: !118, line: 16, type: !141)
!141 = !DICompositeType(tag: DW_TAG_array_type, baseType: !105, size: 328, elements: !133)
!142 = !DILocalVariable(name: "offset", scope: !119, file: !118, line: 17, type: !143)
!143 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !144, line: 62, baseType: !27)
!144 = !DIFile(filename: "/home/lincoln/ccf3/ccf/llvm/build/lib/clang/5.0.0/include/stddef.h", directory: "/home/lincoln/ccf3/ccf/work/benchmarks/sha")
!145 = !DILocalVariable(name: "t", scope: !119, file: !118, line: 31, type: !146)
!146 = !DIDerivedType(tag: DW_TAG_typedef, name: "time_t", file: !147, line: 75, baseType: !148)
!147 = !DIFile(filename: "/usr/arm-linux-gnueabi/include/time.h", directory: "/home/lincoln/ccf3/ccf/work/benchmarks/sha")
!148 = !DIDerivedType(tag: DW_TAG_typedef, name: "__time_t", file: !149, line: 139, baseType: !150)
!149 = !DIFile(filename: "/usr/arm-linux-gnueabi/include/bits/types.h", directory: "/home/lincoln/ccf3/ccf/work/benchmarks/sha")
!150 = !DIBasicType(name: "long int", size: 32, encoding: DW_ATE_signed)
!151 = !DILocalVariable(name: "st", scope: !119, file: !118, line: 35, type: !152)
!152 = !DICompositeType(tag: DW_TAG_array_type, baseType: !105, size: 16800, elements: !153)
!153 = !{!154, !139}
!154 = !DISubrange(count: 100)
!155 = !DILocalVariable(name: "i", scope: !119, file: !118, line: 36, type: !108)
!156 = !DILocalVariable(name: "j", scope: !119, file: !118, line: 36, type: !108)
!157 = distinct !{!157, !158}
!158 = !DILocation(line: 55, column: 2, scope: !159)
!159 = distinct !DILexicalBlock(scope: !119, file: !118, line: 46, column: 2)
!160 = !{!161, !161, i64 0}
!161 = !{!"any pointer", !7, i64 0}
!162 = !{!163, !163, i64 0}
!163 = !{!"long", !7, i64 0}
!164 = distinct !{!164, !165}
!165 = !DILocation(line: 147, column: 46, scope: !166)
!166 = distinct !DILexicalBlock(scope: !168, file: !167, line: 146, column: 14)
!167 = !DIFile(filename: "/home/lincoln/ccf3/ccf/scripts/CGRALib/cgra.c", directory: "/home/lincoln/ccf3/ccf/work/benchmarks/sha")
!168 = distinct !DISubprogram(name: "runOnCGRA", scope: !167, file: !167, line: 143, type: !169, isLocal: false, isDefinition: true, scopeLine: 144, flags: DIFlagPrototyped, isOptimized: true, unit: !172, variables: !210)
!169 = !DISubroutineType(types: !170)
!170 = !{!171, !171}
!171 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 32)
!172 = distinct !DICompileUnit(language: DW_LANG_C99, file: !167, producer: "clang version 5.0.0 (trunk 296996) (llvm/trunk 296995)", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !42, retainedTypes: !173, globals: !176)
!173 = !{!174, !27, !150, !171, !175}
!174 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !27, size: 32)
!175 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !108, size: 32)
!176 = !{!177, !180, !182, !184, !186, !188, !190, !192, !194, !196, !199, !201, !203, !205}
!177 = !DIGlobalVariableExpression(var: !178)
!178 = distinct !DIGlobalVariable(name: "totalLoops", scope: !172, file: !179, line: 29, type: !27, isLocal: false, isDefinition: true)
!179 = !DIFile(filename: "/home/lincoln/ccf3/ccf/scripts/CGRALib/cgra.h", directory: "/home/lincoln/ccf3/ccf/work/benchmarks/sha")
!180 = !DIGlobalVariableExpression(var: !181)
!181 = distinct !DIGlobalVariable(name: "thread_cond_cpu", scope: !172, file: !179, line: 32, type: !27, isLocal: false, isDefinition: true)
!182 = !DIGlobalVariableExpression(var: !183)
!183 = distinct !DIGlobalVariable(name: "thread_cond_cgra", scope: !172, file: !179, line: 33, type: !27, isLocal: false, isDefinition: true)
!184 = !DIGlobalVariableExpression(var: !185)
!185 = distinct !DIGlobalVariable(name: "thread_exit", scope: !172, file: !179, line: 34, type: !27, isLocal: false, isDefinition: true)
!186 = !DIGlobalVariableExpression(var: !187)
!187 = distinct !DIGlobalVariable(name: "dynamicTCVal", scope: !172, file: !179, line: 36, type: !108, isLocal: false, isDefinition: true)
!188 = !DIGlobalVariableExpression(var: !189)
!189 = distinct !DIGlobalVariable(name: "prolog", scope: !172, file: !179, line: 23, type: !174, isLocal: false, isDefinition: true)
!190 = !DIGlobalVariableExpression(var: !191)
!191 = distinct !DIGlobalVariable(name: "epilog", scope: !172, file: !179, line: 23, type: !174, isLocal: false, isDefinition: true)
!192 = !DIGlobalVariableExpression(var: !193)
!193 = distinct !DIGlobalVariable(name: "kernel", scope: !172, file: !179, line: 23, type: !174, isLocal: false, isDefinition: true)
!194 = !DIGlobalVariableExpression(var: !195)
!195 = distinct !DIGlobalVariable(name: "ArrPtr", scope: !172, file: !179, line: 24, type: !174, isLocal: false, isDefinition: true)
!196 = !DIGlobalVariableExpression(var: !197)
!197 = distinct !DIGlobalVariable(name: "prologPtr", scope: !172, file: !179, line: 26, type: !198, isLocal: false, isDefinition: true)
!198 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !150, size: 32)
!199 = !DIGlobalVariableExpression(var: !200)
!200 = distinct !DIGlobalVariable(name: "kernelPtr", scope: !172, file: !179, line: 26, type: !198, isLocal: false, isDefinition: true)
!201 = !DIGlobalVariableExpression(var: !202)
!202 = distinct !DIGlobalVariable(name: "epilogPtr", scope: !172, file: !179, line: 26, type: !198, isLocal: false, isDefinition: true)
!203 = !DIGlobalVariableExpression(var: !204)
!204 = distinct !DIGlobalVariable(name: "initCGRA", scope: !172, file: !179, line: 28, type: !175, isLocal: false, isDefinition: true)
!205 = !DIGlobalVariableExpression(var: !206)
!206 = distinct !DIGlobalVariable(name: "pth", scope: !172, file: !179, line: 31, type: !207, isLocal: false, isDefinition: true)
!207 = !DIDerivedType(tag: DW_TAG_typedef, name: "pthread_t", file: !208, line: 37, baseType: !209)
!208 = !DIFile(filename: "/usr/arm-linux-gnueabi/include/bits/pthreadtypes.h", directory: "/home/lincoln/ccf3/ccf/work/benchmarks/sha")
!209 = !DIBasicType(name: "long unsigned int", size: 32, encoding: DW_ATE_unsigned)
!210 = !{!211}
!211 = !DILocalVariable(name: "arg", arg: 1, scope: !168, file: !167, line: 143, type: !171)
!212 = !{i32 4103}
!213 = !{i32 4211}
!214 = distinct !{!214, !215}
!215 = !DILocation(line: 158, column: 5, scope: !168)
!216 = distinct !{!216, !217}
!217 = !DILocation(line: 176, column: 41, scope: !218)
!218 = distinct !DISubprogram(name: "accelerateOnCGRA", scope: !167, file: !167, line: 162, type: !219, isLocal: false, isDefinition: true, scopeLine: 163, flags: DIFlagPrototyped, isOptimized: true, unit: !172, variables: !221)
!219 = !DISubroutineType(types: !220)
!220 = !{null, !27}
!221 = !{!222, !223, !224}
!222 = !DILocalVariable(name: "loopNo", arg: 1, scope: !218, file: !167, line: 162, type: !27)
!223 = !DILocalVariable(name: "result", scope: !218, file: !167, line: 164, type: !108)
!224 = !DILocalVariable(name: "configure", scope: !218, file: !167, line: 166, type: !108)
!225 = distinct !{!225, !226}
!226 = !DILocation(line: 204, column: 29, scope: !227)
!227 = distinct !DILexicalBlock(scope: !228, file: !167, line: 203, column: 3)
!228 = distinct !DISubprogram(name: "createCGRA", scope: !167, file: !167, line: 191, type: !229, isLocal: false, isDefinition: true, scopeLine: 192, isOptimized: true, unit: !172, variables: !231)
!229 = !DISubroutineType(types: !230)
!230 = !{null}
!231 = !{!232, !233}
!232 = !DILocalVariable(name: "result", scope: !228, file: !167, line: 193, type: !108)
!233 = !DILocalVariable(name: "i", scope: !228, file: !167, line: 194, type: !27)
