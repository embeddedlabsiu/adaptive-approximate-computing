#!/bin/bash
# Sets up necessary code generation/simulation tools for CCF framework
# Author: Shail Dave
# Last Modified: 30 April, 2018

newpath="$(pwd)" #Fetch the path of the top module (CCF)
oldpath="\$HOME/shail/ccf"

# =============================================================
# Check the status of dependencies and install needed packages
#$newpath/scripts/install_dependecies

# =============================================================
# For system linking, we use LLVM gold plugin interface
# (http://llvm.org/docs/GoldPlugin.html)
# You may also check out following page for the details of installation steps
# (https://github.com/SVF-tools/SVF/wiki/Install-LLVM-Gold-Plugin-on-Ubuntu)

# We have successfully tested our entire llvm setup on Ubuntu 14.04 and 16.04
# However, it might be compatible as-is with other versions as well.

# Build gold plug-in for llvm-link
cd $newpath/plugin-llvm-gold
mkdir build
cd build
../binutils/configure --enable-gold --enable-plugins --disable-werror
make -j
cd ../

# Build llvm with gold-plugin
cd $newpath/llvm
mkdir build
cd build
cmake -DLLVM_BINUTILS_INCDIR="$newpath/plugin-llvm-gold/binutils/include" --enable-pic -DCMAKE_BUILD_TYPE=Release ../
make ENABLE_PIC=1 -j
make install
cd ../

# Backup ar, nm, ld and ranlib
cd $newpath/plugin-llvm-gold
mkdir backup
cp /usr/bin/ar ./backup/
cp /usr/bin/nm ./backup/
cp /usr/bin/ld ./backup/
cp /usr/bin/ranlib ./backup/

# Replace ar, nm, ld and ranlib
cp build/binutils/ar /usr/bin/
rm /usr/bin/nm
cp build/binutils/nm-new /usr/bin/nm
cp build/binutils/ranlib /usr/bin/
cp build/gold/ld-new /usr/bin/ld

# Install LLVMgold.so to /usr/lib/bfd-plugins
cd /usr/lib/
mkdir bfd-plugins
cd bfd-plugins
cp $newpath/llvm/build/lib/LLVMgold.so ./
cp $newpath/llvm/build/lib/libLTO.so ./

# Export environment variables
export RANLIB=/bin/true


# =============================================================
# Fix the paths
sed -i "s|$oldpath|$newpath|g" $newpath/InstructionGenerator/insgen.cpp
sed -i "s|$oldpath|$newpath|g" $newpath/scripts/map.sh
sed -i "s|$oldpath|$newpath|g" $newpath/scripts/opt.sh
sed -i "s|$oldpath|$newpath|g" $newpath/scripts/CGRALib/cgracc
sed -i "s|$oldpath|$newpath|g" $newpath/scripts/CGRALib/run.sh

# =============================================================
# Copy compilation script
#sudo cp $newpath/scripts/CGRALib/cgracc /usr/bin
#sudo chmod +x /usr/bin/cgracc

# =============================================================
# Build instruction generation tool
cd $newpath/InstructionGenerator
g++ -static -O3 insgen.cpp -o insgen
cd ../

#=============================================================
# Give access to all scripts
chmod +x $newpath/scripts/*.sh

#=============================================================
# Build mapping tool
cd $newpath/RAMP/Release/
make -j 
cd ../DFGFiles
g++ -O3 nodefile.cpp -o nodefile
g++ -O3 edgefile.cpp -o edgefile
cd ../../

#===========================================================
# Build gem5
cd $newpath/gem5
scons build/ARM/gem5.opt  -j6
sed -i "s|AtomicSimpleCPU|AtomicCGRA,AtomicSimpleCPU|g" $newpath/gem5/build/variables/ARM
scons build/ARM/gem5.opt -j6
cd ../
#==========================================================
